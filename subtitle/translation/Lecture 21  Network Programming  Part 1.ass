[Script Info]
; Script generated by Aegisub r8942
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: ../../../../Desktop/csapp/Lecture 21  Network Programming  Part 1.mp4
Video File: ../../../../Desktop/csapp/Lecture 21  Network Programming  Part 1.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 1.000000
Scroll Position: 857
Active Line: 865
Video Position: 138293

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: English,Source Han Sans CN,30,&H00FFFFFF,&H00412A2C,&H00412A2C,&H00412A2C,0,0,0,0,100,100,0,0,1,2.2,1,2,10,10,10,1
Style: Chinese,Source Han Sans CN,34,&H00FBFD00,&H00FFFFFF,&H00362A28,&H00FFFFFF,0,0,0,0,100,100,0,0,1,2,0.2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.80,0:00:02.02,English,,0,0,0,,Good afternoon everyone
Dialogue: 0,0:00:00.80,0:00:02.02,Chinese,,0,0,0,,大家下午好
Dialogue: 0,0:00:04.12,0:00:07.60,English,,0,0,0,,So today we're going to transition into a topic that
Dialogue: 0,0:00:04.12,0:00:07.60,Chinese,,0,0,0,,今天我们将过渡到一个新的章节
Dialogue: 0,0:00:08.10,0:00:17.24,English,,0,0,0,,To me is sort of the reward for having slugged through all the low-level stuff you've done up to this point
Dialogue: 0,0:00:08.10,0:00:17.24,Chinese,,0,0,0,,对我来说,这是看完你们到目前为止完成的所有低级作业的奖励
Dialogue: 0,0:00:17.68,0:00:23.54,English,,0,0,0,,To be able to really understand and become adept at programming network software
Dialogue: 0,0:00:17.68,0:00:23.54,Chinese,,0,0,0,,这个章节中，我们的目标是能真正地理解和熟练地编写网络软件
Dialogue: 0,0:00:24.12,0:00:27.20,English,,0,0,0,,Now there's a lot to networking that we're not going to cover
Dialogue: 0,0:00:24.12,0:00:27.20,Chinese,,0,0,0,,现阶段,有很多关于网络设计的内容我们不准备涵盖
Dialogue: 0,0:00:27.20,0:00:29.86,English,,0,0,0,,But at least to have some familiarity with it
Dialogue: 0,0:00:27.20,0:00:29.86,Chinese,,0,0,0,,但至少应对它有点熟悉
Dialogue: 0,0:00:30.46,0:00:34.88,English,,0,0,0,,So I know that a lot of you are sort of in the midst of trying to figure out
Dialogue: 0,0:00:30.46,0:00:34.88,Chinese,,0,0,0,,我知道你们中很多人还沉浸在找出
Dialogue: 0,0:00:34.88,0:00:37.12,English,,0,0,0,,How to make malloc run and make it run fast
Dialogue: 0,0:00:34.88,0:00:37.12,Chinese,,0,0,0,,让储存管理器运行更快的方法
Dialogue: 0,0:00:37.92,0:00:43.52,English,,0,0,0,,And so this topic is really more pointing toward the future
Dialogue: 0,0:00:37.92,0:00:43.52,Chinese,,0,0,0,,然而这个章节在长远来看更重要
Dialogue: 0,0:00:43.52,0:00:46.70,English,,0,0,0,,But it's very relevant to the final web lab you'll do for the course
Dialogue: 0,0:00:43.52,0:00:46.70,Chinese,,0,0,0,,它和你们将要在这个课程中完成的期末网络实验关系很大
Dialogue: 0,0:00:47.58,0:00:50.32,English,,0,0,0,,And so we're starting to get ready for that
Dialogue: 0,0:00:47.58,0:00:50.32,Chinese,,0,0,0,,所以我们现在就开始为它做准备吧
Dialogue: 0,0:00:56.90,0:01:00.58,English,,0,0,0,,So like I said this course is not really a full course in networking
Dialogue: 0,0:00:56.90,0:01:00.58,Chinese,,0,0,0,,就像我说的,这门课程并不是一门完整的网络设计课程
Dialogue: 0,0:01:00.58,0:01:03.38,English,,0,0,0,,There's many other courses at the university that are
Dialogue: 0,0:01:00.58,0:01:03.38,Chinese,,0,0,0,,在大学期间还有很多其他课程(与网络设计有关)
Dialogue: 0,0:01:03.80,0:01:07.28,English,,0,0,0,,And so what we're going to try and do is give you just a little flavor of it
Dialogue: 0,0:01:03.80,0:01:07.28,Chinese,,0,0,0,,所以我将要做的只是让你们对它有一定的了解
Dialogue: 0,0:01:07.28,0:01:10.86,English,,0,0,0,,And particularly as everything in the course of programmers perspective
Dialogue: 0,0:01:07.28,0:01:10.86,Chinese,,0,0,0,,就像我们在这15-213门课的大部分时间做的事情一样
Dialogue: 0,0:01:11.04,0:01:20.80,English,,0,0,0,,So how you as a software developer would make use of the C level api's that are relevant to network programming
Dialogue: 0,0:01:11.04,0:01:20.80,Chinese,,0,0,0,,那么,作为一名程序员，你们准备怎样利用与网络编程有关的 C 语言的 api
Dialogue: 0,0:01:24.44,0:01:26.74,English,,0,0,0,,And why isn't this working
Dialogue: 0,0:01:24.44,0:01:26.74,Chinese,,0,0,0,,它为什么不灵了
Dialogue: 0,0:01:31.68,0:01:32.70,English,,0,0,0,,Okay so
Dialogue: 0,0:01:31.68,0:01:32.70,Chinese,,0,0,0,,好的，那么
Dialogue: 0,0:01:33.68,0:01:39.92,English,,0,0,0,,The idea behind most networking systems is what's called  the client-server model
Dialogue: 0,0:01:33.68,0:01:39.92,Chinese,,0,0,0,,大多数网络系统都是基于客户端-服务器模型编写的
Dialogue: 0,0:01:40.44,0:01:44.38,English,,0,0,0,,And the idea is that there's a service out there that you want access to
Dialogue: 0,0:01:40.44,0:01:44.38,Chinese,,0,0,0,,主要的思路就你想要使用某项服务
Dialogue: 0,0:01:44.88,0:01:49.58,English,,0,0,0,,And you as a customer or a client are making a request to that server
Dialogue: 0,0:01:44.88,0:01:49.58,Chinese,,0,0,0,,然后客户端对那台服务器发出一个请求
Dialogue: 0,0:01:49.72,0:01:54.14,English,,0,0,0,,So an example would be when you order something on amazon
Dialogue: 0,0:01:49.72,0:01:54.14,Chinese,,0,0,0,,举个例子，当你在亚马逊上订购一些东西时
Dialogue: 0,0:01:54.20,0:01:56.34,English,,0,0,0,,Amazon has a bunch of servers
Dialogue: 0,0:01:54.20,0:01:56.34,Chinese,,0,0,0,,亚马逊有一些服务器群
Dialogue: 0,0:01:57.10,0:02:04.12,English,,0,0,0,,And you go to your web browser and contacts the amazon a web server
Dialogue: 0,0:01:57.10,0:02:04.12,Chinese,,0,0,0,,你通过浏览器和亚马逊的一台网络服务器通信
Dialogue: 0,0:02:04.50,0:02:08.90,English,,0,0,0,,And you make transactions you request something you provide information
Dialogue: 0,0:02:04.50,0:02:08.90,Chinese,,0,0,0,,比如做一些交易，查找一些东西，或是提供一些信息
Dialogue: 0,0:02:09.32,0:02:14.56,English,,0,0,0,,And it gives you back pretty pictures of things you might want to buy
Dialogue: 0,0:02:09.32,0:02:14.56,Chinese,,0,0,0,,然后它给了你一些你可能想要买的东西的精美图片
Dialogue: 0,0:02:14.84,0:02:17.06,English,,0,0,0,,It acknowledges your credit card transactions
Dialogue: 0,0:02:14.84,0:02:17.06,Chinese,,0,0,0,,交易通过你的信用卡完成
Dialogue: 0,0:02:17.42,0:02:21.20,English,,0,0,0,,Those are all very classic client-server types of interactions
Dialogue: 0,0:02:17.42,0:02:21.20,Chinese,,0,0,0,,这就是很经典的客户端-服务器型互动
Dialogue: 0,0:02:21.64,0:02:24.36,English,,0,0,0,,You as the client,amazon is the server
Dialogue: 0,0:02:21.64,0:02:24.36,Chinese,,0,0,0,,你这边是客户端，亚马逊那边就是服务器
Dialogue: 0,0:02:24.84,0:02:27.36,English,,0,0,0,,Another interesting example is a telephone
Dialogue: 0,0:02:24.84,0:02:27.36,Chinese,,0,0,0,,另一个有趣的例子是电话
Dialogue: 0,0:02:28.14,0:02:32.40,English,,0,0,0,,So if you think about it a telephone is both a client and a server in that
Dialogue: 0,0:02:28.14,0:02:32.40,Chinese,,0,0,0,,想象一下，如果一部电话既是客户端又是服务器
Dialogue: 0,0:02:33.18,0:02:36.62,English,,0,0,0,,When I'm making a placing a call to somebody else
Dialogue: 0,0:02:33.18,0:02:36.62,Chinese,,0,0,0,,当我给其他人拨一通电话时
Dialogue: 0,0:02:37.08,0:02:41.46,English,,0,0,0,,I'm the client and that person's phone is the server right
Dialogue: 0,0:02:37.08,0:02:41.46,Chinese,,0,0,0,,我这边的电话是客户端，而他的电话是服务器，对吧
Dialogue: 0,0:02:41.96,0:02:45.92,English,,0,0,0,,It's sitting there waiting for calls to come in
Dialogue: 0,0:02:41.96,0:02:45.92,Chinese,,0,0,0,,它就在那里等待通话进来
Dialogue: 0,0:02:46.44,0:02:49.42,English,,0,0,0,,And when that call comes in it makes a connection
Dialogue: 0,0:02:46.44,0:02:49.42,Chinese,,0,0,0,,当通话进来时就创建了一个连接
Dialogue: 0,0:02:49.90,0:02:54.86,English,,0,0,0,,We talk over the phone and then I hang up either side hangs up
Dialogue: 0,0:02:49.90,0:02:54.86,Chinese,,0,0,0,,我们通过电话交谈，然后我挂掉电话，或是任意一边挂掉电话(连接就断开了)
Dialogue: 0,0:02:54.94,0:02:59.92,English,,0,0,0,,So there's a lot of instances out there of some variation of client and server
Dialogue: 0,0:02:54.94,0:02:59.92,Chinese,,0,0,0,,现实中有许多不同的客户端-服务器模型的例子
Dialogue: 0,0:02:59.92,0:03:06.76,English,,0,0,0,,And it's a much richer idea in that you can often switch back and forth  the roles of those two parties
Dialogue: 0,0:02:59.92,0:03:06.76,Chinese,,0,0,0,,而且例子比你想象的要多得多，因为你可以来回切换两者（客户端和服务器）的角色
Dialogue: 0,0:03:06.88,0:03:15.18,English,,0,0,0,,But it's a pretty universal and a ubiquitous way of thinking about how to set up a network system
Dialogue: 0,0:03:06.88,0:03:15.18,Chinese,,0,0,0,,但思考如何建立一个网络系统的方式是非常通用的
Dialogue: 0,0:03:16.30,0:03:21.82,English,,0,0,0,,So in general then the idea is that there's a...system working
Dialogue: 0,0:03:16.30,0:03:21.82,Chinese,,0,0,0,,通常来说，思路就是...有一个系统在工作
Dialogue: 0,0:03:23.44,0:03:26.90,English,,0,0,0,,The client is making some requests to the server
Dialogue: 0,0:03:23.44,0:03:26.90,Chinese,,0,0,0,,当客户端向服务器发送一些请求时
Dialogue: 0,0:03:27.70,0:03:30.96,English,,0,0,0,,The server does something locally to deal with it
Dialogue: 0,0:03:27.70,0:03:30.96,Chinese,,0,0,0,,服务器就在本地做一些事情来处理这些请求
Dialogue: 0,0:03:31.04,0:03:37.28,English,,0,0,0,,It receive it gets information that retrieves from its database the things you might want to buy
Dialogue: 0,0:03:31.04,0:03:37.28,Chinese,,0,0,0,,它从数据库中检索你可能想买的东西的信息
Dialogue: 0,0:03:38.34,0:03:44.38,English,,0,0,0,,And then it sends back information say a nicely formatted a web page with all kinds of shopping suggestions
Dialogue: 0,0:03:38.34,0:03:44.38,Chinese,,0,0,0,,然后它返回信息，比如一个格式化好的网页，上面有各种各样的购物建议
Dialogue: 0,0:03:45.28,0:03:47.34,English,,0,0,0,,And then the client decides what to do next
Dialogue: 0,0:03:45.28,0:03:47.34,Chinese,,0,0,0,,然后客户端决定下一步要做什么
Dialogue: 0,0:03:49.22,0:03:51.66,English,,0,0,0,,So from a hardware perspective the
Dialogue: 0,0:03:49.22,0:03:51.66,English,,0,0,0,,从硬件的角度来看
Dialogue: 0,0:03:52.28,0:03:56.75,English,,0,0,0,,Interface to a between the network and
Dialogue: 0,0:03:52.28,0:03:56.75,Chinese,,0,0,0,,网络和你计算机之间的接口
Dialogue: 0,0:03:57.44,0:04:02.92,English,,0,0,0,,Your computer is called the NIC or network interface card even though it's not always on a card
Dialogue: 0,0:03:57.44,0:04:02.92,Chinese,,0,0,0,,叫做 NIC 或是网络接口卡,即使它不总是一张卡
Dialogue: 0,0:04:03.66,0:04:08.90,English,,0,0,0,,And we really won't talk about hardware at all
Dialogue: 0,0:04:03.66,0:04:08.90,Chinese,,0,0,0,,当然，我们不会讨论硬件
Dialogue: 0,0:04:08.90,0:04:13.16,English,,0,0,0,,But what's most interesting from it is that
Dialogue: 0,0:04:08.90,0:04:13.16,Chinese,,0,0,0,,但最有趣的是
Dialogue: 0,0:04:14.44,0:04:18.36,English,,0,0,0,,It looks to your computer like an I/O device
Dialogue: 0,0:04:14.44,0:04:18.36,Chinese,,0,0,0,,它对你的计算机来说就像一个 I/O 设备
Dialogue: 0,0:04:19.00,0:04:23.92,English,,0,0,0,,And in fact the UNIX uh api for dealing with networks
Dialogue: 0,0:04:19.00,0:04:23.92,Chinese,,0,0,0,,实际上, UNIX 用于网络处理的 api
Dialogue: 0,0:04:24.38,0:04:25.68,English,,0,0,0,,Makes it look like a file
Dialogue: 0,0:04:24.38,0:04:25.68,Chinese,,0,0,0,,使它看起来像一个文件
Dialogue: 0,0:04:26.38,0:04:30.66,English,,0,0,0,,So in particular just as a disk sits off of a bus
Dialogue: 0,0:04:26.38,0:04:30.66,English,,0,0,0,,打个比方,总线上有一张磁盘
Dialogue: 0,0:04:31.42,0:04:34.46,English,,0,0,0,,And you write data to a disk
Dialogue: 0,0:04:31.42,0:04:34.46,Chinese,,0,0,0,,你向磁盘写入数据
Dialogue: 0,0:04:35.08,0:04:36.60,English,,0,0,0,,Or you read it from a disk
Dialogue: 0,0:04:35.08,0:04:36.60,Chinese,,0,0,0,,或者从磁盘中读取数据
Dialogue: 0,0:04:37.12,0:04:40.74,English,,0,0,0,,Similarly the network sits of a similar bus
Dialogue: 0,0:04:37.12,0:04:40.74,Chinese,,0,0,0,,同样，网络位于一条类似的总线上
Dialogue: 0,0:04:41.18,0:04:44.44,English,,0,0,0,,And when you want to send a message you actually do it by writing
Dialogue: 0,0:04:41.18,0:04:44.44,Chinese,,0,0,0,,当你想要发送信息时，你实际上是通过
Dialogue: 0,0:04:44.92,0:04:47.92,English,,0,0,0,,To a sort of virtual file that's called the network
Dialogue: 0,0:04:44.92,0:04:47.92,Chinese,,0,0,0,,向一个叫做网络的虚拟文件写入数据来实现的
Dialogue: 0,0:04:48.72,0:04:52.14,English,,0,0,0,,And if you want...when you're receiving data you do it by reading
Dialogue: 0,0:04:48.72,0:04:52.14,Chinese,,0,0,0,,而当你想接收数据时，你通过读取文件来实现
Dialogue: 0,0:04:52.28,0:04:56.48,English,,0,0,0,,So just as several weeks ago I gave the lecture on I/O
Dialogue: 0,0:04:52.28,0:04:56.48,Chinese,,0,0,0,,就像几周前我讲 I/O 时说的
Dialogue: 0,0:04:57.18,0:05:00.56,English,,0,0,0,,It turns out that it's extremely relevant to network programming
Dialogue: 0,0:04:57.18,0:05:00.56,Chinese,,0,0,0,,它与网络编程非常相关
Dialogue: 0,0:05:00.56,0:05:08.48,English,,0,0,0,,That's the basic model that was created by the early developers of the sort of standard UNIX
Dialogue: 0,0:05:00.56,0:05:08.48,Chinese,,0,0,0,,这就是早期标准 UNIX 开发人员创建的基本模型
Dialogue: 0,0:05:08.98,0:05:14.02,English,,0,0,0,,And now that's carried over not just to UNIX but it's the same model for windows and other operating systems
Dialogue: 0,0:05:08.98,0:05:14.02,Chinese,,0,0,0,,当然，现在这个模型不仅适用于 UNIX 也适用于 windows 和其他操作系统
Dialogue: 0,0:05:15.50,0:05:16.74,English,,0,0,0,,So
Dialogue: 0,0:05:15.50,0:05:16.74,Chinese,,0,0,0,,那么
Dialogue: 0,0:05:19.90,0:05:24.24,English,,0,0,0,,And now let's just talk a little about what computer networking means
Dialogue: 0,0:05:19.90,0:05:24.24,Chinese,,0,0,0,,我们现在先讲一点计算机网络的概念
Dialogue: 0,0:05:24.70,0:05:31.16,English,,0,0,0,,The idea of a network is a collection of systems that are referred to as hosts
Dialogue: 0,0:05:24.70,0:05:31.16,Chinese,,0,0,0,,网络是一些被称为主机的系统的集合
Dialogue: 0,0:05:32.08,0:05:40.18,English,,0,0,0,,That are able to communicate with each other over some kind of communication fabric let's call
Dialogue: 0,0:05:32.08,0:05:40.18,Chinese,,0,0,0,,网络上的主机能够通过某种通信结构相互通交流
Dialogue: 0,0:05:40.68,0:05:41.94,English,,0,0,0,,It communications system
Dialogue: 0,0:05:40.68,0:05:41.94,Chinese,,0,0,0,,我们就把它叫做通信系统吧
Dialogue: 0,0:05:42.36,0:05:44.60,English,,0,0,0,,And they're sort of partitioned into
Dialogue: 0,0:05:42.36,0:05:44.60,Chinese,,0,0,0,,大多数网络被划分为
Dialogue: 0,0:05:45.36,0:05:48.56,English,,0,0,0,,Mostly referred to as lands or local area networks
Dialogue: 0,0:05:45.36,0:05:48.56,Chinese,,0,0,0,,局域网
Dialogue: 0,0:05:48.74,0:05:51.90,English,,0,0,0,,That you establish within a small region
Dialogue: 0,0:05:48.74,0:05:51.90,Chinese,,0,0,0,,它们主要是建在小区域内的
Dialogue: 0,0:05:52.42,0:05:58.68,English,,0,0,0,,And then a wide area network which would be over something the size of a city or perhaps more
Dialogue: 0,0:05:52.42,0:05:58.68,Chinese,,0,0,0,,接着是广域网络，它可以覆盖一个城市或者更大的区域
Dialogue: 0,0:06:00.10,0:06:06.12,English,,0,0,0,,And over a enterprise such as CMU it's a very complex set of
Dialogue: 0,0:06:00.10,0:06:06.12,Chinese,,0,0,0,,在 CMU 校园里，有一个很复杂的网络结构
Dialogue: 0,0:06:06.16,0:06:12.62,English,,0,0,0,,For example there's wireless base stations that right in this room
Dialogue: 0,0:06:06.16,0:06:12.62,Chinese,,0,0,0,,例如，这个房间里就有无线基站
Dialogue: 0,0:06:12.96,0:06:16.94,English,,0,0,0,,That you're interacting with when you're using a wireless system or your your phone
Dialogue: 0,0:06:12.96,0:06:16.94,Chinese,,0,0,0,,当你使用无线系统或手机时，你就会与之交互
Dialogue: 0,0:06:17.49,0:06:21.56,English,,0,0,0,,And then there's a whole networking infrastructure within the university
Dialogue: 0,0:06:17.49,0:06:21.56,Chinese,,0,0,0,,总的来说就是大学里有一套完整的网络基础设施
Dialogue: 0,0:06:21.92,0:06:24.42,English,,0,0,0,,Then goes to some commercial providers
Dialogue: 0,0:06:21.92,0:06:24.42,Chinese,,0,0,0,,然后是运营商
Dialogue: 0,0:06:25.06,0:06:31.32,English,,0,0,0,,At&t in particular that give it access to the commercial internet
Dialogue: 0,0:06:25.06,0:06:31.32,English,,0,0,0,,比如 At&t，它可以让你接入商业互联网
Dialogue: 0,0:06:31.66,0:06:36.40,English,,0,0,0,,And then there's another set of network connections hosted by the supercomputing center
Dialogue: 0,0:06:31.66,0:06:36.40,English,,0,0,0,,此外还有一些网络连接由超级计算中心托管
Dialogue: 0,0:06:36.70,0:06:43.28,English,,0,0,0,,That give you access to what's called internet2 which is the resource that's used for communicating among universities
Dialogue: 0,0:06:36.70,0:06:43.28,Chinese,,0,0,0,,它们可以让你访问 internet2，这是用于大学之间交流的网络
Dialogue: 0,0:06:43.98,0:06:48.61,English,,0,0,0,,So underneath you know when you're doing your networking stuff
Dialogue: 0,0:06:43.98,0:06:48.61,Chinese,,0,0,0,,所以你至少要知道当你在网络上做一些事情时
Dialogue: 0,0:06:48.61,0:06:52.06,English,,0,0,0,,There's this amazingly complex combination of things going on
Dialogue: 0,0:06:48.61,0:06:52.06,Chinese,,0,0,0,,有许多非常复杂的东西在运行
Dialogue: 0,0:06:53.02,0:06:57.78,English,,0,0,0,,The idea of an internet is supposed is refers to the idea
Dialogue: 0,0:06:53.02,0:06:57.78,Chinese,,0,0,0,,互联网的概念就是指这个
Dialogue: 0,0:06:58.24,0:07:01.34,English,,0,0,0,,The general idea of a network of networks
Dialogue: 0,0:06:58.24,0:07:01.34,Chinese,,0,0,0,,网络的一般概念
Dialogue: 0,0:07:01.62,0:07:06.46,English,,0,0,0,,Taking for example the local area network that this base station provides
Dialogue: 0,0:07:01.62,0:07:06.46,Chinese,,0,0,0,,举个例子，这个基站提供的地区网络
Dialogue: 0,0:07:06.94,0:07:10.57,English,,0,0,0,,And connecting it up to other networks on campus and across the world
Dialogue: 0,0:07:06.94,0:07:10.57,Chinese,,0,0,0,,会与校园网和世界各地的其他网络连接起来
Dialogue: 0,0:07:11.28,0:07:14.36,English,,0,0,0,,And when we refer to the capital i internet
Dialogue: 0,0:07:11.28,0:07:14.36,Chinese,,0,0,0,,补充一下,当我们提到大写 I 的 Internet 时
Dialogue: 0,0:07:15.22,0:07:20.32,English,,0,0,0,,That refers to the one instance the most significant instance of an internet
Dialogue: 0,0:07:15.22,0:07:20.32,Chinese,,0,0,0,,指的是那个最大的因特网
Dialogue: 0,0:07:20.32,0:07:25.68,English,,0,0,0,,So low case i means the sort of general idea of creating a network of networks
Dialogue: 0,0:07:20.32,0:07:25.68,Chinese,,0,0,0,,而小写 i 的 internet 指的是互联网这一总体概念
Dialogue: 0,0:07:26.22,0:07:31.74,English,,0,0,0,,Uppercase i(I) is the specific example that we all know and use all the time
Dialogue: 0,0:07:26.22,0:07:31.74,Chinese,,0,0,0,,大写 i(I) 的英特网是我们一直都知道并使用的一个具体例子
Dialogue: 0,0:07:32.14,0:07:37.42,English,,0,0,0,,That's organized by a certain set of principles that uses a particular set of protocols and so forth
Dialogue: 0,0:07:32.14,0:07:37.42,Chinese,,0,0,0,,它是依据一定的原理和协议组织的
Dialogue: 0,0:07:37.98,0:07:41.20,English,,0,0,0,,And of course we tend to just talk the Internet
Dialogue: 0,0:07:37.98,0:07:41.20,Chinese,,0,0,0,,当然，我们倾向于只谈论因特网
Dialogue: 0,0:07:41.40,0:07:49.54,English,,0,0,0,,And most people know that what that really implies is the sort of existing network structure that there is
Dialogue: 0,0:07:41.40,0:07:49.54,Chinese,,0,0,0,,大多数人都知道这指的是现有的主要网络结构
Dialogue: 0,0:07:51.44,0:07:53.84,English,,0,0,0,,And that's good enough for the purpose of this course
Dialogue: 0,0:07:51.44,0:07:53.84,Chinese,,0,0,0,,这对于这门课来说已经足够了
Dialogue: 0,0:07:53.84,0:07:57.56,English,,0,0,0,,We're not going to talk much about other possible designs one might have for a network
Dialogue: 0,0:07:53.84,0:07:57.56,Chinese,,0,0,0,,我们不会讨论部分网络可能使用的另一些结构
Dialogue: 0,0:07:58.60,0:08:04.76,English,,0,0,0,,So most of the low level networking is supported by something called Ethernet
Dialogue: 0,0:07:58.60,0:08:04.76,Chinese,,0,0,0,,大部分低级网络是由以太网支持的
Dialogue: 0,0:08:05.22,0:08:08.76,English,,0,0,0,,And the term Ethernet actually has evolved tremendously over time
Dialogue: 0,0:08:05.22,0:08:08.76,Chinese,,0,0,0,,随着时间的推移，以太网这个术语已经有了很大的发展
Dialogue: 0,0:08:09.24,0:08:13.84,English,,0,0,0,,So that it's almost more like a brand name that it is in specific technology
Dialogue: 0,0:08:09.24,0:08:13.84,Chinese,,0,0,0,,所以比起一种特定的技术名称，它更像是一个标志
Dialogue: 0,0:08:14.32,0:08:18.50,English,,0,0,0,,And the version you're familiar with the wired version of it
Dialogue: 0,0:08:14.32,0:08:18.50,Chinese,,0,0,0,,你们熟悉有线版本的以太网就是
Dialogue: 0,0:08:18.50,0:08:23.98,English,,0,0,0,,You have a wire to some sort of a box
Dialogue: 0,0:08:18.50,0:08:23.98,Chinese,,0,0,0,,你有一根电线连接到某种盒子上
Dialogue: 0,0:08:24.70,0:08:28.24,English,,0,0,0,,Like that you plug the your Ethernet jacks into
Dialogue: 0,0:08:24.70,0:08:28.24,Chinese,,0,0,0,,比如你把以太网插孔插进去
Dialogue: 0,0:08:28.68,0:08:30.58,English,,0,0,0,,And historically those were called hubs
Dialogue: 0,0:08:28.68,0:08:30.58,Chinese,,0,0,0,,通常那个盒子被称为集线器
Dialogue: 0,0:08:31.08,0:08:36.88,English,,0,0,0,,And the idea of a hub, it was just a repeater that whatever came into it from one computer
Dialogue: 0,0:08:31.08,0:08:36.88,Chinese,,0,0,0,,集线器的就像一个中继器,无论什么东西从一台电脑进入它
Dialogue: 0,0:08:36.88,0:08:39.04,English,,0,0,0,,It would broadcast to all the connected machines
Dialogue: 0,0:08:36.88,0:08:39.04,Chinese,,0,0,0,,都会被广播到所有与它连接的机器上
Dialogue: 0,0:08:39.70,0:08:43.86,English,,0,0,0,,And so you only want to do this for maybe a dozen or
Dialogue: 0,0:08:39.70,0:08:43.86,Chinese,,0,0,0,,而你原本可能需要重复操作十几次
Dialogue: 0,0:08:43.88,0:08:49.80,English,,0,0,0,,So machines that it's like a party-line they're all hearing what everybody else is saying
Dialogue: 0,0:08:43.88,0:08:49.80,Chinese,,0,0,0,,而机器就像一只聚会的队伍，它们都在听其他人在说什么
Dialogue: 0,0:08:50.40,0:08:59.38,English,,0,0,0,,And in fact the original first version the Ethernet did that by everyone interacting over a single cable
Dialogue: 0,0:08:50.40,0:08:59.38,Chinese,,0,0,0,,事实上，以太网最初是通过每个人用一根电缆进行交互实现的
Dialogue: 0,0:08:59.70,0:09:02.00,English,,0,0,0,,Carrying essentially radio signals and
Dialogue: 0,0:08:59.70,0:09:02.00,Chinese,,0,0,0,,这些电缆主要携带了无线电信号
Dialogue: 0,0:09:02.44,0:09:06.10,English,,0,0,0,,And similarly when you're in this room using a wireless internet
Dialogue: 0,0:09:02.44,0:09:06.10,Chinese,,0,0,0,,同样的，当你在这个房间里使用无线网的时候
Dialogue: 0,0:09:06.98,0:09:09.60,English,,0,0,0,,A wireless internet is sort of like a hub and that
Dialogue: 0,0:09:06.98,0:09:09.60,Chinese,,0,0,0,,无线网就像一个集线器
Dialogue: 0,0:09:10.30,0:09:15.88,English,,0,0,0,,All the packets that you're sending all across the room
Dialogue: 0,0:09:10.30,0:09:15.88,Chinese,,0,0,0,,你在房间里发送的所有数据包
Dialogue: 0,0:09:15.88,0:09:21.30,English,,0,0,0,,They're all sort of making use of the same radio frequencies the same communication channel
Dialogue: 0,0:09:15.88,0:09:21.30,Chinese,,0,0,0,,它们都使用相同的无线电频率，相同的信道
Dialogue: 0,0:09:21.64,0:09:28.80,English,,0,0,0,,And there's a protocol for how they detect when two messages get set at the same time and therefore interfere with each other
Dialogue: 0,0:09:21.64,0:09:28.80,Chinese,,0,0,0,,所以会有一个协议用于检测，两条报文是否会因为同时被发出而相互干扰
Dialogue: 0,0:09:29.44,0:09:34.38,English,,0,0,0,,So that can only sort of scale up to maybe at most a hundred different
Dialogue: 0,0:09:29.44,0:09:34.38,Chinese,,0,0,0,,因此无线网可能最多只能扩展到同时让 100 台不同的
Dialogue: 0,0:09:36.68,0:09:41.02,English,,0,0,0,,Hosts communicating because they're all sharing a single communication channel
Dialogue: 0,0:09:36.68,0:09:41.02,Chinese,,0,0,0,,主机通信，因为它们共享一个信道
Dialogue: 0,0:09:41.78,0:09:46.68,English,,0,0,0,,Now in the wired world what's evolved is usually when you buy a box
Dialogue: 0,0:09:41.78,0:09:46.68,Chinese,,0,0,0,,而有线通信和它区别是，当你买一个“盒子”时
Dialogue: 0,0:09:47.48,0:09:49.32,English,,0,0,0,,Or you get one from your cable company
Dialogue: 0,0:09:47.48,0:09:49.32,Chinese,,0,0,0,,或者你可以从有线电公司得到一个
Dialogue: 0,0:09:49.94,0:09:56.48,English,,0,0,0,,With all those ports in it, it's actually called a router or sometimes a switch in that
Dialogue: 0,0:09:49.94,0:09:56.48,Chinese,,0,0,0,,它上面有一些端口,它实际上被称为路由器或是交换机
Dialogue: 0,0:09:59.16,0:10:01.68,English,,0,0,0,,It doesn't broadcast to everyone
Dialogue: 0,0:09:59.16,0:10:01.68,Chinese,,0,0,0,,它不会向所有人广播
Dialogue: 0,0:10:01.70,0:10:04.38,English,,0,0,0,,It selectively tries to guess
Dialogue: 0,0:10:01.70,0:10:04.38,Chinese,,0,0,0,,它有选择地猜测
Dialogue: 0,0:10:05.12,0:10:08.74,English,,0,0,0,,Is this particular message bound for this particular host
Dialogue: 0,0:10:05.12,0:10:08.74,Chinese,,0,0,0,,这条报文是发送到这台特定的主机的吗
Dialogue: 0,0:10:09.48,0:10:11.94,English,,0,0,0,,And only send to that one
Dialogue: 0,0:10:09.48,0:10:11.94,Chinese,,0,0,0,,然后只发送到那台特定的主机上
Dialogue: 0,0:10:12.34,0:10:14.86,English,,0,0,0,,And as you know you can take these and wire up
Dialogue: 0,0:10:12.34,0:10:14.86,Chinese,,0,0,0,,正如你们所知，你们可以把它们连接起来
Dialogue: 0,0:10:15.36,0:10:18.82,English,,0,0,0,,I think about up to 6 levels deep in an hub
Dialogue: 0,0:10:15.36,0:10:18.82,Chinese,,0,0,0,,我觉得在一个集线器中至多可以有 6 层连接
Dialogue: 0,0:10:19.48,0:10:24.66,English,,0,0,0,,And basically create a network of wired connections
Dialogue: 0,0:10:19.48,0:10:24.66,Chinese,,0,0,0,,基本上，只要建立一个有线连接的网络
Dialogue: 0,0:10:25.18,0:10:27.60,English,,0,0,0,,And they'll all get from one to the other somehow
Dialogue: 0,0:10:25.18,0:10:27.60,Chinese,,0,0,0,,它们就可以通过某种渠道从一个网络连接到另一个网络
Dialogue: 0,0:10:28.82,0:10:35.23,English,,0,0,0,,And then after that it gets more complicated you can add more sophisticated types of switch on top of it
Dialogue: 0,0:10:28.82,0:10:35.23,Chinese,,0,0,0,,之后当它变得更复杂时，你可以在顶层添加更复杂的交换机
Dialogue: 0,0:10:35.90,0:10:40.52,English,,0,0,0,,But so the general idea of even an Ethernet is actually a fairly complex thing
Dialogue: 0,0:10:35.90,0:10:40.52,Chinese,,0,0,0,,虽然以太网的概念很复杂
Dialogue: 0,0:10:41.28,0:10:44.92,English,,0,0,0,,But it's some sort of conceptual level we can just think of it as a bunch of hosts
Dialogue: 0,0:10:41.28,0:10:44.92,Chinese,,0,0,0,,但我们可以把它想象成一堆主机
Dialogue: 0,0:10:45.48,0:10:47.26,English,,0,0,0,,That can talk directly to one another
Dialogue: 0,0:10:45.48,0:10:47.26,Chinese,,0,0,0,,它们可以直接地相互对话
Dialogue: 0,0:10:49.42,0:10:56.14,English,,0,0,0,,And then an internet then refers to the idea of taking those local area networks and connecting them together
Dialogue: 0,0:10:49.42,0:10:56.14,Chinese,,0,0,0,,互联网指的是通过路由器把这些局域网连接起来
Dialogue: 0,0:10:56.74,0:11:02.46,English,,0,0,0,,Via routers and routers obey a particular protocol based on the address
Dialogue: 0,0:10:56.74,0:11:02.46,Chinese,,0,0,0,,而路由器应用的特定的协议则
Dialogue: 0,0:11:02.70,0:11:04.42,English,,0,0,0,,That you're trying to send data to
Dialogue: 0,0:11:02.70,0:11:04.42,Chinese,,0,0,0,,基于你发送的数据的目标地址
Dialogue: 0,0:11:05.34,0:11:06.18,English,,0,0,0,,And
Dialogue: 0,0:11:05.34,0:11:06.18,Chinese,,0,0,0,,然后
Dialogue: 0,0:11:08.78,0:11:16.72,English,,0,0,0,,And so what you end up with conceptually is a whole bunch of hosts spread potentially all across the world
Dialogue: 0,0:11:08.78,0:11:16.72,Chinese,,0,0,0,,因此，你最终连接的是一大堆可能分布在世界各地的主机
Dialogue: 0,0:11:17.26,0:11:20.02,English,,0,0,0,,And then some magical system of routers
Dialogue: 0,0:11:17.26,0:11:20.02,Chinese,,0,0,0,,接下来要讲的是神奇的路由器系统
Dialogue: 0,0:11:20.42,0:11:22.96,English,,0,0,0,,That will get a message from one place to the other
Dialogue: 0,0:11:20.42,0:11:22.96,Chinese,,0,0,0,,它们会把报文将从一个地方传递到另一个地方
Dialogue: 0,0:11:23.24,0:11:29.08,English,,0,0,0,,Based on a mode of addressing where there's some known address of the hosts
Dialogue: 0,0:11:23.24,0:11:29.08,Chinese,,0,0,0,,基于已知地址的寻址模式
Dialogue: 0,0:11:29.08,0:11:30.50,English,,0,0,0,,That you're trying to send to
Dialogue: 0,0:11:29.08,0:11:30.50,Chinese,,0,0,0,,最终到达你的目标主机
Dialogue: 0,0:11:30.96,0:11:36.90,English,,0,0,0,,And it will hub through multiple routers to get from one place to the other
Dialogue: 0,0:11:30.96,0:11:36.90,Chinese,,0,0,0,,它会通过多个路由器，集线器，从一个端点传输到另一个端点
Dialogue: 0,0:11:36.92,0:11:38.90,English,,0,0,0,,And that's true whether it's on campus
Dialogue: 0,0:11:36.92,0:11:38.90,Chinese,,0,0,0,,它会四处跃迁，无论是在校园里
Dialogue: 0,0:11:40.88,0:11:44.35,English,,0,0,0,,Or whether it's hopping all the way around the world
Dialogue: 0,0:11:40.88,0:11:44.35,Chinese,,0,0,0,,还是在世界各地
Dialogue: 0,0:11:45.04,0:11:50.82,English,,0,0,0,,And so again there's this huge body of information and knowledge about how that routing works
Dialogue: 0,0:11:45.04,0:11:50.82,Chinese,,0,0,0,,所以会有许多关于路由器是如何工作
Dialogue: 0,0:11:50.94,0:11:52.62,English,,0,0,0,,And how its reliable and all that
Dialogue: 0,0:11:50.94,0:11:52.62,Chinese,,0,0,0,,它为什么可靠的知识
Dialogue: 0,0:11:53.16,0:11:56.64,English,,0,0,0,,But we're going to just assume that somebody else has figured that out
Dialogue: 0,0:11:53.16,0:11:56.64,Chinese,,0,0,0,,我们假设其他人已经解决了这些问题
Dialogue: 0,0:11:57.02,0:12:01.86,English,,0,0,0,,And our job as programmers is just to be able to communicate from one host to another
Dialogue: 0,0:11:57.02,0:12:01.86,Chinese,,0,0,0,,作为程序员，我们只需要实现在主机之间进行通信
Dialogue: 0,0:12:06.42,0:12:10.42,English,,0,0,0,,And so how could you design a system where all these diverse systems
Dialogue: 0,0:12:06.42,0:12:10.42,Chinese,,0,0,0,,那么你如何设计一个系统，让所有这些不同的系统
Dialogue: 0,0:12:10.42,0:12:22.00,English,,0,0,0,,Made by computers made by different manufacturers operating under different countries with different telecommunications bodies governing bodies and so forth
Dialogue: 0,0:12:10.42,0:12:22.00,Chinese,,0,0,0,,这些在不同的计算机上运行，由不同的厂商发行，由不同国家的电信机构经营的系统
Dialogue: 0,0:12:22.00,0:12:23.80,English,,0,0,0,,How can they all work with each other
Dialogue: 0,0:12:22.00,0:12:23.80,Chinese,,0,0,0,,协同工作
Dialogue: 0,0:12:24.38,0:12:29.34,English,,0,0,0,,And the requirement is you have to have a protocol you have to have some common set of conventions
Dialogue: 0,0:12:24.38,0:12:29.34,Chinese,,0,0,0,,答案是必须有一个协议，一些共同的约定
Dialogue: 0,0:12:30.02,0:12:33.18,English,,0,0,0,,For what messages look like how they get sent
Dialogue: 0,0:12:30.02,0:12:33.18,Chinese,,0,0,0,,比如报文应该是什么格式，它们怎么被发送
Dialogue: 0,0:12:33.66,0:12:39.48,English,,0,0,0,,What happens if one of them doesn't make it how do you recover from that and so forth
Dialogue: 0,0:12:33.66,0:12:39.48,Chinese,,0,0,0,,如果其中一个报文没有成功发送你们怎样恢复它们，等等
Dialogue: 0,0:12:44.14,0:12:49.46,English,,0,0,0,,And so what does a protocol include well it has to include some way of naming things so that
Dialogue: 0,0:12:44.14,0:12:49.46,Chinese,,0,0,0,,那么协议包括什么呢? 事实上，它必须包含一些命名规则
Dialogue: 0,0:12:49.94,0:12:53.08,English,,0,0,0,,If I want to send to some host I have some way of designating
Dialogue: 0,0:12:49.94,0:12:53.08,Chinese,,0,0,0,,如果我想向某台主机发送报文，我得有一些方法
Dialogue: 0,0:12:53.52,0:12:54.80,English,,0,0,0,,Who that host is
Dialogue: 0,0:12:53.52,0:12:54.80,Chinese,,0,0,0,,去指定主机是谁
Dialogue: 0,0:12:55.32,0:13:01.82,English,,0,0,0,,And then there's the routing system has to have some reliable way of getting my data to that named host
Dialogue: 0,0:12:55.32,0:13:01.82,Chinese,,0,0,0,,然后是路由系统必须有可靠的方式将我的数据送到指定主机
Dialogue: 0,0:13:03.02,0:13:04.66,English,,0,0,0,,And that's the delivery mechanism
Dialogue: 0,0:13:03.02,0:13:04.66,Chinese,,0,0,0,,即可靠的传递机制
Dialogue: 0,0:13:05.54,0:13:11.70,English,,0,0,0,,And that's usually done and one of the things that we now accept  as universal
Dialogue: 0,0:13:05.54,0:13:11.70,Chinese,,0,0,0,,如今这个机制已经完成了，而且我们如今已经普遍接受了这一机制
Dialogue: 0,0:13:11.70,0:13:17.46,English,,0,0,0,,But it really wasn't when it first came out was idea of you take all your data and you divide it into packets
Dialogue: 0,0:13:11.70,0:13:17.46,Chinese,,0,0,0,,但当这个观点 -- 把你所有的数据分到一个个数据包中 -- 第一次出现的时候,它并未被普遍接受
Dialogue: 0,0:13:17.48,0:13:21.38,English,,0,0,0,,And packets are typically about a thousand to two thousand bytes
Dialogue: 0,0:13:17.48,0:13:21.38,Chinese,,0,0,0,,数据包通常是 1000 到 2000 字节
Dialogue: 0,0:13:22.36,0:13:27.72,English,,0,0,0,,And so if you have a longer message it chops it up into individual packets and sends it across
Dialogue: 0,0:13:22.36,0:13:27.72,Chinese,,0,0,0,,所以如果你有一条较长的报文，它会被切分成许多单独的数据包，然后发送出去
Dialogue: 0,0:13:28.24,0:13:30.52,English,,0,0,0,,And all the communication occurs at the packet level
Dialogue: 0,0:13:28.24,0:13:30.52,Chinese,,0,0,0,,而且所有的通信都发生在数据包这一层
Dialogue: 0,0:13:31.16,0:13:33.76,English,,0,0,0,,That's different than the historic phone system
Dialogue: 0,0:13:31.16,0:13:33.76,Chinese,,0,0,0,,这与历史上的电话系统不同
Dialogue: 0,0:13:35.22,0:13:37.36,English,,0,0,0,,With a connection based system meaning that
Dialogue: 0,0:13:35.22,0:13:37.36,Chinese,,0,0,0,,电话系统是一个以线路为基础的系统,这意味着
Dialogue: 0,0:13:37.76,0:13:45.30,English,,0,0,0,,If I was calling somebody there is a dedicated wire set of wires maintained by the phone company
Dialogue: 0,0:13:37.76,0:13:45.30,Chinese,,0,0,0,,如果我打电话给某人,会有一组由电话公司维护的专用线路
Dialogue: 0,0:13:45.78,0:13:49.16,English,,0,0,0,,That would be reserved and locked down for our own use
Dialogue: 0,0:13:45.78,0:13:49.16,Chinese,,0,0,0,,被保留和锁定，仅供我们使用
Dialogue: 0,0:13:49.56,0:13:51.38,English,,0,0,0,,During the entire duration of that phone call
Dialogue: 0,0:13:49.56,0:13:51.38,Chinese,,0,0,0,,在整个通话过程中都是如此
Dialogue: 0,0:13:56.62,0:13:57.56,English,,0,0,0,,So
Dialogue: 0,0:13:56.62,0:13:57.56,Chinese,,0,0,0,,那么
Dialogue: 0,0:13:58.94,0:14:03.42,English,,0,0,0,,To get them from one host say A to B
Dialogue: 0,0:13:58.94,0:14:03.42,Chinese,,0,0,0,,把报文从一个主机 A 发往另一个主机 B
Dialogue: 0,0:14:03.80,0:14:05.86,English,,0,0,0,,What happens is we want to send a packet
Dialogue: 0,0:14:03.80,0:14:05.86,Chinese,,0,0,0,,实际上发生的事是我们想传递一个数据包
Dialogue: 0,0:14:06.66,0:14:09.30,English,,0,0,0,,And that packet will contain some amount of data
Dialogue: 0,0:14:06.66,0:14:09.30,Chinese,,0,0,0,,数据包中有一部分数据
Dialogue: 0,0:14:10.32,0:14:15.04,English,,0,0,0,,And the idea of a packet communication then is you put little headers on
Dialogue: 0,0:14:10.32,0:14:15.04,Chinese,,0,0,0,,数据包通信就是在数据包上附上一个包头
Dialogue: 0,0:14:15.34,0:14:20.80,English,,0,0,0,,That contain certain routing information see on the front of an envelope of a letter perhaps
Dialogue: 0,0:14:15.34,0:14:20.80,Chinese,,0,0,0,,包头含有确切的路由信息，就好像信封之于信件
Dialogue: 0,0:14:21.72,0:14:24.42,English,,0,0,0,,And so and at different points in the way
Dialogue: 0,0:14:21.72,0:14:24.42,Chinese,,0,0,0,,数据包在发送过程的不同阶段
Dialogue: 0,0:14:24.42,0:14:30.82,English,,0,0,0,,They'll have different numbers of headers and different protocols or formats for what those headers look like
Dialogue: 0,0:14:24.42,0:14:30.82,Chinese,,0,0,0,,会有不同数量的包头，而且它们所使用的协议不是完全相同的
Dialogue: 0,0:14:31.58,0:14:33.74,English,,0,0,0,,So in particular within
Dialogue: 0,0:14:31.58,0:14:33.74,Chinese,,0,0,0,,所以当
Dialogue: 0,0:14:34.92,0:14:37.10,English,,0,0,0,,I want to send a message and I'll
Dialogue: 0,0:14:34.92,0:14:37.10,Chinese,,0,0,0,,我想要发送一条报文的时候
Dialogue: 0,0:14:37.76,0:14:42.32,English,,0,0,0,,I'll do that and then the software that runs on my machine that handles this
Dialogue: 0,0:14:37.76,0:14:42.32,Chinese,,0,0,0,,电脑上的软件会帮我完成上述的步骤
Dialogue: 0,0:14:42.76,0:14:50.06,English,,0,0,0,,Will put a header in front of that describes the internet routing
Dialogue: 0,0:14:42.76,0:14:50.06,Chinese,,0,0,0,,它会帮我放上一个描述网络路由的包头
Dialogue: 0,0:14:50.44,0:14:55.62,English,,0,0,0,,And then it will tack a header in front of that talks about the local area network routing that gets used
Dialogue: 0,0:14:50.44,0:14:55.62,Chinese,,0,0,0,,以及一个描述主机路由的包头
Dialogue: 0,0:14:56.42,0:15:02.06,English,,0,0,0,,And that's what's referred to as the a PH the packet header for the internet protocol
Dialogue: 0,0:14:56.42,0:15:02.06,Chinese,,0,0,0,,这就是我们所说的基于互联网协议的包头 PH
Dialogue: 0,0:15:02.74,0:15:08.30,English,,0,0,0,,And FH1 the frame header for this particular message being sent within this local network
Dialogue: 0,0:15:02.74,0:15:08.30,Chinese,,0,0,0,,而 FH1 则是指在本地网络中发送的特定消息的帧头
Dialogue: 0,0:15:10.90,0:15:15.24,English,,0,0,0,,And then the network interface card or the adapter here
Dialogue: 0,0:15:10.90,0:15:15.24,Chinese,,0,0,0,,接下来，网卡或适配器负责
Dialogue: 0,0:15:16.10,0:15:23.48,English,,0,0,0,,Is then responsible for putting that out over this local communication of capability
Dialogue: 0,0:15:16.10,0:15:23.48,Chinese,,0,0,0,,在报文可以在本地通信后，把它发送出去
Dialogue: 0,0:15:23.78,0:15:31.44,English,,0,0,0,,And then that gets received at the other end by the network adapter at the receivers direction
Dialogue: 0,0:15:23.78,0:15:31.44,Chinese,,0,0,0,,最后报文会被接收端的网络适配器接受
Dialogue: 0,0:15:32.14,0:15:40.00,English,,0,0,0,,It will put up its own frame header on it to pass it in
Dialogue: 0,0:15:32.14,0:15:40.00,Chinese,,0,0,0,,适配器会在它上面放上自己的帧头以接收它
Dialogue: 0,0:15:40.94,0:15:42.94,English,,0,0,0,,And that then gets stripped off
Dialogue: 0,0:15:40.94,0:15:42.94,Chinese,,0,0,0,,之后它们(帧头)会被剥离
Dialogue: 0,0:15:43.80,0:15:48.58,English,,0,0,0,,So that all hosts be set sees is the the data that gets sent
Dialogue: 0,0:15:43.80,0:15:48.58,Chinese,,0,0,0,,所以最后所有的主机都只会看到数据部分
Dialogue: 0,0:15:49.18,0:15:55.44,English,,0,0,0,,But this idea of putting headers in front and at times sort of what they call encapsulation that
Dialogue: 0,0:15:49.18,0:15:55.44,Chinese,,0,0,0,,这种在数据包前添上“头”的做法叫封装
Dialogue: 0,0:15:55.93,0:16:02.50,English,,0,0,0,,I'll take this big packet and I'll just tack some more information on top to the front of it header information
Dialogue: 0,0:15:55.93,0:16:02.50,Chinese,,0,0,0,,我拿到这个数据包之后就在它的最上层添上头信息
Dialogue: 0,0:16:02.94,0:16:06.24,English,,0,0,0,,And I'll send through the rest of it just as a set of bytes
Dialogue: 0,0:16:02.94,0:16:06.24,Chinese,,0,0,0,,然后我将把剩下的部分作为一组字节发送
Dialogue: 0,0:16:14.24,0:16:18.92,English,,0,0,0,,So the internet that we know and love the capital I internet
Dialogue: 0,0:16:14.24,0:16:18.92,Chinese,,0,0,0,,我们了解和喜爱的网络是大写 I 的因特网
Dialogue: 0,0:16:18.94,0:16:23.10,English,,0,0,0,,Then has a particular set of protocols that are you've probably heard the terms
Dialogue: 0,0:16:18.94,0:16:23.10,Chinese,,0,0,0,,他有一些特殊的协议，你们可能已经听过这些术语了
Dialogue: 0,0:16:23.94,0:16:26.54,English,,0,0,0,,One is called the IP the internet protocol
Dialogue: 0,0:16:23.94,0:16:26.54,Chinese,,0,0,0,,其中有一个协议叫互联网地址协议即 IP
Dialogue: 0,0:16:26.92,0:16:33.16,English,,0,0,0,,Which is the one that defines ideas about how do you get how do you name hosts on the internet
Dialogue: 0,0:16:26.92,0:16:33.16,Chinese,,0,0,0,,它定义了你们命名主机的方法
Dialogue: 0,0:16:33.94,0:16:36.02,English,,0,0,0,,And how do you send packets
Dialogue: 0,0:16:33.94,0:16:36.02,Chinese,,0,0,0,,和发送包的方法
Dialogue: 0,0:16:36.64,0:16:40.76,English,,0,0,0,,And they're referred to sometimes is datagrams
Dialogue: 0,0:16:36.64,0:16:40.76,Chinese,,0,0,0,,有时也把包叫做数据包
Dialogue: 0,0:16:41.04,0:16:46.86,English,,0,0,0,,Meaning that a packet is just a single entity that gets sent from point A to point B
Dialogue: 0,0:16:41.04,0:16:46.86,Chinese,,0,0,0,,这意味着数据包只是一个从点 A 发往点 B 的实体
Dialogue: 0,0:16:48.80,0:16:53.36,English,,0,0,0,,And the underlying IP doesn't guarantee delivery so
Dialogue: 0,0:16:48.80,0:16:53.36,Chinese,,0,0,0,,而处于底层的 IP 并不能保证包被成功传递
Dialogue: 0,0:16:54.14,0:16:57.28,English,,0,0,0,,So it's based on what they call best
Dialogue: 0,0:16:54.14,0:16:57.28,Chinese,,0,0,0,,它基于一种“尽力而为”的传输机制
Dialogue: 0,0:16:58.04,0:17:01.60,English,,0,0,0,,Effort communication meaning that at each step along the way
Dialogue: 0,0:16:58.04,0:17:01.60,Chinese,,0,0,0,,意为在传输过程中的每个节点
Dialogue: 0,0:17:02.34,0:17:06.94,English,,0,0,0,,If for example things are good then it will just send this packet along
Dialogue: 0,0:17:02.34,0:17:06.94,Chinese,,0,0,0,,假如数据还是完好的话，那么传输将继续
Dialogue: 0,0:17:06.94,0:17:08.82,English,,0,0,0,,If there's too much congestion
Dialogue: 0,0:17:06.94,0:17:08.82,Chinese,,0,0,0,,如果线路太堵塞
Dialogue: 0,0:17:09.34,0:17:13.46,English,,0,0,0,,There's been a you know somebody's turned on their microwave oven and
Dialogue: 0,0:17:09.34,0:17:13.46,Chinese,,0,0,0,,比如有人启动了微波炉
Dialogue: 0,0:17:14.06,0:17:16.66,English,,0,0,0,,It's set up some radio frequency interface interference
Dialogue: 0,0:17:14.06,0:17:16.66,Chinese,,0,0,0,,这时会产生一些射频接口干扰
Dialogue: 0,0:17:17.24,0:17:22.06,English,,0,0,0,,Then at the IP level it just drops that packet and says whoops
Dialogue: 0,0:17:17.24,0:17:22.06,Chinese,,0,0,0,,那么在 IP 层数据包就会丢失，然后它会说，啊，我搞砸了
Dialogue: 0,0:17:22.88,0:17:26.48,English,,0,0,0,,I screwed up sorry it doesn't even say sorry it just does it silently
Dialogue: 0,0:17:22.88,0:17:26.48,Chinese,,0,0,0,,它甚至不会道歉，只是默默的让数据包丢失
Dialogue: 0,0:17:28.60,0:17:32.38,English,,0,0,0,,And then you can as a programmer make use of that very global level
Dialogue: 0,0:17:28.60,0:17:32.38,Chinese,,0,0,0,,所以作为一个程序员，你应该学会利用所有网络层次
Dialogue: 0,0:17:32.42,0:17:36.76,English,,0,0,0,,So normally as a programmer you don't really want to program at that level
Dialogue: 0,0:17:32.42,0:17:36.76,Chinese,,0,0,0,,但你通常不会想在那一个层面编程的
Dialogue: 0,0:17:36.90,0:17:39.56,English,,0,0,0,,Because you'll send packets and they will get there
Dialogue: 0,0:17:36.90,0:17:39.56,Chinese,,0,0,0,,因为大部分情况下数据包都能正常传输
Dialogue: 0,0:17:40.14,0:17:44.78,English,,0,0,0,,But you can if you want to and it's called UDP a protocol
Dialogue: 0,0:17:40.14,0:17:44.78,Chinese,,0,0,0,,但如果你想了解的话，它叫做 UDP 协议
Dialogue: 0,0:17:44.86,0:17:47.76,English,,0,0,0,,It's just a small software layer over IP
Dialogue: 0,0:17:44.86,0:17:47.76,Chinese,,0,0,0,,它只是在比 IP 所在层高的一层上的一个小软件
Dialogue: 0,0:17:47.76,0:17:49.16,English,,0,0,0,,And there's some applications
Dialogue: 0,0:17:47.76,0:17:49.16,Chinese,,0,0,0,,而在一些应用中
Dialogue: 0,0:17:49.70,0:17:58.48,English,,0,0,0,,That you'll see for example in the computer game world where you want to send information really fast and if some information gets dropped it's not a big deal
Dialogue: 0,0:17:49.70,0:17:58.48,Chinese,,0,0,0,,举个例子，电脑游戏中，如果因为你想尽快发出消息，而导致有一些信息被你漏掉，那没什么大不了的
Dialogue: 0,0:17:58.78,0:18:00.56,English,,0,0,0,,That people actually program at that level
Dialogue: 0,0:17:58.78,0:18:00.56,Chinese,,0,0,0,,这就是 UDP 层编程的一个例子
Dialogue: 0,0:18:01.12,0:18:02.54,English,,0,0,0,,We won't really talk about that
Dialogue: 0,0:18:01.12,0:18:02.54,Chinese,,0,0,0,,我们不会讨论它
Dialogue: 0,0:18:02.54,0:18:11.78,English,,0,0,0,,The more common protocol that gets used and carries 99% of internet traffic is what's called TCP(transmission control protocol)
Dialogue: 0,0:18:02.54,0:18:11.78,Chinese,,0,0,0,,更常见的一种协议 -- 有超过 99 % 的网络流量都在通过它传输 -- 叫做 TCP 协议
Dialogue: 0,0:18:12.34,0:18:17.68,English,,0,0,0,,And that provides a reliable the equivalent of telephone connection
Dialogue: 0,0:18:12.34,0:18:17.68,Chinese,,0,0,0,,它提供了一种和电话所用的连接方式一样可靠的连接方式
Dialogue: 0,0:18:18.12,0:18:22.94,English,,0,0,0,,That I can reliably send data from point A to point B
Dialogue: 0,0:18:18.12,0:18:22.94,Chinese,,0,0,0,,我可以放心的从点 A 往点 B 发送数据
Dialogue: 0,0:18:24.18,0:18:25.46,English,,0,0,0,,As many bytes as I like
Dialogue: 0,0:18:24.18,0:18:25.46,Chinese,,0,0,0,,任意字节的数据都可以
Dialogue: 0,0:18:26.40,0:18:28.24,English,,0,0,0,,It's a guaranteed delivery
Dialogue: 0,0:18:26.40,0:18:28.24,Chinese,,0,0,0,,它的传输能力是有保证的
Dialogue: 0,0:18:28.92,0:18:32.36,English,,0,0,0,,It's sometimes fast and sometimes not but it's there
Dialogue: 0,0:18:28.92,0:18:32.36,Chinese,,0,0,0,,虽然传输速度时快时慢，但它总是稳定的
Dialogue: 0,0:18:32.86,0:18:36.96,English,,0,0,0,,And it's built on top of the IP of this datagram
Dialogue: 0,0:18:32.86,0:18:36.96,Chinese,,0,0,0,,它处于数据包的 IP 层之上
Dialogue: 0,0:18:37.18,0:18:41.50,English,,0,0,0,,Meaning that it has to take whatever you're sending and slice it up into these single packets
Dialogue: 0,0:18:37.18,0:18:41.50,Chinese,,0,0,0,,这意味着它必须接收你发送的所有数据并将其分割成这些单独的数据包
Dialogue: 0,0:18:42.24,0:18:46.30,English,,0,0,0,,If one of them doesn't get sent it will resend it until it gets there
Dialogue: 0,0:18:42.24,0:18:46.30,Chinese,,0,0,0,,如果有一个数据包没有被送达，它就会重复发送直到它被送达
Dialogue: 0,0:18:46.84,0:18:54.02,English,,0,0,0,,They have to deal with the fact that packets can travel different paths and one can get ahead of the other in transmission
Dialogue: 0,0:18:46.84,0:18:54.02,Chinese,,0,0,0,,它们还需要处理一个问题：数据包可以通过不同的路径传输，所以有些原本位于后面的数据包可能率先完成传送
Dialogue: 0,0:18:54.04,0:18:56.40,English,,0,0,0,,And so it has to reorder them in the correct sequence
Dialogue: 0,0:18:54.04,0:18:56.40,Chinese,,0,0,0,,所以我们需要将它们按正确的顺序重新排列
Dialogue: 0,0:18:56.98,0:18:59.24,English,,0,0,0,,And so there's a lot of stuff under it but
Dialogue: 0,0:18:56.98,0:18:59.24,Chinese,,0,0,0,,这一步涉及到很多知识
Dialogue: 0,0:18:59.82,0:19:01.64,English,,0,0,0,,We'll just assume that it kind of works
Dialogue: 0,0:18:59.82,0:19:01.64,Chinese,,0,0,0,,但我们只要假设它起作用就行了
Dialogue: 0,0:19:02.40,0:19:06.34,English,,0,0,0,,And so you can just rely think about it is I have a stream connection
Dialogue: 0,0:19:02.40,0:19:06.34,Chinese,,0,0,0,,你们可以想象一下，我有一个串流连接
Dialogue: 0,0:19:06.78,0:19:11.56,English,,0,0,0,,I can send from A to B and B can send a stream of data back to me
Dialogue: 0,0:19:06.78,0:19:11.56,Chinese,,0,0,0,,我可以从 A 往 B 发送数据流然后 B 也可以反过来给我发送数据流
Dialogue: 0,0:19:12.06,0:19:13.66,English,,0,0,0,,And we're all happy
Dialogue: 0,0:19:12.06,0:19:13.66,Chinese,,0,0,0,,我们都会很高兴
Dialogue: 0,0:19:15.20,0:19:18.04,English,,0,0,0,,And so that's the version that looks like file I/O
Dialogue: 0,0:19:15.20,0:19:18.04,Chinese,,0,0,0,,这就是把它想象成文件 I/O 的版本
Dialogue: 0,0:19:18.04,0:19:23.58,English,,0,0,0,,I just keep writing to a file and it's sending packets over the network to the other end
Dialogue: 0,0:19:18.04,0:19:23.58,Chinese,,0,0,0,,我持续向文件写入数据，它则不断地通过网络向另一端发送数据包
Dialogue: 0,0:19:24.24,0:19:28.18,English,,0,0,0,,And then the other side can be sending stuff to me
Dialogue: 0,0:19:24.24,0:19:28.18,Chinese,,0,0,0,,当然另一端也可以向我发送数据
Dialogue: 0,0:19:28.54,0:19:31.66,English,,0,0,0,,And I'm just reading it and I'm just reading bytes of data
Dialogue: 0,0:19:28.54,0:19:31.66,Chinese,,0,0,0,,但我只是读取数据
Dialogue: 0,0:19:32.00,0:19:35.12,English,,0,0,0,,Not worrying about how that got broken up into individual packets
Dialogue: 0,0:19:32.00,0:19:35.12,Chinese,,0,0,0,,我并不关心它是怎么被分解成独立的数据包的
Dialogue: 0,0:19:36.48,0:19:39.18,English,,0,0,0,,And so that's referred to as the sockets interface
Dialogue: 0,0:19:36.48,0:19:39.18,Chinese,,0,0,0,,当然，这是通过 socket 接口实现的
Dialogue: 0,0:19:39.78,0:19:43.32,English,,0,0,0,,And you'll hear the term socket programming and that's exactly what we're talking about
Dialogue: 0,0:19:39.78,0:19:43.32,Chinese,,0,0,0,,你会听到 socket 编程这个术语，这就是我们要讲的内容
Dialogue: 0,0:19:48.58,0:19:56.00,English,,0,0,0,,And so from a sort of software system
Dialogue: 0,0:19:48.58,0:19:56.00,Chinese,,0,0,0,,从软件系统
Dialogue: 0,0:19:56.08,0:19:58.44,English,,0,0,0,,Than software hardware system then
Dialogue: 0,0:19:56.08,0:19:58.44,Chinese,,0,0,0,,和软硬件系统层面观察
Dialogue: 0,0:19:58.90,0:20:03.26,English,,0,0,0,,The client and the server are both implemented as application programs
Dialogue: 0,0:19:58.90,0:20:03.26,Chinese,,0,0,0,,客户端和服务器都是以应用程序的形式
Dialogue: 0,0:20:03.74,0:20:07.18,English,,0,0,0,,At the respective endpoints on their hosts
Dialogue: 0,0:20:03.74,0:20:07.18,Chinese,,0,0,0,,在其主机上的相应端点处被实现的
Dialogue: 0,0:20:08.18,0:20:17.82,English,,0,0,0,,And they make use of software and libraries that run at some combination of the user level and at the kernel level
Dialogue: 0,0:20:08.18,0:20:17.82,Chinese,,0,0,0,,它们使用的软件和库是由用户态和核心态共同运行的
Dialogue: 0,0:20:18.40,0:20:20.86,English,,0,0,0,,And therefore I have access to direct resources
Dialogue: 0,0:20:18.40,0:20:20.86,Chinese,,0,0,0,,因此我可以直接访问资源
Dialogue: 0,0:20:21.56,0:20:22.78,English,,0,0,0,,And so
Dialogue: 0,0:20:21.56,0:20:22.78,Chinese,,0,0,0,,而且
Dialogue: 0,0:20:24.88,0:20:31.26,English,,0,0,0,,I as a programmer or an application programmer then make use of this software api
Dialogue: 0,0:20:24.88,0:20:31.26,Chinese,,0,0,0,,我作为一个应用程序员可以利用这个 api
Dialogue: 0,0:20:31.54,0:20:33.64,English,,0,0,0,,That lets me do socket programming
Dialogue: 0,0:20:31.54,0:20:33.64,Chinese,,0,0,0,,它可以让我进行 socket 编程
Dialogue: 0,0:20:34.12,0:20:38.84,English,,0,0,0,,And it's based on gives directly supports TCP/IP
Dialogue: 0,0:20:34.12,0:20:38.84,Chinese,,0,0,0,,而且对 TCP/IP 提供直接的支持
Dialogue: 0,0:20:42.90,0:20:48.04,English,,0,0,0,,So first of all we're going to talk most of the time about what's called IPv4
Dialogue: 0,0:20:42.90,0:20:48.04,Chinese,,0,0,0,,那么首先我们先了解一下在大多数时候，什么叫 IPv4
Dialogue: 0,0:20:48.80,0:20:55.80,English,,0,0,0,,A version 4 which is the one that's been running for since the 1980s I think early 1980s
Dialogue: 0,0:20:48.80,0:20:55.80,Chinese,,0,0,0,,那是一个自 20 世纪 80 年代起实施的第四代互联网协议
Dialogue: 0,0:20:56.58,0:21:04.10,English,,0,0,0,,And it's the standard and we'll talk very only mentioned very briefly the idea of what's called IPv6
Dialogue: 0,0:20:56.58,0:21:04.10,Chinese,,0,0,0,,而且是现行标准，然后我们只会简要的提一下 IPv6 的概念
Dialogue: 0,0:21:04.76,0:21:07.16,English,,0,0,0,,Which is sort of a next-generation version
Dialogue: 0,0:21:04.76,0:21:07.16,Chinese,,0,0,0,,它则是下一代技术
Dialogue: 0,0:21:08.00,0:21:12.80,English,,0,0,0,,So the idea of a IPv4 and this is now we're talking about IP
Dialogue: 0,0:21:08.00,0:21:12.80,Chinese,,0,0,0,,IPv4 即我们现在所说的 IP 地址就是
Dialogue: 0,0:21:13.36,0:21:18.60,English,,0,0,0,,And and this is true of TCP as well is that an address is actually just 32 bits
Dialogue: 0,0:21:13.36,0:21:18.60,Chinese,,0,0,0,,一个 32 位的地址，这对 TCP 也适用
Dialogue: 0,0:21:20.92,0:21:24.28,English,,0,0,0,,But it's usually expressed in what they call dotted decimal form
Dialogue: 0,0:21:20.92,0:21:24.28,Chinese,,0,0,0,,通常这被叫做“点分十进制”格式
Dialogue: 0,0:21:24.54,0:21:26.44,English,,0,0,0,,And you've seen these addresses before
Dialogue: 0,0:21:24.54,0:21:26.44,Chinese,,0,0,0,,这类地址你之前已经见过了
Dialogue: 0,0:21:26.86,0:21:29.86,English,,0,0,0,,That it's 4 decimal numbers
Dialogue: 0,0:21:26.86,0:21:29.86,Chinese,,0,0,0,,它有 4 个十进制数
Dialogue: 0,0:21:30.50,0:21:33.52,English,,0,0,0,,And they can only range between 0 and 255
Dialogue: 0,0:21:30.50,0:21:33.52,Chinese,,0,0,0,,这四个数只能在 0 和 255 之间
Dialogue: 0,0:21:34.32,0:21:37.74,English,,0,0,0,,Because each one of them is a single bytes worth of information
Dialogue: 0,0:21:34.32,0:21:37.74,Chinese,,0,0,0,,因为他它们中的每一个数都只能由一个字节的信息描述
Dialogue: 0,0:21:37.76,0:21:40.36,English,,0,0,0,,So we're used to writing things in hex now in this course
Dialogue: 0,0:21:37.76,0:21:40.36,Chinese,,0,0,0,,在这个课程中，我们曾用 16 进制表示过这些数字
Dialogue: 0,0:21:40.86,0:21:44.96,English,,0,0,0,,But we're going to write it as each byte is written as a decimal digit
Dialogue: 0,0:21:40.86,0:21:44.96,Chinese,,0,0,0,,但以后我们将把它们书写成十进制格式
Dialogue: 0,0:21:45.78,0:21:49.50,English,,0,0,0,,And they're actually passed and stored in
Dialogue: 0,0:21:45.78,0:21:49.50,Chinese,,0,0,0,,事实上，它们以一种叫
Dialogue: 0,0:21:49.82,0:21:53.34,English,,0,0,0,,What's called network byte order which is big endian byte order
Dialogue: 0,0:21:49.82,0:21:53.34,Chinese,,0,0,0,,网络字节序的顺序被传递和储存，这种顺序是一种大端字节顺序
Dialogue: 0,0:21:54.04,0:21:58.10,English,,0,0,0,,And so we have to worry about the whole big endian vs. good endian thing
Dialogue: 0,0:21:54.04,0:21:58.10,Chinese,,0,0,0,,我们应考虑大端字节顺序
Dialogue: 0,0:21:58.54,0:22:00.02,English,,0,0,0,,When we're doing network programming
Dialogue: 0,0:21:58.54,0:22:00.02,Chinese,,0,0,0,,在网络编程中的好处
Dialogue: 0,0:22:01.26,0:22:07.14,English,,0,0,0,,And you can actually learn a lot there's a whole levels of how the different bytes mean
Dialogue: 0,0:22:01.26,0:22:07.14,Chinese,,0,0,0,,另外你会了解到 IP 地址的四段字节都代表了不同层次的信息
Dialogue: 0,0:22:07.14,0:22:13.30,English,,0,0,0,,But for example any ip address it starts with 128.2 is at CMU
Dialogue: 0,0:22:07.14,0:22:13.30,Chinese,,0,0,0,,举个例子，任何以 128.2 开头的 IP 地址都在 CMU
Dialogue: 0,0:22:15.86,0:22:18.24,English,,0,0,0,,I think and then
Dialogue: 0,0:22:15.86,0:22:18.24,Chinese,,0,0,0,,我想本质上就是
Dialogue: 0,0:22:19.14,0:22:24.34,English,,0,0,0,,And so essentially CMU owns that part of the IP address space
Dialogue: 0,0:22:19.14,0:22:24.34,Chinese,,0,0,0,,CMU 拥有这部分IP地址空间
Dialogue: 0,0:22:26.02,0:22:29.98,English,,0,0,0,,Which if you think about that's approximately 2^64
Dialogue: 0,0:22:26.02,0:22:29.98,Chinese,,0,0,0,,这个空间大概包含了 2^64 个 IP 地址
Dialogue: 0,0:22:31.02,0:22:41.52,English,,0,0,0,,2 to the...no,not 2^64,2^16 different IP addresses available for use by campus
Dialogue: 0,0:22:31.02,0:22:41.52,Chinese,,0,0,0,,不对，不是 2^64，是 2^16 个给校园用户使用的不同 IP 地址
Dialogue: 0,0:22:46.96,0:22:50.62,English,,0,0,0,,And as I mentioned there's a newer version called IPv6
Dialogue: 0,0:22:46.96,0:22:50.62,Chinese,,0,0,0,,就像我提到过的，有一个新版的互联网协议叫做 IPV6 协议
Dialogue: 0,0:22:50.86,0:22:54.84,English,,0,0,0,,That gives you a 128-bit addresses
Dialogue: 0,0:22:50.86,0:22:54.84,Chinese,,0,0,0,,它会给你一个 128 位的地址
Dialogue: 0,0:22:55.52,0:23:01.30,English,,0,0,0,,You can imagine actually that if you think about how many nodes are there in the internet
Dialogue: 0,0:22:55.52,0:23:01.30,Chinese,,0,0,0,,你们可以试着想象一下互联网上到底有多少个节点
Dialogue: 0,0:23:01.42,0:23:07.10,English,,0,0,0,,If a 4 byte address is only 2^32 so that's 4 billion
Dialogue: 0,0:23:01.42,0:23:07.10,Chinese,,0,0,0,,如果地址是 4 字节的，那么就只有 2^32 个也即 40 亿个节点
Dialogue: 0,0:23:08.50,0:23:12.96,English,,0,0,0,,And I don't know about you but I have a lot of different things that use IP
Dialogue: 0,0:23:08.50,0:23:12.96,Chinese,,0,0,0,,我不知道你们是怎么样的，但我有许多不同的东西要用到 IP 地址
Dialogue: 0,0:23:12.96,0:23:18.28,English,,0,0,0,,I have a phone,I have two laptops,I have a couple desktops
Dialogue: 0,0:23:12.96,0:23:18.28,Chinese,,0,0,0,,我有一台手机，两台笔记本电脑还有几台台式机
Dialogue: 0,0:23:19.10,0:23:25.86,English,,0,0,0,,So if all of..if every one of us used multiple IP addresses then actually the world would be out of them right
Dialogue: 0,0:23:19.10,0:23:25.86,Chinese,,0,0,0,,所以如果我们每个人都要用到多个 IP 地址那么实际上世界上所需要的 IP 地址就超额了对吧
Dialogue: 0,0:23:25.86,0:23:30.12,English,,0,0,0,,There's seven billion people in the world not all of whom have access to the internet
Dialogue: 0,0:23:25.86,0:23:30.12,Chinese,,0,0,0,,地球上有 70 亿人，虽然不是所有人都会使用网络
Dialogue: 0,0:23:30.18,0:23:31.70,English,,0,0,0,,But a large fraction of them do
Dialogue: 0,0:23:30.18,0:23:31.70,Chinese,,0,0,0,,但有很大一部分都是会使用网络的
Dialogue: 0,0:23:32.40,0:23:39.58,English,,0,0,0,,And so there's a whole kind of crazy way of dealing with the multitude of possible IP addresses
Dialogue: 0,0:23:32.40,0:23:39.58,Chinese,,0,0,0,,所以现在有一种疯狂的方式来解决大量可能需要的 IP 地址
Dialogue: 0,0:23:40.18,0:23:44.20,English,,0,0,0,,So the obvious thing would be well let's just allocate a lot more addresses
Dialogue: 0,0:23:40.18,0:23:44.20,Chinese,,0,0,0,,很明显，我们需要分配更多地址
Dialogue: 0,0:23:44.46,0:23:49.92,English,,0,0,0,,And jump let's just skip 64 bits and go right to 128 and that's the idea behind IPv6
Dialogue: 0,0:23:44.46,0:23:49.92,Chinese,,0,0,0,,从 64 位地址扩增到到 128 位地址就是 IPv6 的思想
Dialogue: 0,0:23:50.58,0:23:56.44,English,,0,0,0,,But quite honestly this has been one of those technologies that's been out there for over 15 years
Dialogue: 0,0:23:50.58,0:23:56.44,Chinese,,0,0,0,,但说实话，这是一项已经存在了 15 年的技术
Dialogue: 0,0:23:57.00,0:24:01.48,English,,0,0,0,,And still has a very low level of adoption so
Dialogue: 0,0:23:57.00,0:24:01.48,Chinese,,0,0,0,,但到今天它的采纳率仍然很低
Dialogue: 0,0:24:02.52,0:24:05.08,English,,0,0,0,,It's still a future technology
Dialogue: 0,0:24:02.52,0:24:05.08,Chinese,,0,0,0,,所以它仍是一项未来的技术
Dialogue: 0,0:24:06.40,0:24:12.36,English,,0,0,0,,People have basically figured out all these crazy schemes to make use of just stick within the 4 byte limit
Dialogue: 0,0:24:06.40,0:24:12.36,Chinese,,0,0,0,,人们基本上已经想出了所有只需要 4 个字节位置的方案
Dialogue: 0,0:24:20.04,0:24:26.80,English,,0,0,0,,Okay so let's start talking the program the sort of programmer perspective on this
Dialogue: 0,0:24:20.04,0:24:26.80,Chinese,,0,0,0,,那么，现在让我们从程序员的角度思考吧
Dialogue: 0,0:24:27.74,0:24:34.32,English,,0,0,0,,And this is one area where you'll wish you weren't programming in C
Dialogue: 0,0:24:27.74,0:24:34.32,Chinese,,0,0,0,,这是一个你希望自己不使用 C 语言来编程的领域
Dialogue: 0,0:24:34.42,0:24:35.56,English,,0,0,0,,But you are
Dialogue: 0,0:24:34.42,0:24:35.56,Chinese,,0,0,0,,但
Dialogue: 0,0:24:36.10,0:24:38.72,English,,0,0,0,,So there's a lot of really crufty stuff
Dialogue: 0,0:24:36.10,0:24:38.72,Chinese,,0,0,0,,这里有很多混乱的东西
Dialogue: 0,0:24:38.72,0:24:46.83,English,,0,0,0,,And it was all developed most of the software protocols were conceived before C even was what it is today
Dialogue: 0,0:24:38.72,0:24:46.83,Chinese,,0,0,0,,大多数软件协议在如今使用的 C 语言出现之前就被构思好了
Dialogue: 0,0:24:47.58,0:24:51.40,English,,0,0,0,,So like the Kernighan and Ritchie book you have is called the second edition
Dialogue: 0,0:24:47.58,0:24:51.40,Chinese,,0,0,0,,就像你们使用的 Kernighan 和 Ritchie 的书（《C 程序设计语言》）是第二版
Dialogue: 0,0:24:51.40,0:24:55.14,English,,0,0,0,,And it's based on what was called ANSI C or ISO C
Dialogue: 0,0:24:51.40,0:24:55.14,Chinese,,0,0,0,,它基于一个叫做 ANSI C 或是 ISO C 的协议
Dialogue: 0,0:24:55.76,0:25:00.50,English,,0,0,0,,But these all date before that they date back to the original Kernighan and Ritchie
Dialogue: 0,0:24:55.76,0:25:00.50,Chinese,,0,0,0,,它的历史可以追溯到 Kernighan 和 Ritchie 的书首次出版的年代
Dialogue: 0,0:25:00.50,0:25:04.42,English,,0,0,0,,So for example void* did not exist in that era
Dialogue: 0,0:25:00.50,0:25:04.42,Chinese,,0,0,0,,举个例子，那个时代还没有 void*
Dialogue: 0,0:25:04.80,0:25:07.48,English,,0,0,0,,And so you use char* as a generic pointer
Dialogue: 0,0:25:04.80,0:25:07.48,Chinese,,0,0,0,,你需要用 char* 定义空类型指针
Dialogue: 0,0:25:08.24,0:25:11.36,English,,0,0,0,,And so there's just a lot of stuff in this programming
Dialogue: 0,0:25:08.24,0:25:11.36,Chinese,,0,0,0,,所以你会觉得网络编程中有许多
Dialogue: 0,0:25:11.76,0:25:16.72,English,,0,0,0,,Interface where you go wow that is really crufty and that that truth is yes you're right
Dialogue: 0,0:25:11.76,0:25:16.72,Chinese,,0,0,0,,接口很混乱，实际上你是对的
Dialogue: 0,0:25:17.64,0:25:20.80,English,,0,0,0,,So in particular there's a lot of different structures that are defined and
Dialogue: 0,0:25:17.64,0:25:20.80,Chinese,,0,0,0,,实际上，它定义了很多不同的结构体
Dialogue: 0,0:25:20.80,0:25:23.98,English,,0,0,0,,One of them is called an in_addr which means internet address
Dialogue: 0,0:25:20.80,0:25:23.98,Chinese,,0,0,0,,其中有一个叫做“in_addr”的关于网络地址的结构体
Dialogue: 0,0:25:24.64,0:25:28.12,English,,0,0,0,,And it's just defined to be a 32-bit unsigned number
Dialogue: 0,0:25:24.64,0:25:28.12,Chinese,,0,0,0,,它定义了一个 32 位无符号数
Dialogue: 0,0:25:30.00,0:25:32.88,English,,0,0,0,,And in general as I mentioned there
Dialogue: 0,0:25:30.00,0:25:32.88,Chinese,,0,0,0,,就像我刚才所说的
Dialogue: 0,0:25:33.02,0:25:39.78,English,,0,0,0,,The so called network byte order whoever designed the original protocols was a fan of big endian addressing
Dialogue: 0,0:25:33.02,0:25:39.78,Chinese,,0,0,0,,最初协议中的的网络字节序的设计者一定是个喜欢用大端字节顺序进行处理的人
Dialogue: 0,0:25:39.90,0:25:46.40,English,,0,0,0,,And so that's what it is even though actually most of the machines that are out there in this world are little endian
Dialogue: 0,0:25:39.90,0:25:46.40,Chinese,,0,0,0,,而且这就是即使世界上大部分机器都是用的小端字节序，网络仍用大端字节序的原因
Dialogue: 0,0:25:46.96,0:25:50.86,English,,0,0,0,,And so there's a set of standard library functions
Dialogue: 0,0:25:46.96,0:25:50.86,Chinese,,0,0,0,,当然，你可以用许多标准库函数
Dialogue: 0,0:25:50.86,0:25:54.46,English,,0,0,0,,That you use to convert between network order and host order
Dialogue: 0,0:25:50.86,0:25:54.46,Chinese,,0,0,0,,来实现网络字节顺序和主机字节顺序间的转换
Dialogue: 0,0:25:55.00,0:26:01.64,English,,0,0,0,,And the idea of it is now if I run my software on a little endian or a big endian machine
Dialogue: 0,0:25:55.00,0:26:01.64,Chinese,,0,0,0,,不论我在大端字节序或是小端字节序的机器上运行网络软件时
Dialogue: 0,0:26:02.10,0:26:04.44,English,,0,0,0,,These functions will do the right thing
Dialogue: 0,0:26:02.10,0:26:04.44,Chinese,,0,0,0,,上述函数都会让我的机器正常运行
Dialogue: 0,0:26:04.46,0:26:07.10,English,,0,0,0,,So if I just use these standard libraries
Dialogue: 0,0:26:04.46,0:26:07.10,Chinese,,0,0,0,,所以即使我只使用这些标准库
Dialogue: 0,0:26:07.50,0:26:12.62,English,,0,0,0,,Then I don't have to worry about porting it every time I change the word ordering of a machine
Dialogue: 0,0:26:07.50,0:26:12.62,Chinese,,0,0,0,,我都不用担心每次机器的字节顺序改变时需要手动转换
Dialogue: 0,0:26:13.46,0:26:16.08,English,,0,0,0,,One of the things you'll notice here is
Dialogue: 0,0:26:13.46,0:26:16.08,Chinese,,0,0,0,,在此你可能会注意到一件事
Dialogue: 0,0:26:16.48,0:26:25.24,English,,0,0,0,,There is no function to convert 64-bit data between a network order and host order so
Dialogue: 0,0:26:16.48,0:26:25.24,Chinese,,0,0,0,,这些函数中没有用于转化 64 位数据的函数
Dialogue: 0,0:26:25.98,0:26:31.40,English,,0,0,0,,I don't know what people do when I do it I just write my own thought,my own functions to do it
Dialogue: 0,0:26:25.98,0:26:31.40,Chinese,,0,0,0,,我不知道人们都是怎么做的，但就我个人，我会自己编写一个函数来实现这一功能
Dialogue: 0,0:26:32.92,0:26:35.86,English,,0,0,0,,Or I don't because I know my other end is a little endian machine
Dialogue: 0,0:26:32.92,0:26:35.86,Chinese,,0,0,0,,我也可能不会这么做，因为我知道另一端的机器肯定是小端字节序的
Dialogue: 0,0:26:37.42,0:26:47.06,English,,0,0,0,,So anyways these are already some functions you'll start seeing for that look like network conversion software
Dialogue: 0,0:26:37.42,0:26:47.06,Chinese,,0,0,0,,不管怎样，这里列出了一些你会遇到的现存的函数，它们看起来就像网络转换软件一样
Dialogue: 0,0:26:50.70,0:26:54.99,English,,0,0,0,,And as I mentioned the addresses are written in a dotted decimal form
Dialogue: 0,0:26:50.70,0:26:54.99,Chinese,,0,0,0,,就像我提到的，这些地址是以点分十进制的格式书写的
Dialogue: 0,0:26:55.52,0:26:58.36,English,,0,0,0,,And it's also big endian
Dialogue: 0,0:26:55.52,0:26:58.36,Chinese,,0,0,0,,它也是大端结尾的
Dialogue: 0,0:26:58.38,0:27:03.64,English,,0,0,0,,So if I were to write in hex 128 is of course 0x80
Dialogue: 0,0:26:58.38,0:27:03.64,Chinese,,0,0,0,,所以假如我要用 16 进制书写，128 就是 0x80
Dialogue: 0,0:27:03.68,0:27:07.32,English,,0,0,0,,So that's the most significant byte of the IP address
Dialogue: 0,0:27:03.68,0:27:07.32,Chinese,,0,0,0,,这是 IP 地址最重要的字节
Dialogue: 0,0:27:11.14,0:27:18.38,English,,0,0,0,,And then there is a set of functions api calls you can use to convert between this dotted decimal format
Dialogue: 0,0:27:11.14,0:27:18.38,Chinese,,0,0,0,,接下来是可以帮助你进行点分十进制
Dialogue: 0,0:27:18.48,0:27:23.56,English,,0,0,0,,And the actual just a 32-bit unsigned int
Dialogue: 0,0:27:18.48,0:27:23.56,Chinese,,0,0,0,,和 32 位无符号整形相互转换的函数/api
Dialogue: 0,0:27:25.16,0:27:27.46,English,,0,0,0,,And actually it used to be there is
Dialogue: 0,0:27:25.16,0:27:27.46,Chinese,,0,0,0,,实际上
Dialogue: 0,0:27:27.90,0:27:31.66,English,,0,0,0,,You might see some older presentations where they use different names for this
Dialogue: 0,0:27:27.90,0:27:31.66,Chinese,,0,0,0,,在一些旧的演示文稿上，你可能见过一些它们的曾使用过名称
Dialogue: 0,0:27:31.80,0:27:35.48,English,,0,0,0,,But the most recent version api calls this
Dialogue: 0,0:27:31.80,0:27:35.48,Chinese,,0,0,0,,但最新的版本中，api 调用的是
Dialogue: 0,0:27:36.32,0:27:42.48,English,,0,0,0,,The presentation version the dotted decimal they referred to it as a presentation
Dialogue: 0,0:27:36.32,0:27:42.48,Chinese,,0,0,0,,这里所演示的，以点分十进制表达的 IP 地址
Dialogue: 0,0:27:45.32,0:27:50.92,English,,0,0,0,,And you can look up the and it's in the book too what the calls to these look like
Dialogue: 0,0:27:45.32,0:27:50.92,Chinese,,0,0,0,,你可以在书上找到这些内容，书上有这些调用的格式
Dialogue: 0,0:27:53.24,0:27:56.40,English,,0,0,0,,But you probably don't or very seldom
Dialogue: 0,0:27:53.24,0:27:56.40,Chinese,,0,0,0,,你可能从未或是很少
Dialogue: 0,0:27:58.02,0:27:59.96,English,,0,0,0,,When you're thinking about I want to go to Google
Dialogue: 0,0:27:58.02,0:27:59.96,Chinese,,0,0,0,,想过当你想访问 Google 的时候
Dialogue: 0,0:27:59.98,0:28:05.26,English,,0,0,0,,You don't think about what its IP address is you just go to www.google.com
Dialogue: 0,0:27:59.98,0:28:05.26,Chinese,,0,0,0,,你并不会思考它的 IP 地址是多少，而是直接访问 www.google.com
Dialogue: 0,0:28:06.08,0:28:09.58,English,,0,0,0,,And for everything you do you refer to it by this
Dialogue: 0,0:28:06.08,0:28:09.58,Chinese,,0,0,0,,当你访问其它网站时你也会这么做
Dialogue: 0,0:28:10.24,0:28:15.83,English,,0,0,0,,It would have referred called internet domain names which is a hierarchical naming system
Dialogue: 0,0:28:10.24,0:28:15.83,Chinese,,0,0,0,,www.google.com 叫做域名，是一个分级命名系统
Dialogue: 0,0:28:16.40,0:28:21.74,English,,0,0,0,,Whereas you know there's .edu is for educational institutions
Dialogue: 0,0:28:16.40,0:28:21.74,Chinese,,0,0,0,,就像你知道的 .edu 是给教育机构使用的
Dialogue: 0,0:28:22.14,0:28:23.90,English,,0,0,0,,.com is for commercial
Dialogue: 0,0:28:22.14,0:28:23.90,Chinese,,0,0,0,,.com 是用于商业的
Dialogue: 0,0:28:24.08,0:28:30.66,English,,0,0,0,,.net is general networking uh many countries have their own suffix
Dialogue: 0,0:28:24.08,0:28:30.66,Chinese,,0,0,0,,.net 就是一般的网络，其实很多国家都有自己的后缀
Dialogue: 0,0:28:30.82,0:28:35.18,English,,0,0,0,,So you know .de is for Germany and so forth
Dialogue: 0,0:28:30.82,0:28:35.18,Chinese,,0,0,0,,比如 .de 是德国的后缀，等等
Dialogue: 0,0:28:35.70,0:28:38.50,English,,0,0,0,,And so those are called the first level domain names
Dialogue: 0,0:28:35.70,0:28:38.50,Chinese,,0,0,0,,这些叫做一级域名
Dialogue: 0,0:28:38.82,0:28:41.46,English,,0,0,0,,And then there's a hierarchical naming structure under that
Dialogue: 0,0:28:38.82,0:28:41.46,Chinese,,0,0,0,,而这之下是一个分层的命名体系
Dialogue: 0,0:28:42.50,0:28:43.40,English,,0,0,0,,And
Dialogue: 0,0:28:42.50,0:28:43.40,Chinese,,0,0,0,,然后
Dialogue: 0,0:28:45.60,0:28:49.14,English,,0,0,0,,There's actually an interesting question of okay
Dialogue: 0,0:28:45.60,0:28:49.14,Chinese,,0,0,0,,实际上这里有个有趣的问题
Dialogue: 0,0:28:49.14,0:28:58.72,English,,0,0,0,,How do I then map from those hierarchical names those domain names into this dotted decimal or the 32 bit IP address
Dialogue: 0,0:28:49.14,0:28:58.72,Chinese,,0,0,0,,我如何从这些域名映射到点分十进制或是 32 位的 IP 地址
Dialogue: 0,0:29:00.24,0:29:07.94,English,,0,0,0,,And the job of that is by a very large distributed system called the DNS the domain name system
Dialogue: 0,0:29:00.24,0:29:07.94,Chinese,,0,0,0,,其实这些工作是由一个非常大的分布式系统完成的，它叫做 DNS ，即域名系统
Dialogue: 0,0:29:08.42,0:29:14.66,English,,0,0,0,,Where the only sort of centrally managed part of it is at the top level
Dialogue: 0,0:29:08.42,0:29:14.66,Chinese,,0,0,0,,它唯一的核心管理模块在最顶层
Dialogue: 0,0:29:15.26,0:29:18.08,English,,0,0,0,,So for each of these first level domain names
Dialogue: 0,0:29:15.26,0:29:18.08,Chinese,,0,0,0,,对于每一个一级域名
Dialogue: 0,0:29:18.20,0:29:28.60,English,,0,0,0,,There's a collection a very large collection of machines that keep track of all the IP addresses
Dialogue: 0,0:29:18.20,0:29:28.60,Chinese,,0,0,0,,有一个非常大的机器集群用于跟踪所有
Dialogue: 0,0:29:29.22,0:29:32.60,English,,0,0,0,,That map to one of those first level domain names
Dialogue: 0,0:29:29.22,0:29:32.60,Chinese,,0,0,0,,映射到这些一级域名的 IP 地址
Dialogue: 0,0:29:32.96,0:29:36.46,English,,0,0,0,,And then for example CMU maintains its own naming authority
Dialogue: 0,0:29:32.96,0:29:36.46,Chinese,,0,0,0,,举个例子，CMU
Dialogue: 0,0:29:36.90,0:29:41.30,English,,0,0,0,,So anything that says something .cmu.edu
Dialogue: 0,0:29:36.90,0:29:41.30,Chinese,,0,0,0,,对任何 xxx.cmu.edu 形式的域名有命名权
Dialogue: 0,0:29:41.70,0:29:45.42,English,,0,0,0,,There's local DNS servers within CMU
Dialogue: 0,0:29:41.70,0:29:45.42,Chinese,,0,0,0,,CMU中有一些本地 DNS 服务器
Dialogue: 0,0:29:45.82,0:29:50.38,English,,0,0,0,,That are picking apart ok where should you know
Dialogue: 0,0:29:45.82,0:29:50.38,Chinese,,0,0,0,,帮你分离出一些...你知道的
Dialogue: 0,0:29:51.10,0:29:57.92,English,,0,0,0,,If I say cs.cum.edu what would be the IP address for that
Dialogue: 0,0:29:51.10,0:29:57.92,Chinese,,0,0,0,,比如说我要知道 cs.cmu.edu 对应的 IP 地址
Dialogue: 0,0:30:00.22,0:30:05.72,English,,0,0,0,,Well and it's actually pretty interesting how this is managed because it's all it's totally decentralized
Dialogue: 0,0:30:00.22,0:30:05.72,Chinese,,0,0,0,,事实上，完成这一步的方法非常有趣，因为它是完全分散的
Dialogue: 0,0:30:05.72,0:30:12.48,English,,0,0,0,,There's a whole set of protocols that govern how naming is done
Dialogue: 0,0:30:05.72,0:30:12.48,Chinese,,0,0,0,,会有一整套协议用于控制如何命名域名
Dialogue: 0,0:30:15.84,0:30:19.28,English,,0,0,0,,But conceptually we can think of it as just this big database
Dialogue: 0,0:30:15.84,0:30:19.28,Chinese,,0,0,0,,但从概念上，我们可以把它想象成一个
Dialogue: 0,0:30:19.40,0:30:20.74,English,,0,0,0,,That gives me a mapping
Dialogue: 0,0:30:19.40,0:30:20.74,Chinese,,0,0,0,,给我特定映射的巨型数据库
Dialogue: 0,0:30:21.46,0:30:27.98,English,,0,0,0,,Where I can give a domain name and it will get back to me a one or more IP addresses
Dialogue: 0,0:30:21.46,0:30:27.98,Chinese,,0,0,0,,如果我给它一个域名，它会返回一个或多个 IP 地址给我
Dialogue: 0,0:30:28.44,0:30:31.92,English,,0,0,0,,I can give an IP address and it will come back with one or more domain names
Dialogue: 0,0:30:28.44,0:30:31.92,Chinese,,0,0,0,,我也可以给它一个 IP 地址，它会返回一个或多个域名
Dialogue: 0,0:30:37.68,0:30:40.92,English,,0,0,0,,Oh and so there's actually an application you can run
Dialogue: 0,0:30:37.68,0:30:40.92,Chinese,,0,0,0,,哦，实际上你可以运行一个程序
Dialogue: 0,0:30:41.58,0:30:45.38,English,,0,0,0,,On most machines called nslookup and there's another one called dig
Dialogue: 0,0:30:41.58,0:30:45.38,Chinese,,0,0,0,,它在大部分机器上叫做 nslookup ，还有一个叫 dig 的程序
Dialogue: 0,0:30:46.02,0:30:49.88,English,,0,0,0,,That you can use to find basically probe the DNS
Dialogue: 0,0:30:46.02,0:30:49.88,Chinese,,0,0,0,,你可以用它们来探测 DNS
Dialogue: 0,0:30:50.46,0:30:56.60,English,,0,0,0,,And find in either direction you can look at the given a domain name you can find its IP address
Dialogue: 0,0:30:50.46,0:30:56.60,Chinese,,0,0,0,,给一个的域名，你会得到它的 IP 地址
Dialogue: 0,0:30:57.14,0:30:59.56,English,,0,0,0,,Given an IP address you can find its domain name
Dialogue: 0,0:30:57.14,0:30:59.56,Chinese,,0,0,0,,给一个 IP 地址你就可以找到它的域名
Dialogue: 0,0:31:01.70,0:31:04.24,English,,0,0,0,,And we'll so I'll show you some code that
Dialogue: 0,0:31:01.70,0:31:04.24,Chinese,,0,0,0,,我将给你们展示一些代码
Dialogue: 0,0:31:05.62,0:31:08.54,English,,0,0,0,,Just as an example of how you do the programming
Dialogue: 0,0:31:05.62,0:31:08.54,Chinese,,0,0,0,,它是一个你们编程时可以参考的示例
Dialogue: 0,0:31:08.98,0:31:12.48,English,,0,0,0,,I'll just show that momentarily called hostname
Dialogue: 0,0:31:08.98,0:31:12.48,Chinese,,0,0,0,,我将展示那个暂时命名为 hostname 的东西
Dialogue: 0,0:31:14.12,0:31:17.04,English,,0,0,0,,So just some examples
Dialogue: 0,0:31:14.12,0:31:17.04,Chinese,,0,0,0,,接下来是一些例子
Dialogue: 0,0:31:29.72,0:31:37.68,English,,0,0,0,,You know if I look up some address like the website for the computer science school computer science
Dialogue: 0,0:31:29.72,0:31:37.68,Chinese,,0,0,0,,如果我查询一些地址，比如计算机科学学院的网址
Dialogue: 0,0:31:38.54,0:31:40.00,English,,0,0,0,,Using nslookup
Dialogue: 0,0:31:38.54,0:31:40.00,Chinese,,0,0,0,,用 nslookup
Dialogue: 0,0:31:40.70,0:31:42.72,English,,0,0,0,,It comes back can people see this okay
Dialogue: 0,0:31:40.70,0:31:42.72,Chinese,,0,0,0,,它会返回...你们能看到吗？
Dialogue: 0,0:31:44.16,0:31:45.62,English,,0,0,0,,Doing it bigger?It's okay
Dialogue: 0,0:31:44.16,0:31:45.62,Chinese,,0,0,0,,把它放大好吗？可以了
Dialogue: 0,0:31:46.28,0:31:50.70,English,,0,0,0,,So this is what nslookup looks like and this stuff here just tells you
Dialogue: 0,0:31:46.28,0:31:50.70,Chinese,,0,0,0,,所以这就是 nslookup 的样子，它刚刚告诉你
Dialogue: 0,0:31:51.46,0:31:59.50,English,,0,0,0,,You know who where was the actual directory entry in the which DNS server actually gave these information back
Dialogue: 0,0:31:51.46,0:31:59.50,Chinese,,0,0,0,,哪个 DNS 服务器返回了这些信息
Dialogue: 0,0:32:00.28,0:32:02.00,English,,0,0,0,,And it says that
Dialogue: 0,0:32:00.28,0:32:02.00,Chinese,,0,0,0,,它还告知了
Dialogue: 0,0:32:03.02,0:32:15.34,English,,0,0,0,,www.cs.cum is actually a synonym for a weirder one called WEB-LB.SRV.cum.edu
Dialogue: 0,0:32:03.02,0:32:15.34,Chinese,,0,0,0,,www.cs.cum 实际上是一个更奇怪的域名 WEB-LB.SRV.cum.edu 的代名词
Dialogue: 0,0:32:15.74,0:32:19.38,English,,0,0,0,,And its IP address is 128.2 like you'd expect
Dialogue: 0,0:32:15.74,0:32:19.38,Chinese,,0,0,0,,它的 IP 地址是以 128.2 开头的，就像你们猜测的那样
Dialogue: 0,0:32:19.80,0:32:21.42,English,,0,0,0,,217.13
Dialogue: 0,0:32:19.80,0:32:21.42,Chinese,,0,0,0,,接着是 217.13
Dialogue: 0,0:32:23.16,0:32:25.88,English,,0,0,0,,And of course that works not just at CMU but I can
Dialogue: 0,0:32:23.16,0:32:25.88,Chinese,,0,0,0,,当然，它不仅适用于 CMU 内的网络，我也可以
Dialogue: 0,0:32:29.94,0:32:33.18,English,,0,0,0,,You know go ask about what Stanford is up to
Dialogue: 0,0:32:29.94,0:32:33.18,Chinese,,0,0,0,,用它查询斯坦福大学计算机系域名的相关信息
Dialogue: 0,0:32:35.64,0:32:42.56,English,,0,0,0,,And it will come back and its IP address is something 171.64
Dialogue: 0,0:32:35.64,0:32:42.56,Chinese,,0,0,0,,它会返回它的 IP 地址，171.64 开头的一串数字
Dialogue: 0,0:32:45.84,0:32:49.76,English,,0,0,0,,And that's been managed by that and you'll see again it's
Dialogue: 0,0:32:45.84,0:32:49.76,Chinese,,0,0,0,,这个域名是由那个 DNS 服务器管理的，你会再次看到
Dialogue: 0,0:32:50.38,0:32:57.03,English,,0,0,0,,I asked for www.cs.stanford.edu it said well the real name of that is cs.stanford.edu
Dialogue: 0,0:32:50.38,0:32:57.03,Chinese,,0,0,0,,我访问了 www.cs.stanford.edu，而它的真实域名是 cs.stanford.edu
Dialogue: 0,0:32:57.32,0:33:00.48,English,,0,0,0,,And this actually is a point that the
Dialogue: 0,0:32:57.32,0:33:00.48,Chinese,,0,0,0,,这实际上是一个关键点
Dialogue: 0,0:33:01.42,0:33:04.36,English,,0,0,0,,The mapping between domain names
Dialogue: 0,0:33:01.42,0:33:04.36,Chinese,,0,0,0,,域名和
Dialogue: 0,0:33:05.76,0:33:08.12,English,,0,0,0,,And internet addresses is not one-to-one
Dialogue: 0,0:33:05.76,0:33:08.12,Chinese,,0,0,0,,IP 地址间的映射不是一一对应的
Dialogue: 0,0:33:08.22,0:33:12.02,English,,0,0,0,,You can have multiple domain names that refer to the same internet address
Dialogue: 0,0:33:08.22,0:33:12.02,Chinese,,0,0,0,,可以有多个域名对应同一个 IP 地址
Dialogue: 0,0:33:13.70,0:33:18.70,English,,0,0,0,,But you can also have multiple internet addresses
Dialogue: 0,0:33:13.70,0:33:18.70,Chinese,,0,0,0,,也可以有多个 IP 地址
Dialogue: 0,0:33:22.66,0:33:23.36,English,,0,0,0,,Excuse me
Dialogue: 0,0:33:22.66,0:33:23.36,Chinese,,0,0,0,,稍等一下
Dialogue: 0,0:33:30.16,0:33:31.18,English,,0,0,0,,That's weird
Dialogue: 0,0:33:30.16,0:33:31.18,Chinese,,0,0,0,,有点问题
Dialogue: 0,0:33:36.98,0:33:42.10,English,,0,0,0,,So like twitter.com when I ask for it it comes back with four different addresses
Dialogue: 0,0:33:36.98,0:33:42.10,Chinese,,0,0,0,,那么，比如像 twitter.com，当我查询它的 IP 地址时，nslook 返回了四个不同的地址
Dialogue: 0,0:33:45.88,0:33:49.56,English,,0,0,0,,And if I do the exact same thing again
Dialogue: 0,0:33:45.88,0:33:49.56,Chinese,,0,0,0,,如果我再重复一次
Dialogue: 0,0:33:51.46,0:33:53.28,English,,0,0,0,,Mmm came back but yeah
Dialogue: 0,0:33:51.46,0:33:53.28,Chinese,,0,0,0,,Mmm 是的
Dialogue: 0,0:33:53.80,0:33:55.62,English,,0,0,0,,You see it came back with
Dialogue: 0,0:33:53.80,0:33:55.62,Chinese,,0,0,0,,你可以看到它返回了
Dialogue: 0,0:33:57.68,0:34:00.22,English,,0,0,0,,The same no not even the same addresses
Dialogue: 0,0:33:57.68,0:34:00.22,Chinese,,0,0,0,,和上一次不完全相同的地址
Dialogue: 0,0:34:02.08,0:34:08.86,English,,0,0,0,,It came back for example here the one that ends with .6 that wasn't in that first was
Dialogue: 0,0:34:02.08,0:34:08.86,Chinese,,0,0,0,,比如说这次返回的 .6 结尾的地址上一次没有出现
Dialogue: 0,0:34:09.22,0:34:13.98,English,,0,0,0,,So it came back with a slightly different set of addresses and a somewhat different order
Dialogue: 0,0:34:09.22,0:34:13.98,Chinese,,0,0,0,,简单来说，它返回了一组有轻微不同的地址，而且它的返回顺序也变了
Dialogue: 0,0:34:14.32,0:34:17.92,English,,0,0,0,,And the idea of that is that actually has multiple servers
Dialogue: 0,0:34:14.32,0:34:17.92,Chinese,,0,0,0,,出现这个现象实际是因为它有许多的服务器
Dialogue: 0,0:34:17.96,0:34:22.18,English,,0,0,0,,So when I send to twitter.com or Google or any of these major servers
Dialogue: 0,0:34:17.96,0:34:22.18,Chinese,,0,0,0,,当我请求访问 twitter.com 或是 Google 或是任何主流网站
Dialogue: 0,0:34:22.58,0:34:26.62,English,,0,0,0,,There's not just one place in the internet that's handling everybody's google traffic
Dialogue: 0,0:34:22.58,0:34:26.62,Chinese,,0,0,0,,网络中有不止一处位置处理每个人的 google 流量
Dialogue: 0,0:34:26.62,0:34:29.70,English,,0,0,0,,There's thousands of places spread around the world
Dialogue: 0,0:34:26.62,0:34:29.70,Chinese,,0,0,0,,它们分布在全球的上千个地点
Dialogue: 0,0:34:30.18,0:34:35.88,English,,0,0,0,,And the way they get you there is by playing tricks with the DNS
Dialogue: 0,0:34:30.18,0:34:35.88,Chinese,,0,0,0,,而把你分配到哪台服务器是由 DNS 决定的
Dialogue: 0,0:34:36.74,0:34:41.98,English,,0,0,0,,That Google is constantly sending updates to the it maintains its own DNS servers
Dialogue: 0,0:34:36.74,0:34:41.98,Chinese,,0,0,0,,Google 持续的对它的 DNS 服务器进行升级
Dialogue: 0,0:34:42.40,0:34:43.98,English,,0,0,0,,So it's constantly changing them
Dialogue: 0,0:34:42.40,0:34:43.98,Chinese,,0,0,0,,它持续的改变它们
Dialogue: 0,0:34:43.98,0:34:48.34,English,,0,0,0,,And it will actually give you different addresses depending on where in the world you're located as well
Dialogue: 0,0:34:43.98,0:34:48.34,Chinese,,0,0,0,,然后 DNS 会根据你的现实位置给你不同的网络地址
Dialogue: 0,0:34:48.76,0:34:53.80,English,,0,0,0,,To try and provide a server that's sort of reasonably close to you geographically so
Dialogue: 0,0:34:48.76,0:34:53.80,Chinese,,0,0,0,,并尽可能让一台最靠近你地理位置的服务器为你提供服务
Dialogue: 0,0:34:54.86,0:34:58.60,English,,0,0,0,,There's all just all kinds of tricks that happen through DNS
Dialogue: 0,0:34:54.86,0:34:58.60,Chinese,,0,0,0,,这就是 DNS 的所有作用
Dialogue: 0,0:34:58.68,0:35:04.62,English,,0,0,0,,That is part of the way they can sort of manage this huge set of addresses
Dialogue: 0,0:34:58.68,0:35:04.62,Chinese,,0,0,0,,这就是它处理如此庞大的地址集的方式
Dialogue: 0,0:35:08.20,0:35:12.46,English,,0,0,0,,And then there's some other domain names that don't have any IP address
Dialogue: 0,0:35:08.20,0:35:12.46,Chinese,,0,0,0,,当然，也有一些域名不映射任何 IP 地址
Dialogue: 0,0:35:13.34,0:35:17.02,English,,0,0,0,,That they're somewhere in the hierarchy that hierarchical naming system
Dialogue: 0,0:35:13.34,0:35:17.02,Chinese,,0,0,0,,它们在分级命名系统的某个地方
Dialogue: 0,0:35:17.02,0:35:19.80,English,,0,0,0,,But they're not actually referring to a particular host
Dialogue: 0,0:35:17.02,0:35:19.80,Chinese,,0,0,0,,但它们不对应一台特定的主机
Dialogue: 0,0:35:21.10,0:35:23.96,English,,0,0,0,,So it's a multi-multi mapping
Dialogue: 0,0:35:21.10,0:35:23.96,Chinese,,0,0,0,,所以映射可以是多对多的
Dialogue: 0,0:35:27.13,0:35:32.14,English,,0,0,0,,In the...the api set reflects
Dialogue: 0,0:35:27.13,0:35:32.14,Chinese,,0,0,0,,api 集合反映了这一点
Dialogue: 0,0:35:40.16,0:35:44.00,English,,0,0,0,,It so this is just going what I told you they sometimes one-to-one
Dialogue: 0,0:35:40.16,0:35:44.00,Chinese,,0,0,0,,这就是我刚刚讲的它们有时一一对应
Dialogue: 0,0:35:44.06,0:35:47.28,English,,0,0,0,,Sometimes many domain names refer to the same address
Dialogue: 0,0:35:44.06,0:35:47.28,Chinese,,0,0,0,,有时许多域名对应同一个地址
Dialogue: 0,0:35:48.20,0:35:53.12,English,,0,0,0,,Sometimes one name maps to multiple addresses that change over time
Dialogue: 0,0:35:48.20,0:35:53.12,Chinese,,0,0,0,,有时一个域名对应多个地址，而这些地址时刻都在变化
Dialogue: 0,0:35:53.96,0:35:57.10,English,,0,0,0,,And then there's some where it's a valid name
Dialogue: 0,0:35:53.96,0:35:57.10,Chinese,,0,0,0,,也有一些合法域名
Dialogue: 0,0:35:57.42,0:36:01.20,English,,0,0,0,,But it doesn't have an IP address it doesn't have a host associated with a question
Dialogue: 0,0:35:57.42,0:36:01.20,Chinese,,0,0,0,,不对应任何 IP 地址，因为它没有关联一台主机，有问题吗？
Dialogue: 0,0:36:01.34,0:36:10.52,English,,0,0,0,,[student asking]
Dialogue: 0,0:36:01.34,0:36:10.52,Chinese,,0,0,0,,[学生提问]
Dialogue: 0,0:36:10.52,0:36:12.80,English,,0,0,0,,Oh how do I get...how do you get your own IP address
Dialogue: 0,0:36:10.52,0:36:12.80,Chinese,,0,0,0,,好的，你怎么得到你自己的 IP 地址对吧
Dialogue: 0,0:36:13.66,0:36:17.48,English,,0,0,0,,Well all you have to beg borrow or you have to either borrow or buy them
Dialogue: 0,0:36:13.66,0:36:17.48,Chinese,,0,0,0,,你需要做的只是租借或者买下一个
Dialogue: 0,0:36:17.70,0:36:24.36,English,,0,0,0,,So for example at CMU there is some number of what they call statically allocated ip addresses
Dialogue: 0,0:36:17.70,0:36:24.36,Chinese,,0,0,0,,举个例子，CMU 有一定数量的静态分配的 IP 地址
Dialogue: 0,0:36:24.38,0:36:31.20,English,,0,0,0,,Where it's just fixed assigned to that machine and you can register form and request them through computing services
Dialogue: 0,0:36:24.38,0:36:31.20,Chinese,,0,0,0,,它固定分配给一些机器，假如你需要使用它们完成一些服务，你可以填表申请
Dialogue: 0,0:36:32.76,0:36:38.44,English,,0,0,0,,But most you don't have that most you get one that's I signed dynamically
Dialogue: 0,0:36:32.76,0:36:38.44,Chinese,,0,0,0,,但你们中的大部分人都是得不到那部分 IP 地址的，大多数时候你们得到的 IP 地址都是动态的
Dialogue: 0,0:36:38.52,0:36:43.42,English,,0,0,0,,So there's a pool of addresses that you basically they call them leasing
Dialogue: 0,0:36:38.52,0:36:43.42,Chinese,,0,0,0,,有一个地址池提供租借服务
Dialogue: 0,0:36:43.42,0:36:45.62,English,,0,0,0,,That you are assigned with for a while
Dialogue: 0,0:36:43.42,0:36:45.62,Chinese,,0,0,0,,它们在一定的时间内会分配给你
Dialogue: 0,0:36:46.26,0:36:49.92,English,,0,0,0,,And then but it could possibly be reassigned to someone else
Dialogue: 0,0:36:46.26,0:36:49.92,Chinese,,0,0,0,,但它们也可能被分配给其他人
Dialogue: 0,0:36:53.06,0:36:54.68,English,,0,0,0,,And that's part of the way it can manage
Dialogue: 0,0:36:53.06,0:36:54.68,Chinese,,0,0,0,,这就是为什么
Dialogue: 0,0:36:55.30,0:36:57.54,English,,0,0,0,,You know somewhat limited set of IP addresses
Dialogue: 0,0:36:55.30,0:36:57.54,Chinese,,0,0,0,,在 IP 地址数量有限的情况下每个人都有使用的机会
Dialogue: 0,0:37:03.24,0:37:07.88,English,,0,0,0,,So the idea of like I said that the main
Dialogue: 0,0:37:03.24,0:37:07.88,Chinese,,0,0,0,,就像我说的我们进行网络连接时
Dialogue: 0,0:37:15.02,0:37:19.50,English,,0,0,0,,Uh way we'll think about it is in terms of what's called TCP
Dialogue: 0,0:37:15.02,0:37:19.50,Chinese,,0,0,0,,利用的主要方式叫做 TCP
Dialogue: 0,0:37:20.18,0:37:22.36,English,,0,0,0,,And it says connection oriented protocol
Dialogue: 0,0:37:20.18,0:37:22.36,Chinese,,0,0,0,,它是一种面向连接的协议
Dialogue: 0,0:37:22.36,0:37:27.42,English,,0,0,0,,Where I establish a connection from one host establishes a connection to another host
Dialogue: 0,0:37:22.36,0:37:27.42,Chinese,,0,0,0,,一台主机创建一个通向另一台主机的连接
Dialogue: 0,0:37:28.18,0:37:34.52,English,,0,0,0,,And they can communicate to each other sending arbitrarily long streams of bytes to each other
Dialogue: 0,0:37:28.18,0:37:34.52,Chinese,,0,0,0,,它们可以通过给对方发送任意长度的字节流实现相互间的通信
Dialogue: 0,0:37:35.30,0:37:39.44,English,,0,0,0,,And so the connection is then two hosts that can talk to each other
Dialogue: 0,0:37:35.30,0:37:39.44,Chinese,,0,0,0,,因此连接就是两台主机间的交流
Dialogue: 0,0:37:39.78,0:37:42.86,English,,0,0,0,,And each of those endpoints is referred to as a socket
Dialogue: 0,0:37:39.78,0:37:42.86,Chinese,,0,0,0,,连接的每一端都是一个 socket
Dialogue: 0,0:37:46.42,0:37:50.26,English,,0,0,0,,And so I can and a socket is both an IP address
Dialogue: 0,0:37:46.42,0:37:50.26,Chinese,,0,0,0,,socket 包括了 IP 地址和
Dialogue: 0,0:37:51.24,0:37:52.82,English,,0,0,0,,And what's called a port number
Dialogue: 0,0:37:51.24,0:37:52.82,Chinese,,0,0,0,,端口号
Dialogue: 0,0:37:52.92,0:37:58.22,English,,0,0,0,,So there's a 16 byte, 16 bit number for every connection
Dialogue: 0,0:37:52.92,0:37:58.22,Chinese,,0,0,0,,对于每一个连接都有一个 16 位的数字
Dialogue: 0,0:37:58.66,0:38:00.50,English,,0,0,0,,That's referred to as its port
Dialogue: 0,0:37:58.66,0:38:00.50,Chinese,,0,0,0,,它们被称为端口号
Dialogue: 0,0:38:00.96,0:38:04.98,English,,0,0,0,,And the reason for that is just because I'm talking to a particular machine
Dialogue: 0,0:38:00.96,0:38:04.98,Chinese,,0,0,0,,需要它是因为当我和一台特定的机器通信时
Dialogue: 0,0:38:05.44,0:38:08.12,English,,0,0,0,,That machine can support different services
Dialogue: 0,0:38:05.44,0:38:08.12,Chinese,,0,0,0,,它会提供许多不同的服务
Dialogue: 0,0:38:08.12,0:38:14.06,English,,0,0,0,,It can provide SSH connections it can provide FTP connections
Dialogue: 0,0:38:08.12,0:38:14.06,Chinese,,0,0,0,,比如说 SSH 服务，FTP 服务
Dialogue: 0,0:38:14.06,0:38:18.04,English,,0,0,0,,It can host a mail server,it can host a web server
Dialogue: 0,0:38:14.06,0:38:18.04,Chinese,,0,0,0,,它也可以作为邮件服务器或是网络服务器
Dialogue: 0,0:38:18.62,0:38:22.68,English,,0,0,0,,So a particular machine might have a multitude of different services
Dialogue: 0,0:38:18.62,0:38:22.68,Chinese,,0,0,0,,所以一台机器可能有大量不同的服务
Dialogue: 0,0:38:23.10,0:38:26.88,English,,0,0,0,,And so those are differentiated from each other with what are called port numbers
Dialogue: 0,0:38:23.10,0:38:26.88,Chinese,,0,0,0,,而这些服务会通过端口号进行区分
Dialogue: 0,0:38:27.44,0:38:33.04,English,,0,0,0,,And similarly as a client might have connections to dozens of hosts going at any given time
Dialogue: 0,0:38:27.44,0:38:33.04,Chinese,,0,0,0,,同样的，客户机可能同时和几十台主机连接
Dialogue: 0,0:38:33.56,0:38:38.12,English,,0,0,0,,I'm cruising the web I'm you know doing all that different stuff
Dialogue: 0,0:38:33.56,0:38:38.12,Chinese,,0,0,0,,我在网上冲浪或是干其它事
Dialogue: 0,0:38:38.52,0:38:42.40,English,,0,0,0,,And that's all differentiated the client and that there's different ports
Dialogue: 0,0:38:38.52,0:38:42.40,Chinese,,0,0,0,,每个客户端的情况都不一样，提供各个服务的端口也不一样
Dialogue: 0,0:38:42.40,0:38:46.72,English,,0,0,0,,Associated with your different programs that are running
Dialogue: 0,0:38:42.40,0:38:46.72,Chinese,,0,0,0,,到底是哪个端口提供服务和你运行的程序有关
Dialogue: 0,0:38:47.92,0:38:51.52,English,,0,0,0,,And so a port then is a 16-bit integer
Dialogue: 0,0:38:47.92,0:38:51.52,Chinese,,0,0,0,,端口就是一个 16 位的整数
Dialogue: 0,0:38:51.94,0:38:56.74,English,,0,0,0,,That identifies which particular endpoint is
Dialogue: 0,0:38:51.94,0:38:56.74,Chinese,,0,0,0,,它标识了到底是哪个特定的端点在跟它通信
Dialogue: 0,0:38:56.88,0:39:00.40,English,,0,0,0,,Being communicated with it either the client side or the server side
Dialogue: 0,0:38:56.88,0:39:00.40,Chinese,,0,0,0,,到底是客户端还是服务端在跟它通信
Dialogue: 0,0:39:01.06,0:39:04.10,English,,0,0,0,,And typically at the client side these are assigned dynamically
Dialogue: 0,0:39:01.06,0:39:04.10,Chinese,,0,0,0,,特别地，在客户端上端口是动态分配的
Dialogue: 0,0:39:04.50,0:39:06.80,English,,0,0,0,,And they referred to as ephemeral ports meaning
Dialogue: 0,0:39:04.50,0:39:06.80,Chinese,,0,0,0,,它们被叫做临时端口
Dialogue: 0,0:39:06.80,0:39:11.96,English,,0,0,0,,They only are assigned for the limited duration that you have a connection with that
Dialogue: 0,0:39:06.80,0:39:11.96,Chinese,,0,0,0,,它们只会在一定的时间内被分配，通常是有连接需要使用它们时
Dialogue: 0,0:39:12.60,0:39:14.76,English,,0,0,0,,That you're maintaining that connection
Dialogue: 0,0:39:12.60,0:39:14.76,Chinese,,0,0,0,,或是你要维持一个连接时
Dialogue: 0,0:39:15.38,0:39:19.18,English,,0,0,0,,And then there has to be some way if I'm going to contact
Dialogue: 0,0:39:15.38,0:39:19.18,Chinese,,0,0,0,,那么，肯定会有一种方法让我...
Dialogue: 0,0:39:19.50,0:39:26.38,English,,0,0,0,,And I want to know the dns will tell me what the IP address is of say google.com
Dialogue: 0,0:39:19.50,0:39:26.38,Chinese,,0,0,0,,假设我想知道 google.com 的 IP 地址，DNS 会告诉我
Dialogue: 0,0:39:26.92,0:39:28.88,English,,0,0,0,,But I have to know that
Dialogue: 0,0:39:26.92,0:39:28.88,Chinese,,0,0,0,,但我其实想知道
Dialogue: 0,0:39:29.62,0:39:38.42,English,,0,0,0,,Am I communicating with its web service which is port 80 or https secure socket is a different report number
Dialogue: 0,0:39:29.62,0:39:38.42,Chinese,,0,0,0,,我到底是在使用 80 端口上的网络服务还是其它某个端口上的 https 服务
Dialogue: 0,0:39:38.80,0:39:40.84,English,,0,0,0,,So which service I'm asking for
Dialogue: 0,0:39:38.80,0:39:40.84,Chinese,,0,0,0,,到底是哪个服务呢
Dialogue: 0,0:39:41.30,0:39:44.38,English,,0,0,0,,And there's a standard list what are called well-known ports
Dialogue: 0,0:39:41.30,0:39:44.38,Chinese,,0,0,0,,其实有一串标准端口，它们被称为公认端口
Dialogue: 0,0:39:45.08,0:39:52.58,English,,0,0,0,,That are that I can contact at the server end to get the particular service I'm looking for
Dialogue: 0,0:39:45.08,0:39:52.58,Chinese,,0,0,0,,我可以用服务器的公认端口去获得特定的服务
Dialogue: 0,0:39:54.14,0:39:58.38,English,,0,0,0,,And those are assigned there's a big waste of port assignments
Dialogue: 0,0:39:54.14,0:39:58.38,Chinese,,0,0,0,,这些端口是固定分配给某种服务的，这对端口分配来说是个巨大的浪费
Dialogue: 0,0:40:00.20,0:40:05.50,English,,0,0,0,,And so the again that's part of the sort of
Dialogue: 0,0:40:00.20,0:40:05.50,Chinese,,0,0,0,,它们是
Dialogue: 0,0:40:06.22,0:40:11.30,English,,0,0,0,,A whole set of internet standards it's the identifiers for the different ports
Dialogue: 0,0:40:06.22,0:40:11.30,Chinese,,0,0,0,,互联网标准的一部分，也是不同端口的标识符
Dialogue: 0,0:40:11.88,0:40:15.70,English,,0,0,0,,What services those are and how those particular protocols work
Dialogue: 0,0:40:11.88,0:40:15.70,Chinese,,0,0,0,,它们告知了端口提供何种服务，以及对应协议的内容
Dialogue: 0,0:40:20.42,0:40:22.64,English,,0,0,0,,So when I have a connection then
Dialogue: 0,0:40:20.42,0:40:22.64,Chinese,,0,0,0,,那么当我有一个连接时
Dialogue: 0,0:40:28.38,0:40:32.06,English,,0,0,0,,As I mentioned uh think of it as a connection then is as a
Dialogue: 0,0:40:28.38,0:40:32.06,Chinese,,0,0,0,,就像我提到的，把它们看做
Dialogue: 0,0:40:32.88,0:40:39.70,English,,0,0,0,,Link between two machines based on some known port typically at the server end
Dialogue: 0,0:40:32.88,0:40:39.70,Chinese,,0,0,0,,两台机器间的连接，这个连接是基于服务器上的一些公认端口
Dialogue: 0,0:40:40.12,0:40:44.24,English,,0,0,0,,And a dynamically assigned or ephemeral port assigned at the client end
Dialogue: 0,0:40:40.12,0:40:44.24,Chinese,,0,0,0,,和主机上的一个动态分配端口或是临时端口实现的
Dialogue: 0,0:40:45.00,0:40:50.90,English,,0,0,0,,And I can refer to then that connection then is identified by the combination of the hosts at the two ends
Dialogue: 0,0:40:45.00,0:40:50.90,Chinese,,0,0,0,,我想说的是，连接是由连接两端的主机
Dialogue: 0,0:40:51.38,0:40:52.70,English,,0,0,0,,And the ports that they're using
Dialogue: 0,0:40:51.38,0:40:52.70,Chinese,,0,0,0,,和它们各自使用的端口共同识别的
Dialogue: 0,0:40:59.00,0:41:08.74,English,,0,0,0,,And in general then it's the job of the kernel to differentiate the different connections that are coming into a machine
Dialogue: 0,0:40:59.00,0:41:08.74,Chinese,,0,0,0,,通常情况下，核心态需要区分来到这台机器的不同连接
Dialogue: 0,0:41:08.74,0:41:13.20,English,,0,0,0,,And figure out which software which process to wake up
Dialogue: 0,0:41:08.74,0:41:13.20,Chinese,,0,0,0,,并且为各个连接启动它们需要的软件和进程
Dialogue: 0,0:41:13.78,0:41:20.54,English,,0,0,0,,When a data you know when some data arrives from another machine
Dialogue: 0,0:41:13.78,0:41:20.54,Chinese,,0,0,0,,当其他机器上的数据到达你的机器时
Dialogue: 0,0:41:20.54,0:41:26.36,English,,0,0,0,,In which actual program running on that machine will make use of that data
Dialogue: 0,0:41:20.54,0:41:26.36,Chinese,,0,0,0,,到底是什么程序在利用它们呢
Dialogue: 0,0:41:26.78,0:41:35.56,English,,0,0,0,,And that's done by associating for each of the ports, a particular process executing program
Dialogue: 0,0:41:26.78,0:41:35.56,Chinese,,0,0,0,,实际上，每个端口都有特定的进程执行程序
Dialogue: 0,0:41:35.98,0:41:38.10,English,,0,0,0,,That's going to handle those particular requests
Dialogue: 0,0:41:35.98,0:41:38.10,Chinese,,0,0,0,,处理这些请求
Dialogue: 0,0:41:41.80,0:41:50.62,English,,0,0,0,,And it's totally possible for a client to be interacting with a single server over different ports
Dialogue: 0,0:41:41.80,0:41:50.62,Chinese,,0,0,0,,另外，一个客户端同时和单一服务器上的不同端口通信也是完全可能的
Dialogue: 0,0:41:51.06,0:41:54.46,English,,0,0,0,,But those are considered to be different connections and
Dialogue: 0,0:41:51.06,0:41:54.46,Chinese,,0,0,0,,但这需要用到不同的连接
Dialogue: 0,0:41:56.06,0:41:59.28,English,,0,0,0,,And so they don't really interfere with each other
Dialogue: 0,0:41:56.06,0:41:59.28,Chinese,,0,0,0,,所以它们不会互相干扰
Dialogue: 0,0:42:05.08,0:42:10.44,English,,0,0,0,,So that's what I mentioned is this is what we refer to as sockets programming or the sockets interface
Dialogue: 0,0:42:05.08,0:42:10.44,Chinese,,0,0,0,,接下来要讲的就是我提到的 socket 编程，或是叫 socket 接口
Dialogue: 0,0:42:11.94,0:42:17.42,English,,0,0,0,,It was developed sort of as the internet was evolving in the late 70s and early 80s
Dialogue: 0,0:42:11.94,0:42:17.42,Chinese,,0,0,0,,它是伴随着互联网的演变在 19 世纪 70 年代末到 80 年代初发展起来的
Dialogue: 0,0:42:20.48,0:42:24.34,English,,0,0,0,,So socket then as I said is certain logically one end
Dialogue: 0,0:42:20.48,0:42:24.34,Chinese,,0,0,0,,socket 其实是逻辑层面上的一个端点
Dialogue: 0,0:42:24.60,0:42:26.02,English,,0,0,0,,One of the two ends of a connection
Dialogue: 0,0:42:24.60,0:42:26.02,Chinese,,0,0,0,,即连接的其中一端
Dialogue: 0,0:42:27.12,0:42:31.88,English,,0,0,0,,And from an application point of view you'll see it as a file descriptor
Dialogue: 0,0:42:27.12,0:42:31.88,Chinese,,0,0,0,,从应用程序的角度，你可以把它看做一个文件描述符
Dialogue: 0,0:42:32.52,0:42:37.22,English,,0,0,0,,Just the low-level file stuff that you've already seen that you can do reading and writing from
Dialogue: 0,0:42:32.52,0:42:37.22,Chinese,,0,0,0,,即系统底层可以让你进行读写操作的文件，你们之前已经见过了
Dialogue: 0,0:42:37.96,0:42:38.34,English,,0,0,0,,Um
Dialogue: 0,0:42:37.96,0:42:38.34,Chinese,,0,0,0,,嗯
Dialogue: 0,0:42:40.10,0:42:47.40,English,,0,0,0,,And so that's the sort of mental model that is provided by the socket interface
Dialogue: 0,0:42:40.10,0:42:47.40,Chinese,,0,0,0,,它就是 socket 接口提供的一种关键模型
Dialogue: 0,0:42:50.66,0:42:54.96,English,,0,0,0,,But it's a very different you know the actual implementation of network
Dialogue: 0,0:42:50.66,0:42:54.96,Chinese,,0,0,0,,但它和网络的实现还是有很大的区别的
Dialogue: 0,0:42:55.46,0:42:57.10,English,,0,0,0,,When you write to a socket
Dialogue: 0,0:42:55.46,0:42:57.10,Chinese,,0,0,0,,当你对 socket 文档进行写入时
Dialogue: 0,0:42:57.56,0:43:01.20,English,,0,0,0,,It's firing up all kinds of network stuff whereas you write to a disk
Dialogue: 0,0:42:57.56,0:43:01.20,Chinese,,0,0,0,,它会启动各种与网络有关的东西，就像你对磁盘写入时
Dialogue: 0,0:43:01.84,0:43:03.82,English,,0,0,0,,It's operating a disk controller
Dialogue: 0,0:43:01.84,0:43:03.82,Chinese,,0,0,0,,会操作一个磁盘控制器一样
Dialogue: 0,0:43:03.88,0:43:08.10,English,,0,0,0,,So at the hardware level and even at the lower levels of software they're very different beings
Dialogue: 0,0:43:03.88,0:43:08.10,Chinese,,0,0,0,,虽然在硬件层面或是软件底层它们的本质有很大的区别
Dialogue: 0,0:43:08.72,0:43:11.64,English,,0,0,0,,But you as an application programmer see some commonality there
Dialogue: 0,0:43:08.72,0:43:11.64,Chinese,,0,0,0,,但你作为一个应用程序员需要看到它们的一些共同点
Dialogue: 0,0:43:12.90,0:43:15.84,English,,0,0,0,,Okay so let's jump right into the API
Dialogue: 0,0:43:12.90,0:43:15.84,Chinese,,0,0,0,,好的，那么我们直接进入 API 的部分吧
Dialogue: 0,0:43:16.52,0:43:20.74,English,,0,0,0,,And again this is a place where you'll wish you were programming in a language
Dialogue: 0,0:43:16.52,0:43:20.74,Chinese,,0,0,0,,在这个部分你是会想要使用含有“类”方法
Dialogue: 0,0:43:20.94,0:43:24.40,English,,0,0,0,,That had a type hierarchy
Dialogue: 0,0:43:20.94,0:43:24.40,Chinese,,0,0,0,,的语言来编程的
Dialogue: 0,0:43:24.60,0:43:26.58,English,,0,0,0,,But you aren't,you're programming in C
Dialogue: 0,0:43:24.60,0:43:26.58,Chinese,,0,0,0,,但你并不能用，你得用 C 语言来编程
Dialogue: 0,0:43:29.22,0:43:34.26,English,,0,0,0,,There's a type, there's a zillion structs that you kind of have to get familiar with
Dialogue: 0,0:43:29.22,0:43:34.26,Chinese,,0,0,0,,你需要熟悉这里的许多结构体
Dialogue: 0,0:43:34.26,0:43:40.14,English,,0,0,0,,But one's called a sockaddr and basically it's just a 16 bytes worth of stuff
Dialogue: 0,0:43:34.26,0:43:40.14,Chinese,,0,0,0,,其中一个叫做 sockaddr，它本质上只是一个 16 字节长的东西
Dialogue: 0,0:43:40.96,0:43:45.20,English,,0,0,0,,Where the only thing that's special here is that the leading two bytes
Dialogue: 0,0:43:40.96,0:43:45.20,Chinese,,0,0,0,,唯一特殊的地方就是头两个字节
Dialogue: 0,0:43:45.84,0:43:48.24,English,,0,0,0,,Designate what type of socket this is
Dialogue: 0,0:43:45.84,0:43:48.24,Chinese,,0,0,0,,指明了这个 socket 是什么类型的
Dialogue: 0,0:43:48.62,0:43:51.72,English,,0,0,0,,And particularly be different whether it's a TCP socket
Dialogue: 0,0:43:48.62,0:43:51.72,Chinese,,0,0,0,,举个例子，它到底是 TCP socket
Dialogue: 0,0:43:52.10,0:43:57.06,English,,0,0,0,,An IPv6 socket a UDP socket
Dialogue: 0,0:43:52.10,0:43:57.06,Chinese,,0,0,0,,还是 IPv6 socket，或是 UDP socket
Dialogue: 0,0:43:57.06,0:43:59.02,English,,0,0,0,,And all those will have different numbers
Dialogue: 0,0:43:57.06,0:43:59.02,Chinese,,0,0,0,,会有不同的数字告诉你
Dialogue: 0,0:43:59.60,0:44:04.08,English,,0,0,0,,A different constant in there that tells you which type of socket it is
Dialogue: 0,0:43:59.60,0:44:04.08,Chinese,,0,0,0,,有一个常量告诉你它到底是哪种类型的 socket
Dialogue: 0,0:44:04.58,0:44:10.08,English,,0,0,0,,And then the high level the sockets in a lot of the programs don't need to know
Dialogue: 0,0:44:04.58,0:44:10.08,Chinese,,0,0,0,,但是很多高级程序不需要知道 socket 的类型
Dialogue: 0,0:44:10.46,0:44:12.60,English,,0,0,0,,You know which type of connection this is
Dialogue: 0,0:44:10.46,0:44:12.60,Chinese,,0,0,0,,或是这到底是哪种连接
Dialogue: 0,0:44:12.72,0:44:16.58,English,,0,0,0,,They can just deal with they basically call other software to deal with that
Dialogue: 0,0:44:12.72,0:44:16.58,Chinese,,0,0,0,,它们大多会调用其它软件来解决这个问题
Dialogue: 0,0:44:17.78,0:44:20.34,English,,0,0,0,,So that's why it's referred to as being families specific
Dialogue: 0,0:44:17.78,0:44:20.34,Chinese,,0,0,0,,这就是为什么它被称为特殊族
Dialogue: 0,0:44:22.06,0:44:28.50,English,,0,0,0,,And then the socket stuff isn't even necessarily referred to the internet the Internet
Dialogue: 0,0:44:22.06,0:44:28.50,Chinese,,0,0,0,,这些东西对因特网来说并不必要
Dialogue: 0,0:44:29.10,0:44:34.02,English,,0,0,0,,And so there's a more specific one called a sockaddr_in
Dialogue: 0,0:44:29.10,0:44:34.02,Chinese,,0,0,0,,还有一个更特殊的结构体叫做 sockaddr_in
Dialogue: 0,0:44:34.98,0:44:39.42,English,,0,0,0,,That is used for IPv4 sockets
Dialogue: 0,0:44:34.98,0:44:39.42,Chinese,,0,0,0,,它用于 IPv4 socket
Dialogue: 0,0:44:42.22,0:44:43.52,English,,0,0,0,,Not IPv6
Dialogue: 0,0:44:42.22,0:44:43.52,Chinese,,0,0,0,,而不是 IPv6 socket
Dialogue: 0,0:44:43.58,0:44:49.22,English,,0,0,0,,And so in particular it fills in fields one is called the port which as I mentioned is 16 bits
Dialogue: 0,0:44:43.58,0:44:49.22,Chinese,,0,0,0,,它包含了许多字段，其中有一个是关于端口的，我提到过它是 16 位的
Dialogue: 0,0:44:49.96,0:44:51.92,English,,0,0,0,,And then the IP address
Dialogue: 0,0:44:49.96,0:44:51.92,Chinese,,0,0,0,,它之后是有关 IP 地址的字段
Dialogue: 0,0:44:52.54,0:44:56.16,English,,0,0,0,,The 4 byte IP address both of which are in
Dialogue: 0,0:44:52.54,0:44:56.16,Chinese,,0,0,0,,4 字节的 IP 地址字段
Dialogue: 0,0:44:57.04,0:45:00.82,English,,0,0,0,,Even if you're running the software on a x86 machine
Dialogue: 0,0:44:57.04,0:45:00.82,Chinese,,0,0,0,,即使你在 x86 机器上运行它
Dialogue: 0,0:45:00.82,0:45:03.56,English,,0,0,0,,These should be in big endian order
Dialogue: 0,0:45:00.82,0:45:03.56,Chinese,,0,0,0,,它俩应该都是大端字节序的
Dialogue: 0,0:45:05.16,0:45:08.86,English,,0,0,0,,And you'll see that this is what I mean that this is sort of a
Dialogue: 0,0:45:05.16,0:45:08.86,Chinese,,0,0,0,,你会发现这就是我说的
Dialogue: 0,0:45:09.16,0:45:13.38,English,,0,0,0,,C version of subtyping if you know something like C++ or java
Dialogue: 0,0:45:09.16,0:45:13.38,Chinese,,0,0,0,,C 语言的一种子类，如果你了解 C++ 或者 java
Dialogue: 0,0:45:13.58,0:45:16.56,English,,0,0,0,,Or you know a language with type inheritance
Dialogue: 0,0:45:13.58,0:45:16.56,Chinese,,0,0,0,,或者任何一个有类型继承的语言的话
Dialogue: 0,0:45:17.28,0:45:25.48,English,,0,0,0,,That you can think of it as a sockaddr_in a sort of a subclass of a sockaddr
Dialogue: 0,0:45:17.28,0:45:25.48,Chinese,,0,0,0,,你可以把 sockaddr_in 看做 sockaddr 的一个子类
Dialogue: 0,0:45:25.90,0:45:28.68,English,,0,0,0,,Right it has more information it's compatible with
Dialogue: 0,0:45:25.90,0:45:28.68,Chinese,,0,0,0,,对吧，它兼容 socket
Dialogue: 0,0:45:28.74,0:45:32.12,English,,0,0,0,,But has more information than a socket
Dialogue: 0,0:45:28.74,0:45:32.12,Chinese,,0,0,0,,但有比 socket 更多的信息
Dialogue: 0,0:45:33.56,0:45:38.00,English,,0,0,0,,And then there's another type of for IPv6 has a different kind of
Dialogue: 0,0:45:33.56,0:45:38.00,Chinese,,0,0,0,,而对于 IPv6 有另一种
Dialogue: 0,0:45:38.42,0:45:41.14,English,,0,0,0,,Struct that they fill in for its information
Dialogue: 0,0:45:38.42,0:45:41.14,Chinese,,0,0,0,,结构体用于储存信息
Dialogue: 0,0:45:42.36,0:45:46.38,English,,0,0,0,,And then they pat it out with 8 bytes of zeros
Dialogue: 0,0:45:42.36,0:45:46.38,Chinese,,0,0,0,,之后这里会用 8 字节的 0 把它补充完整
Dialogue: 0,0:45:47.04,0:45:50.48,English,,0,0,0,,Just because this particular protocol doesn't require the full 16 bytes
Dialogue: 0,0:45:47.04,0:45:50.48,Chinese,,0,0,0,,因为这个协议并不需要用完 16 个字节
Dialogue: 0,0:45:53.92,0:46:03.42,English,,0,0,0,,Okay so this is sort of what it looks like to operate a full-blown Client-server system from a programmers perspective
Dialogue: 0,0:45:53.92,0:46:03.42,Chinese,,0,0,0,,这就是程序员对客户端-服务器系统的完整流程的理解
Dialogue: 0,0:46:03.94,0:46:09.96,English,,0,0,0,,And we're going to for the rest of today and all of Thursday go through all these steps
Dialogue: 0,0:46:03.94,0:46:09.96,Chinese,,0,0,0,,在这节课的剩余时间和周四的整节课上，我们将一步步实现整个过程
Dialogue: 0,0:46:10.36,0:46:15.84,English,,0,0,0,,And you as a programmer are actually going to have to understand each of these steps
Dialogue: 0,0:46:10.36,0:46:15.84,Chinese,,0,0,0,,而你们作为程序员必须理解每一个步骤
Dialogue: 0,0:46:16.00,0:46:19.56,English,,0,0,0,,What they do?what they mean?And how to use them
Dialogue: 0,0:46:16.00,0:46:19.56,Chinese,,0,0,0,,每一步在做什么？它们为什么要这么做？怎么利用它们？
Dialogue: 0,0:46:19.82,0:46:23.42,English,,0,0,0,,The good news is there's some pretty standard patterns here
Dialogue: 0,0:46:19.82,0:46:23.42,Chinese,,0,0,0,,好消息是一些最基本的模块已经是现成的了
Dialogue: 0,0:46:23.44,0:46:31.98,English,,0,0,0,,And so you can often grab some existing code say out of the book to use that will make this not as painful as it might look
Dialogue: 0,0:46:23.44,0:46:31.98,Chinese,,0,0,0,,你们可以从书本之外的一些地方找到现存的代码并使用它们，这会使这一部分没有想象中的那么痛苦
Dialogue: 0,0:46:33.76,0:46:37.18,English,,0,0,0,,So but the overall idea of this this picture then is
Dialogue: 0,0:46:33.76,0:46:37.18,Chinese,,0,0,0,,从整体上理解这个图片
Dialogue: 0,0:46:39.28,0:46:41.52,English,,0,0,0,,Sorry can't get use the fast way my remote doesn't work
Dialogue: 0,0:46:39.28,0:46:41.52,Chinese,,0,0,0,,不好意思，遥控坏了
Dialogue: 0,0:46:45.16,0:46:49.96,English,,0,0,0,,On the the right hand side refers to the steps that the server has to go through
Dialogue: 0,0:46:45.16,0:46:49.96,Chinese,,0,0,0,,图片的右半部分是服务器需要处理的步骤
Dialogue: 0,0:46:50.32,0:46:52.54,English,,0,0,0,,And the left hand side is what the client does
Dialogue: 0,0:46:50.32,0:46:52.54,Chinese,,0,0,0,,左半部分则是客户端要处理的步骤
Dialogue: 0,0:46:53.14,0:46:57.68,English,,0,0,0,,So the upper right is what it takes to set up a server
Dialogue: 0,0:46:53.14,0:46:57.68,Chinese,,0,0,0,,右上角是设置一个服务器的步骤
Dialogue: 0,0:46:58.00,0:47:01.60,English,,0,0,0,,That is then a program that's running there
Dialogue: 0,0:46:58.00,0:47:01.60,Chinese,,0,0,0,,它上面有一个程序在运行
Dialogue: 0,0:47:02.04,0:47:07.34,English,,0,0,0,,Ready to receive connections from a client and perform various services
Dialogue: 0,0:47:02.04,0:47:07.34,Chinese,,0,0,0,,准备接受客户端发送的连接请求并提供各种服务
Dialogue: 0,0:47:09.48,0:47:15.76,English,,0,0,0,,And so obviously before the client can do anything the server has to exist
Dialogue: 0,0:47:09.48,0:47:15.76,Chinese,,0,0,0,,很显然，有了服务器之后客户端才能利用它
Dialogue: 0,0:47:15.86,0:47:18.16,English,,0,0,0,,So that has to be the first step in setting things up
Dialogue: 0,0:47:15.86,0:47:18.16,Chinese,,0,0,0,,所以这是创建整个系统的第一步
Dialogue: 0,0:47:19.64,0:47:25.60,English,,0,0,0,,And then we have to...we'll fire up a cert a client that will make use of this service
Dialogue: 0,0:47:19.64,0:47:25.60,Chinese,,0,0,0,,接着我们要启动一个使用这些服务的客户端
Dialogue: 0,0:47:26.90,0:47:29.14,English,,0,0,0,,And then there'll be what's referred to as a session
Dialogue: 0,0:47:26.90,0:47:29.14,Chinese,,0,0,0,,接下来有一个叫做会话的部分
Dialogue: 0,0:47:29.16,0:47:33.68,English,,0,0,0,,Meaning a kind of back and forth communication between the client and server
Dialogue: 0,0:47:29.16,0:47:33.68,Chinese,,0,0,0,,它指的是客户端和服务器之间来回通信
Dialogue: 0,0:47:33.68,0:47:38.08,English,,0,0,0,,Doing whatever they're going to do,this is not specific to any particular application
Dialogue: 0,0:47:33.68,0:47:38.08,Chinese,,0,0,0,,并完成它们要做的事，任何应用程序都需要这个部分
Dialogue: 0,0:47:38.76,0:47:44.76,English,,0,0,0,,And like I said it will involve you'll see rio_ remember those were reliable I/O
Dialogue: 0,0:47:38.76,0:47:44.76,Chinese,,0,0,0,,它包括了 rio_ 开头的多个函数，你们应该还记得我们讲过
Dialogue: 0,0:47:45.32,0:47:48.66,English,,0,0,0,,Functions we talked about as part of the UNIX I/O
Dialogue: 0,0:47:45.32,0:47:48.66,Chinese,,0,0,0,,它们是 UNIX I/O 系统中的一部分可靠的 I/O 函数
Dialogue: 0,0:47:49.64,0:47:59.66,English,,0,0,0,,So it's a way to read and write in a rom and handle some of the quirks of low-level I/O
Dialogue: 0,0:47:49.64,0:47:59.66,Chinese,,0,0,0,,可以用于读写 rom 并处理一些底层 I/O 的操作
Dialogue: 0,0:47:59.68,0:48:03.25,English,,0,0,0,,But basically this is sending and receiving messages over the internet
Dialogue: 0,0:47:59.68,0:48:03.25,Chinese,,0,0,0,,但它们主要还是用于发送和接受网络上的信息
Dialogue: 0,0:48:04.76,0:48:06.12,English,,0,0,0,,And then once that's done
Dialogue: 0,0:48:04.76,0:48:06.12,Chinese,,0,0,0,,上述部分都完成之后
Dialogue: 0,0:48:07.30,0:48:12.22,English,,0,0,0,,Typically then the client will close its connection sort of equivalent of hanging up its phone
Dialogue: 0,0:48:07.30,0:48:12.22,Chinese,,0,0,0,,客户端就会结束连接，就像挂电话一样
Dialogue: 0,0:48:13.02,0:48:14.70,English,,0,0,0,,And say ok I'm done
Dialogue: 0,0:48:13.02,0:48:14.70,Chinese,,0,0,0,,相当于在说“我完成了”
Dialogue: 0,0:48:15.12,0:48:21.56,English,,0,0,0,,And then sometime later or maybe never depending on what kind of web you know service this is
Dialogue: 0,0:48:15.12,0:48:21.56,Chinese,,0,0,0,,在一些情况下，当然你可能永远都遇不到这些情况，它们是否出现取决于服务器到底在运行哪种服务
Dialogue: 0,0:48:22.10,0:48:24.54,English,,0,0,0,,If the server wants to shut down
Dialogue: 0,0:48:22.10,0:48:24.54,Chinese,,0,0,0,,如果服务器想要主动结束连接
Dialogue: 0,0:48:24.54,0:48:29.90,English,,0,0,0,,It has its own a collection of calls that it makes to stop that service
Dialogue: 0,0:48:24.54,0:48:29.90,Chinese,,0,0,0,,它有让自己停止相应服务的函数集
Dialogue: 0,0:48:31.22,0:48:36.64,English,,0,0,0,,So anyways just to kind of give you the landscape of what this picture means
Dialogue: 0,0:48:31.22,0:48:36.64,Chinese,,0,0,0,,不管怎样，你们应该对这幅图片有一个大致的了解了
Dialogue: 0,0:48:41.08,0:48:43.78,English,,0,0,0,,So we're going to sort of jump into
Dialogue: 0,0:48:41.08,0:48:43.78,Chinese,,0,0,0,,我们接下来将直接学习
Dialogue: 0,0:48:45.21,0:48:48.30,English,,0,0,0,,The middle this the top level and we'll focus
Dialogue: 0,0:48:45.21,0:48:48.30,Chinese,,0,0,0,,我到底是从上往下讲还是
Dialogue: 0,0:48:52.06,0:48:53.84,English,,0,0,0,,Actually which will we focus on
Dialogue: 0,0:48:52.06,0:48:53.84,Chinese,,0,0,0,,我到底怎么讲
Dialogue: 0,0:48:54.42,0:48:56.90,English,,0,0,0,,Well we'll talk to some level in parallel
Dialogue: 0,0:48:54.42,0:48:56.90,Chinese,,0,0,0,,好吧，我还是一个模块一个模块的讲吧
Dialogue: 0,0:48:58.26,0:49:03.12,English,,0,0,0,,Because there's a lot of commonality as you can see between what goes on with the server and what goes on with the client
Dialogue: 0,0:48:58.26,0:49:03.12,Chinese,,0,0,0,,因为这样你就可以看到客户端和服务器上的函数的共同点
Dialogue: 0,0:49:07.88,0:49:12.64,English,,0,0,0,,Yeah and so actually the top level call this one called getaddrinfo is the way that
Dialogue: 0,0:49:07.88,0:49:12.64,Chinese,,0,0,0,,最上方的 getaddrinfo 函数
Dialogue: 0,0:49:13.16,0:49:14.34,English,,0,0,0,,It sort of...
Dialogue: 0,0:49:13.16,0:49:14.34,Chinese,,0,0,0,,它算是
Dialogue: 0,0:49:18.14,0:49:25.90,English,,0,0,0,,Initiate things and actually does the lookup to map from a domain name to a IP address
Dialogue: 0,0:49:18.14,0:49:25.90,Chinese,,0,0,0,,整个流程的开端，它实际上是用于查找从域名到 IP 地址的映射
Dialogue: 0,0:49:26.52,0:49:27.76,English,,0,0,0,,So we'll cover that later
Dialogue: 0,0:49:26.52,0:49:27.76,Chinese,,0,0,0,,我之后会详细讲解这个过程
Dialogue: 0,0:49:28.28,0:49:35.14,English,,0,0,0,,So the first step in on either side then and creating a connection is a call to a function called socket
Dialogue: 0,0:49:28.28,0:49:35.14,Chinese,,0,0,0,,所以客户端和服务器要做的第一步都是通过调用 socket 函数来创建连接
Dialogue: 0,0:49:37.76,0:49:42.82,English,,0,0,0,,And the reason I wanted to blackboard was to help you keep track of this
Dialogue: 0,0:49:37.76,0:49:42.82,Chinese,,0,0,0,,为了方便你们记录，我会把这些内容写到黑板上
Dialogue: 0,0:50:05.84,0:50:08.96,English,,0,0,0,,So the first call is a doesn't do much
Dialogue: 0,0:50:05.84,0:50:08.96,Chinese,,0,0,0,,第一个调用实际上作用不大
Dialogue: 0,0:50:09.36,0:50:12.84,English,,0,0,0,,Oh and that's why the function call is socket
Dialogue: 0,0:50:09.36,0:50:12.84,Chinese,,0,0,0,,因此这个函数被称为 socket
Dialogue: 0,0:50:13.38,0:50:14.48,English,,0,0,0,,But the
Dialogue: 0,0:50:13.38,0:50:14.48,Chinese,,0,0,0,,而且
Dialogue: 0,0:50:17.72,0:50:19.52,English,,0,0,0,,It only happens within the application
Dialogue: 0,0:50:17.72,0:50:19.52,Chinese,,0,0,0,,它只在这个程序内部起作用
Dialogue: 0,0:50:19.52,0:50:24.64,English,,0,0,0,,It doesn't make a use of any part of the operating system doesn't send anything over the network
Dialogue: 0,0:50:19.52,0:50:24.64,Chinese,,0,0,0,,它不会使用操作系统，也不会往网络上发送任何内容
Dialogue: 0,0:50:25.12,0:50:28.86,English,,0,0,0,,And the idea is to basically say hey I want to create a socket
Dialogue: 0,0:50:25.12,0:50:28.86,Chinese,,0,0,0,,这一步只是为了创建一个 socket
Dialogue: 0,0:50:31.08,0:50:33.66,English,,0,0,0,,And it's given three arguments
Dialogue: 0,0:50:31.08,0:50:33.66,Chinese,,0,0,0,,它有三个参数
Dialogue: 0,0:50:34.18,0:50:37.10,English,,0,0,0,,The first which is AF_INET
Dialogue: 0,0:50:34.18,0:50:37.10,Chinese,,0,0,0,,第一个参数叫 AF_INET
Dialogue: 0,0:50:37.14,0:50:45.44,English,,0,0,0,,All these upper case on names are constants that are built in or included in the various .h files that
Dialogue: 0,0:50:37.14,0:50:45.44,Chinese,,0,0,0,,请注意，所有字母大写的参数都是包含在各种 .h 文件里的常量
Dialogue: 0,0:50:45.52,0:50:47.28,English,,0,0,0,,That you include in writing this code
Dialogue: 0,0:50:45.52,0:50:47.28,Chinese,,0,0,0,,你们写代码的时候应该包含这些头文件
Dialogue: 0,0:50:47.64,0:50:53.62,English,,0,0,0,,And AF_INET just means it's a IPv4 so 32-bit addresses
Dialogue: 0,0:50:47.64,0:50:53.62,Chinese,,0,0,0,,AF_INET 告诉我们它是一个 32 位的 IPv4 地址
Dialogue: 0,0:50:54.66,0:50:58.52,English,,0,0,0,,And then the second parameter is says you want a SOCK_STREAM
Dialogue: 0,0:50:54.66,0:50:58.52,Chinese,,0,0,0,,第二个参数 SOCK_STREAM
Dialogue: 0,0:50:58.92,0:51:01.14,English,,0,0,0,,And that refers to a TCP connection
Dialogue: 0,0:50:58.92,0:51:01.14,Chinese,,0,0,0,,表明了这个连接是一个 TCP 连接
Dialogue: 0,0:51:01.18,0:51:07.68,English,,0,0,0,,It's referred to as a stream connection because like I said you get to send as many bytes as you like a stream of bytes
Dialogue: 0,0:51:01.18,0:51:07.68,Chinese,,0,0,0,,它也被称为流连接，因为你可以发送任意字节数据流
Dialogue: 0,0:51:08.24,0:51:09.82,English,,0,0,0,,Either direction
Dialogue: 0,0:51:08.24,0:51:09.82,Chinese,,0,0,0,,而且是双向的
Dialogue: 0,0:51:10.94,0:51:12.08,English,,0,0,0,,And then
Dialogue: 0,0:51:10.94,0:51:12.08,Chinese,,0,0,0,,下一个参数
Dialogue: 0,0:51:15.94,0:51:18.86,English,,0,0,0,,Zero protocol
Dialogue: 0,0:51:15.94,0:51:18.86,Chinese,,0,0,0,,则是 0
Dialogue: 0,0:51:18.92,0:51:22.36,English,,0,0,0,,Well I guess it must not be very interesting because I set it to zero
Dialogue: 0,0:51:18.92,0:51:22.36,Chinese,,0,0,0,,嗯，它可能没什么用，因为我把它设成了 0
Dialogue: 0,0:51:23.32,0:51:26.16,English,,0,0,0,,So we don't need to do anything in this particular case
Dialogue: 0,0:51:23.32,0:51:26.16,Chinese,,0,0,0,,我们在这个例子中不用做任何操作
Dialogue: 0,0:51:27.14,0:51:29.02,English,,0,0,0,,There are man pages on this by the way which
Dialogue: 0,0:51:27.14,0:51:29.02,Chinese,,0,0,0,,关于如何进行 socket 编程有一些文档
Dialogue: 0,0:51:29.72,0:51:33.68,English,,0,0,0,,If you just tried to learn all sockets programming by reading men pages you'd go crazy
Dialogue: 0,0:51:29.72,0:51:33.68,Chinese,,0,0,0,,但如果你想通过读那些东西来学会 socket 编程，你会疯掉的
Dialogue: 0,0:51:33.68,0:51:37.28,English,,0,0,0,,But once you kind of have the idea of it the man pages are pretty useful
Dialogue: 0,0:51:33.68,0:51:37.28,Chinese,,0,0,0,,不过一旦你领悟了 socket 编程，那些文档还是很有用的
Dialogue: 0,0:51:39.82,0:51:41.48,English,,0,0,0,,And then the next part
Dialogue: 0,0:51:39.82,0:51:41.48,Chinese,,0,0,0,,下一部分
Dialogue: 0,0:51:42.82,0:51:48.16,English,,0,0,0,,You'll see,we're looking only now on the server side is called bind
Dialogue: 0,0:51:42.82,0:51:48.16,Chinese,,0,0,0,,我们现在开始讲服务器端的 bind 函数
Dialogue: 0,0:51:50.24,0:51:51.12,English,,0,0,0,,And
Dialogue: 0,0:51:50.24,0:51:51.12,Chinese,,0,0,0,,然后
Dialogue: 0,0:51:58.64,0:52:02.60,English,,0,0,0,,What bind does then is that specific then to a server
Dialogue: 0,0:51:58.64,0:52:02.60,Chinese,,0,0,0,,Bind 函数是服务器上的特殊函数
Dialogue: 0,0:52:03.32,0:52:07.08,English,,0,0,0,,And now this is a make this interfaces to the kernel
Dialogue: 0,0:52:03.32,0:52:07.08,Chinese,,0,0,0,,它在内核态下创建一个接口
Dialogue: 0,0:52:07.10,0:52:10.38,English,,0,0,0,,It says I want to
Dialogue: 0,0:52:07.10,0:52:10.38,Chinese,,0,0,0,,它告诉内核它想要
Dialogue: 0,0:52:20.65,0:52:23.02,English,,0,0,0,,Designate which IP address
Dialogue: 0,0:52:20.65,0:52:23.02,Chinese,,0,0,0,,分配哪个 IP 地址
Dialogue: 0,0:52:24.46,0:52:27.92,English,,0,0,0,,And let me just...
Dialogue: 0,0:52:24.46,0:52:27.92,Chinese,,0,0,0,,让我
Dialogue: 0,0:52:29.10,0:52:32.86,English,,0,0,0,,So I'm going to treat a little bit and let me by making sure I don't say anything that's not true
Dialogue: 0,0:52:29.10,0:52:32.86,Chinese,,0,0,0,,我需要再思考一下，以防我说一些错误的知识
Dialogue: 0,0:52:34.80,0:52:36.54,English,,0,0,0,,Yeah I'm right sorry
Dialogue: 0,0:52:34.80,0:52:36.54,Chinese,,0,0,0,,好的，我是对的
Dialogue: 0,0:52:37.14,0:52:38.36,English,,0,0,0,,I just want to make sure
Dialogue: 0,0:52:37.14,0:52:38.36,Chinese,,0,0,0,,我只是想确保这一点
Dialogue: 0,0:52:39.12,0:52:40.62,English,,0,0,0,,Bind actually
Dialogue: 0,0:52:39.12,0:52:40.62,Chinese,,0,0,0,,Bind 函数实际上
Dialogue: 0,0:52:43.72,0:52:44.42,English,,0,0,0,,Tells you
Dialogue: 0,0:52:43.72,0:52:44.42,Chinese,,0,0,0,,告诉你
Dialogue: 0,0:52:47.20,0:52:48.34,English,,0,0,0,,Oh excuse me
Dialogue: 0,0:52:47.20,0:52:48.34,Chinese,,0,0,0,,不好意思，我漏讲了一个点
Dialogue: 0,0:52:48.92,0:52:52.62,English,,0,0,0,,You'll see that a socket the call to socket returns an int
Dialogue: 0,0:52:48.92,0:52:52.62,Chinese,,0,0,0,,你们会发现 socket 函数返回了一个整形数
Dialogue: 0,0:52:53.30,0:52:57.28,English,,0,0,0,,But it's what it's returning is a file descriptor remember we said that
Dialogue: 0,0:52:53.30,0:52:57.28,Chinese,,0,0,0,,它实际上是一个文件描述符，还记得我们曾经讲过
Dialogue: 0,0:52:57.82,0:53:04.90,English,,0,0,0,,If you refer to a file a low-level file just by an integer id typically a small integer value
Dialogue: 0,0:52:57.82,0:53:04.90,Chinese,,0,0,0,,有一些整数，特别是一些很小的整数，是指代一些底层文件的吗
Dialogue: 0,0:53:05.32,0:53:08.74,English,,0,0,0,,There's some standard ones for standard in,standard out,standard error
Dialogue: 0,0:53:05.32,0:53:08.74,Chinese,,0,0,0,,比如标准输入输出代码和标准错误代码
Dialogue: 0,0:53:09.08,0:53:11.30,English,,0,0,0,,And then beyond that they're just assigned incrementally
Dialogue: 0,0:53:09.08,0:53:11.30,Chinese,,0,0,0,,这些代码递增分配
Dialogue: 0,0:53:12.02,0:53:14.18,English,,0,0,0,,So socket will return a number
Dialogue: 0,0:53:12.02,0:53:14.18,Chinese,,0,0,0,,所以 socket 返回一个数
Dialogue: 0,0:53:14.72,0:53:18.48,English,,0,0,0,,That you then refer used to refer to this as a file
Dialogue: 0,0:53:14.72,0:53:18.48,Chinese,,0,0,0,,你可以通过它找到一个文件
Dialogue: 0,0:53:20.48,0:53:27.44,English,,0,0,0,,So bind then you've pass in that the name of your socket file descriptor
Dialogue: 0,0:53:20.48,0:53:27.44,Chinese,,0,0,0,,所以 bind 函数会调用 socket 函数返回的文件描述符
Dialogue: 0,0:53:27.92,0:53:33.60,English,,0,0,0,,And you provide a whether is a socketaddr int
Dialogue: 0,0:53:27.92,0:53:33.60,Chinese,,0,0,0,,然后你需要提供一个叫 socketaddr 的整形参数
Dialogue: 0,0:53:38.78,0:53:41.62,English,,0,0,0,,SA and I'm using the the notation
Dialogue: 0,0:53:38.78,0:53:41.62,Chinese,,0,0,0,,SA 这个符号
Dialogue: 0,0:53:42.12,0:53:46.50,English,,0,0,0,,SA as a shortcut for sockaddr struct sockaddr
Dialogue: 0,0:53:42.12,0:53:46.50,Chinese,,0,0,0,,是 sockaddr 这个结构体的缩写
Dialogue: 0,0:53:49.56,0:53:52.54,English,,0,0,0,,And then you have to also say what the length of the address is
Dialogue: 0,0:53:49.56,0:53:52.54,Chinese,,0,0,0,,之后你还需要提供地址长度
Dialogue: 0,0:53:52.62,0:53:55.44,English,,0,0,0,,So in the case of IPv4 that would be four
Dialogue: 0,0:53:52.62,0:53:55.44,Chinese,,0,0,0,,IPv4 的例子中那个参数是 4 
Dialogue: 0,0:53:56.42,0:53:59.38,English,,0,0,0,,But you don't usually use that number directly there's a
Dialogue: 0,0:53:56.42,0:53:59.38,Chinese,,0,0,0,,一般情况下你不需要直接用到那个数字
Dialogue: 0,0:54:00.00,0:54:04.24,English,,0,0,0,,We'll talk about it but that top-level call called gedaddr or addrinfo
Dialogue: 0,0:54:00.00,0:54:04.24,Chinese,,0,0,0,,我们之后会讲到一个叫做 getaddr 或是 addrinfo 的函数
Dialogue: 0,0:54:04.24,0:54:11.02,English,,0,0,0,,As a relatively new api that was created and in this addition to the book but not in previous ones
Dialogue: 0,0:54:04.24,0:54:11.02,Chinese,,0,0,0,,它是一个新出现的和 socket 编程有关的 api，这是《CSAPP》最新版中新增的内容，之前的版本中没有
Dialogue: 0,0:54:11.40,0:54:17.44,English,,0,0,0,,Become the now the standard way that you get all the parameters that you're supposed to pass into all these different calls
Dialogue: 0,0:54:11.40,0:54:17.44,Chinese,,0,0,0,,现在你们获得参数的标准方法应该是用各种不同函数为你们提供参数
Dialogue: 0,0:54:18.02,0:54:25.44,English,,0,0,0,,And the idea of it then is it's a pretty small adjustment to then write code that's good for either IPv4 or IPv6
Dialogue: 0,0:54:18.02,0:54:25.44,Chinese,,0,0,0,,这只是一个很小的调整，但它可以使你们的程序更方便的在 IPv4 和 IPv6间切换
Dialogue: 0,0:54:28.48,0:54:33.60,English,,0,0,0,,So you don't normally give the actual number from that you get it from another place and pass in it
Dialogue: 0,0:54:28.48,0:54:33.60,Chinese,,0,0,0,,所以通常你不用直接给出数字，你只需要从其它地方获取它并将其传入
Dialogue: 0,0:54:38.70,0:54:40.02,English,,0,0,0,,So binding then
Dialogue: 0,0:54:38.70,0:54:40.02,Chinese,,0,0,0,,总结一下，bind 函数
Dialogue: 0,0:54:44.74,0:54:47.66,English,,0,0,0,,It's a kernel call
Dialogue: 0,0:54:44.74,0:54:47.66,Chinese,,0,0,0,,是一个内核函数
Dialogue: 0,0:55:03.76,0:55:06.00,English,,0,0,0,,That designates which particular service
Dialogue: 0,0:55:03.76,0:55:06.00,Chinese,,0,0,0,,它指定这个程序
Dialogue: 0,0:55:06.68,0:55:09.36,English,,0,0,0,,This program is going to be hosting
Dialogue: 0,0:55:06.68,0:55:09.36,Chinese,,0,0,0,,到底要运行何种服务
Dialogue: 0,0:55:10.43,0:55:13.66,English,,0,0,0,,Which will be the server for and that's given by its port number
Dialogue: 0,0:55:10.43,0:55:13.66,Chinese,,0,0,0,,这个服务器是用来干嘛的则由端口号确定
Dialogue: 0,0:55:23.88,0:55:26.54,English,,0,0,0,,And then the next step is to
Dialogue: 0,0:55:23.88,0:55:26.54,Chinese,,0,0,0,,下一步是
Dialogue: 0,0:55:27.66,0:55:30.68,English,,0,0,0,,To listen and that's just a call that says
Dialogue: 0,0:55:27.66,0:55:30.68,Chinese,,0,0,0,,调用 listen 函数
Dialogue: 0,0:55:41.02,0:55:47.48,English,,0,0,0,,That will now convert this socket to a listening socket which you need as a server
Dialogue: 0,0:55:41.02,0:55:47.48,Chinese,,0,0,0,,它会把这个 socket 转换到监听状态，服务器需要你这么做
Dialogue: 0,0:55:55.44,0:55:58.56,English,,0,0,0,,So it's a way of telling the kernel that this will be
Dialogue: 0,0:55:55.44,0:55:58.56,Chinese,,0,0,0,,这是一种告诉内核，这将作为
Dialogue: 0,0:56:00.46,0:56:01.60,English,,0,0,0,,Will be a server side
Dialogue: 0,0:56:00.46,0:56:01.60,Chinese,,0,0,0,,服务器端
Dialogue: 0,0:56:07.80,0:56:11.80,English,,0,0,0,,So obviously bind and listen are related ideas
Dialogue: 0,0:56:07.80,0:56:11.80,Chinese,,0,0,0,,很显然，bind 函数和 listen 函数是有关的
Dialogue: 0,0:56:11.94,0:56:18.86,English,,0,0,0,,But you have to do both steps and in that particular order to create a listening socket or one for a server
Dialogue: 0,0:56:11.94,0:56:18.86,Chinese,,0,0,0,,但你必须按这个特定的顺序去执行这两步来创建一个监听 socket
Dialogue: 0,0:56:22.80,0:56:27.24,English,,0,0,0,,And then the final part of that to operate us is to say accept
Dialogue: 0,0:56:22.80,0:56:27.24,Chinese,,0,0,0,,最后一个步骤是调用 accept 函数
Dialogue: 0,0:56:33.46,0:56:34.24,English,,0,0,0,,And
Dialogue: 0,0:56:33.46,0:56:34.24,Chinese,,0,0,0,,然后
Dialogue: 0,0:56:39.68,0:56:45.72,English,,0,0,0,,Oh that means okay now we've established this now I'm actually ready to receive phone calls
Dialogue: 0,0:56:39.68,0:56:45.72,Chinese,,0,0,0,,它表示现在我们已经创建好 socket 了，我们准备好接受一通电话了
Dialogue: 0,0:56:46.24,0:56:49.46,English,,0,0,0,,This is essentially what it says is this is the final step to say
Dialogue: 0,0:56:46.24,0:56:49.46,Chinese,,0,0,0,,这基本就是它想在最后一步表达的意思
Dialogue: 0,0:56:50.08,0:56:53.68,English,,0,0,0,,Okay this one's ready to accept connection requests
Dialogue: 0,0:56:50.08,0:56:53.68,Chinese,,0,0,0,,这边已经准备好接受连接请求了
Dialogue: 0,0:56:54.88,0:56:56.58,English,,0,0,0,,It has a similar
Dialogue: 0,0:56:54.88,0:56:56.58,Chinese,,0,0,0,,它和
Dialogue: 0,0:57:03.00,0:57:05.28,English,,0,0,0,,Set of arguments to socket it's socket
Dialogue: 0,0:57:03.00,0:57:05.28,Chinese,,0,0,0,,socket 函数有一些相同的参数
Dialogue: 0,0:57:06.34,0:57:06.94,English,,0,0,0,,But slight difference
Dialogue: 0,0:57:06.34,0:57:06.94,Chinese,,0,0,0,,但有一些细微的不同
Dialogue: 0,0:57:07.32,0:57:09.96,English,,0,0,0,,And now the interesting thing is accept will return
Dialogue: 0,0:57:07.32,0:57:09.96,Chinese,,0,0,0,,最有趣的是，accept 函数会返回
Dialogue: 0,0:57:10.38,0:57:12.74,English,,0,0,0,,Yet another file descriptor
Dialogue: 0,0:57:10.38,0:57:12.74,Chinese,,0,0,0,,另一个文件描述符
Dialogue: 0,0:57:14.98,0:57:18.60,English,,0,0,0,,So the first file descriptor is the sort of generic
Dialogue: 0,0:57:14.98,0:57:18.60,Chinese,,0,0,0,,第一个文件描述符是一般性的
Dialogue: 0,0:57:21.00,0:57:23.98,English,,0,0,0,,Accept and base basically accept we'll
Dialogue: 0,0:57:21.00,0:57:23.98,Chinese,,0,0,0,,简单来说，accept 函数
Dialogue: 0,0:57:24.54,0:57:28.12,English,,0,0,0,,Just hang there and wait until some client makes a connection
Dialogue: 0,0:57:24.54,0:57:28.12,Chinese,,0,0,0,,一直等待，直到有客户端和服务器建立连接
Dialogue: 0,0:57:29.10,0:57:33.86,English,,0,0,0,,And when it does then it will set up a new socket
Dialogue: 0,0:57:29.10,0:57:33.86,Chinese,,0,0,0,,这时，它会新建一个 socket
Dialogue: 0,0:57:35.98,0:57:42.82,English,,0,0,0,,And a new with a new file descriptor that then the server communicates to the client via that one
Dialogue: 0,0:57:35.98,0:57:42.82,Chinese,,0,0,0,,它指向一个新的文件描述符，服务器通过它于客户端通信
Dialogue: 0,0:57:42.90,0:57:46.24,English,,0,0,0,,And I'll talk about why it's a different file descriptor in just a second
Dialogue: 0,0:57:42.90,0:57:46.24,Chinese,,0,0,0,,我很快会讲为什么这是两种不同的文件描述符
Dialogue: 0,0:57:47.88,0:57:54.28,English,,0,0,0,,Okay over on the client side goes through similar steps of socket
Dialogue: 0,0:57:47.88,0:57:54.28,Chinese,,0,0,0,,好的，在客户端这边也有调用 socket 函数这一步
Dialogue: 0,0:57:54.28,0:57:58.18,English,,0,0,0,,But it doesn't have to bind or listen or accept because this is a client
Dialogue: 0,0:57:54.28,0:57:58.18,Chinese,,0,0,0,,但没有调用 bind 函数，listen 函数或是 accept 函数的步骤，因为这是客户端
Dialogue: 0,0:57:58.72,0:58:02.10,English,,0,0,0,,And instead what it does is it makes a call to connect
Dialogue: 0,0:57:58.72,0:58:02.10,Chinese,,0,0,0,,相反，它会调用一个函数去请求连接
Dialogue: 0,0:58:06.14,0:58:07.40,English,,0,0,0,,So let me finish this off
Dialogue: 0,0:58:06.14,0:58:07.40,Chinese,,0,0,0,,先让我把服务器上执行的步骤写下来
Dialogue: 0,0:58:22.48,0:58:24.82,English,,0,0,0,,So these are all on this the server side
Dialogue: 0,0:58:22.48,0:58:24.82,Chinese,,0,0,0,,那么这些就是服务器上执行的所有操作
Dialogue: 0,0:58:32.42,0:58:33.80,English,,0,0,0,,And on the client side
Dialogue: 0,0:58:32.42,0:58:33.80,Chinese,,0,0,0,,然后在客户端上
Dialogue: 0,0:58:37.00,0:58:39.22,English,,0,0,0,,It will make a call to connect
Dialogue: 0,0:58:37.00,0:58:39.22,Chinese,,0,0,0,,它会用一个函数来
Dialogue: 0,0:58:43.98,0:58:49.38,English,,0,0,0,,From a client side is to set up a connection to server
Dialogue: 0,0:58:43.98,0:58:49.38,Chinese,,0,0,0,,创建一个从客户端到服务器的连接
Dialogue: 0,0:59:05.84,0:59:06.84,English,,0,0,0,,And so
Dialogue: 0,0:59:05.84,0:59:06.84,Chinese,,0,0,0,,然后
Dialogue: 0,0:59:16.30,0:59:20.44,English,,0,0,0,,Its arguments it's a little easier to understand how connect to work
Dialogue: 0,0:59:16.30,0:59:20.44,Chinese,,0,0,0,,这会使你更容易理解连接是如何工作的
Dialogue: 0,0:59:21.84,0:59:22.78,English,,0,0,0,,So in particular
Dialogue: 0,0:59:21.84,0:59:22.78,Chinese,,0,0,0,,在个别情况下
Dialogue: 0,0:59:24.32,0:59:28.68,English,,0,0,0,,The call to socket that was made before hand returns a file descriptor
Dialogue: 0,0:59:24.32,0:59:28.68,Chinese,,0,0,0,,socket 函数在文件描述符返回前就被调用了
Dialogue: 0,0:59:29.16,0:59:34.30,English,,0,0,0,,And what this says is I want to on that particular using that particular socket
Dialogue: 0,0:59:29.16,0:59:34.30,Chinese,,0,0,0,,这是因为我想要用一个特定的 socket 连接
Dialogue: 0,0:59:34.80,0:59:39.66,English,,0,0,0,,Connect to this gives a combination of an address and a port number
Dialogue: 0,0:59:34.80,0:59:39.66,Chinese,,0,0,0,,来连接一组特定的 IP 地址和端口号的组合
Dialogue: 0,0:59:40.58,0:59:44.74,English,,0,0,0,,And it has to give this address length which I said like I said as before
Dialogue: 0,0:59:40.58,0:59:44.74,Chinese,,0,0,0,,它需要这个地址的长度，就像我之前说的
Dialogue: 0,0:59:44.74,0:59:50.26,English,,0,0,0,,It's usually that number is filled in using the return value of of getaddrinfo
Dialogue: 0,0:59:44.74,0:59:50.26,Chinese,,0,0,0,,那个数字由 getaddrinfo 函数提供
Dialogue: 0,0:59:52.94,0:59:55.72,English,,0,0,0,,But that's sort of the equivalent of pass in the call then
Dialogue: 0,0:59:52.94,0:59:55.72,Chinese,,0,0,0,,但这就相当于传递函数
Dialogue: 0,0:59:57.42,1:00:00.14,English,,0,0,0,,And it returns just a code which is
Dialogue: 0,0:59:57.42,1:00:00.14,Chinese,,0,0,0,,它会返回一个数字
Dialogue: 0,1:00:00.98,1:00:02.94,English,,0,0,0,,Whether the connection was successful or not
Dialogue: 0,1:00:00.98,1:00:02.94,Chinese,,0,0,0,,代表这个连接是否成功建立
Dialogue: 0,1:00:06.40,1:00:10.44,English,,0,0,0,,So let me just talk about these different ports and
Dialogue: 0,1:00:06.40,1:00:10.44,Chinese,,0,0,0,,那么让我讲讲这些不同的端口以及
Dialogue: 0,1:00:11.02,1:00:12.68,English,,0,0,0,,What it all means when you set up a connection
Dialogue: 0,1:00:11.02,1:00:12.68,Chinese,,0,0,0,,当你创建连接时它们在做什么
Dialogue: 0,1:00:13.32,1:00:14.64,English,,0,0,0,,So when the
Dialogue: 0,1:00:13.32,1:00:14.64,Chinese,,0,0,0,,那么，当
Dialogue: 0,1:00:15.94,1:00:18.66,English,,0,0,0,,The server went through bind and listen
Dialogue: 0,1:00:15.94,1:00:18.66,Chinese,,0,0,0,,服务器在调用 bind 函数和 listen 函数时
Dialogue: 0,1:00:19.84,1:00:22.64,English,,0,0,0,,It created a listening port from that
Dialogue: 0,1:00:19.84,1:00:22.64,Chinese,,0,0,0,,它创建了一个监听端口
Dialogue: 0,1:00:23.60,1:00:26.94,English,,0,0,0,,Which is the one that it's listening for connection requests on
Dialogue: 0,1:00:23.60,1:00:26.94,Chinese,,0,0,0,,用于监听是否有连接请求
Dialogue: 0,1:00:27.94,1:00:36.82,English,,0,0,0,,And then the client when it called socket it was given a particular file descriptor for that socket
Dialogue: 0,1:00:27.94,1:00:36.82,Chinese,,0,0,0,,而当客户端调用 socket 函数时，它会创建一个对应那个特定 socket 连接的文件描述符
Dialogue: 0,1:00:37.94,1:00:39.88,English,,0,0,0,,And it sends out a connection request
Dialogue: 0,1:00:37.94,1:00:39.88,Chinese,,0,0,0,,并发出一个连接请求
Dialogue: 0,1:00:40.74,1:00:42.78,English,,0,0,0,,That goes out over the network
Dialogue: 0,1:00:40.74,1:00:42.78,Chinese,,0,0,0,,那个请求通过网络传输
Dialogue: 0,1:00:43.46,1:00:53.06,English,,0,0,0,,And lands at the server and then the kernel hands that off to the program that's running on that particular port
Dialogue: 0,1:00:43.46,1:00:53.06,Chinese,,0,0,0,,最终到达服务器上，之后内核会把它交给运行在那个特定端口上的程序
Dialogue: 0,1:00:53.82,1:01:00.96,English,,0,0,0,,And hands it off to the that call will be handled by the accept
Dialogue: 0,1:01:02.02,1:01:04.40,English,,0,0,0,,Call to accept by the server
Dialogue: 0,1:01:06.44,1:01:12.38,English,,0,0,0,,And then as I mentioned except actually returns a new file descriptor
Dialogue: 0,1:01:12.90,1:01:18.84,English,,0,0,0,,Which the server will then use as its connection point to this particular client
Dialogue: 0,1:01:19.50,1:01:23.58,English,,0,0,0,,And the theory of that is you want to be able to in general
Dialogue: 0,1:01:24.10,1:01:27.94,English,,0,0,0,,As a server be handling multiple clients at the same time
Dialogue: 0,1:01:28.48,1:01:35.02,English,,0,0,0,,But if I'm communicating with Google or amazon
Dialogue: 0,1:01:36.76,1:01:39.00,English,,0,0,0,,You should be able to do so at the same time
Dialogue: 0,1:01:39.10,1:01:43.96,English,,0,0,0,,So you want a possibility of from a single host to be able to serve multiple clients
Dialogue: 0,1:01:44.08,1:01:51.84,English,,0,0,0,,And that's why they're all assigned different file descriptors at the server end for that particular connection
Dialogue: 0,1:01:52.22,1:01:57.88,English,,0,0,0,,So you can think of it as the listening file descriptor is just listening for incoming requests for connections
Dialogue: 0,1:01:58.50,1:02:01.70,English,,0,0,0,,But once it sets up a session and communicates back and forth
Dialogue: 0,1:02:02.30,1:02:08.12,English,,0,0,0,,Those are going through different ports on the server side of things or different file descriptors I'm sorry
Dialogue: 0,1:02:08.96,1:02:10.70,English,,0,0,0,,Same port different file descriptors
Dialogue: 0,1:02:11.42,1:02:14.56,English,,0,0,0,,From the software that's running on the server
Dialogue: 0,1:02:22.44,1:02:27.80,English,,0,0,0,,Okay and then during the actual communication then as I mentioned it uses reads and writes
Dialogue: 0,1:02:27.90,1:02:30.90,English,,0,0,0,,As a way to send and receive messages
Dialogue: 0,1:02:31.28,1:02:34.02,English,,0,0,0,,And that goes on for as long as
Dialogue: 0,1:02:34.70,1:02:41.60,English,,0,0,0,,You know and according to whatever low level particular protocol is being supported by this application
Dialogue: 0,1:02:46.14,1:02:47.10,English,,0,0,0,,And then
Dialogue: 0,1:02:49.44,1:02:51.60,English,,0,0,0,,In the end then when the client the
Dialogue: 0,1:02:52.14,1:02:54.60,English,,0,0,0,,Client is done it causes a request
Dialogue: 0,1:02:55.28,1:03:01.62,English,,0,0,0,,And what that looks like from the server end is it tries to read from a file
Dialogue: 0,1:03:01.94,1:03:04.68,English,,0,0,0,,And it receives an end of file a signal instead
Dialogue: 0,1:03:07.18,1:03:11.76,English,,0,0,0,,And that tells the server okay this particular connection is gone
Dialogue: 0,1:03:12.50,1:03:13.18,English,,0,0,0,,And so
Dialogue: 0,1:03:14.38,1:03:20.78,English,,0,0,0,,Now it will close that particular one as this picture shows here
Dialogue: 0,1:03:22.50,1:03:25.70,English,,0,0,0,,Potentially the server could loop back around
Dialogue: 0,1:03:26.90,1:03:30.22,English,,0,0,0,,And accept a connection from another program and in fact
Dialogue: 0,1:03:30.80,1:03:35.34,English,,0,0,0,,This can be done,this is what we call a serial or a internet
Dialogue: 0,1:03:37.70,1:03:42.28,English,,0,0,0,,A serial server where can only manage one connection request at a time
Dialogue: 0,1:03:42.84,1:03:47.52,English,,0,0,0,,And when we get later in the course and we stock talk about multi threading
Dialogue: 0,1:03:48.10,1:03:53.44,English,,0,0,0,,We'll be able to set it up,so this thing can start accepting requests for another connection
Dialogue: 0,1:03:53.84,1:03:57.08,English,,0,0,0,,Even while it's handling one particular client
Dialogue: 0,1:03:58.52,1:04:02.46,English,,0,0,0,,But anyways what it will look like is the server will read
Dialogue: 0,1:04:02.60,1:04:06.48,English,,0,0,0,,The attempt to read that we'll get an end of file it will close that particular connection
Dialogue: 0,1:04:06.98,1:04:10.26,English,,0,0,0,,And it will go back and it will accept a new connection from a new client
Dialogue: 0,1:04:13.54,1:04:19.80,English,,0,0,0,,Okay I'm going to jump ahead and actually start talking about some slides from
Dialogue: 0,1:04:20.44,1:04:25.58,English,,0,0,0,,That we're if you look online they're actually from a Thursday's lecture  because
Dialogue: 0,1:04:26.06,1:04:29.28,English,,0,0,0,,There's a lot of ground to cover in that lecture and I'd like to get a little head start
Dialogue: 0,1:04:31.66,1:04:33.36,English,,0,0,0,,So I mentioned this
Dialogue: 0,1:04:34.48,1:04:43.48,English,,0,0,0,,This function called get a door info which is sort of the modern way in C at least to find information about
Dialogue: 0,1:04:43.86,1:04:47.72,English,,0,0,0,,That deals with all the funkiness of host names host addresses
Dialogue: 0,1:04:48.14,1:04:52.76,English,,0,0,0,,All the conventions about ports and some of these various structures and things like that
Dialogue: 0,1:04:54.02,1:04:57.18,English,,0,0,0,,And the advantage of doing it this way instead of the old way
Dialogue: 0,1:04:57.78,1:05:04.82,English,,0,0,0,,Is first of all now it sort of unifies IPv4 and IPv6 have very similar looking interfaces
Dialogue: 0,1:05:05.24,1:05:08.02,English,,0,0,0,,And it's fairly easy to write code that can handle either
Dialogue: 0,1:05:08.56,1:05:14.36,English,,0,0,0,,And the other was there is problems with these old ones that they were designed in an ear before multi-threading
Dialogue: 0,1:05:15.06,1:05:18.42,English,,0,0,0,,And so they have various statically allocated buffers
Dialogue: 0,1:05:18.44,1:05:24.74,English,,0,0,0,,Which gave a lot of bad conditions that you had to watch out for in writing code
Dialogue: 0,1:05:24.74,1:05:27.46,English,,0,0,0,,And we're prone to errors of various sorts
Dialogue: 0,1:05:28.04,1:05:33.96,English,,0,0,0,,And so this new format it's actually harder to use in many levels
Dialogue: 0,1:05:35.86,1:05:39.04,English,,0,0,0,,Because it can't hide away as many details as it used to
Dialogue: 0,1:05:39.04,1:05:42.16,English,,0,0,0,,But it has the advantage it works better in a multi-threaded environment
Dialogue: 0,1:05:43.12,1:05:49.86,English,,0,0,0,,The other thing that makes it hard is it's trying to be sort of the kitchen sink of protocol managers
Dialogue: 0,1:05:49.92,1:05:53.26,English,,0,0,0,,And that makes it a little bit nasty and messy
Dialogue: 0,1:05:54.34,1:05:59.22,English,,0,0,0,,And so we're only going to sort of focus in on the parts that we really need to make use of for this course
Dialogue: 0,1:06:02.92,1:06:05.96,English,,0,0,0,,So in particular there's this function called getaddrinfo
Dialogue: 0,1:06:06.68,1:06:11.14,English,,0,0,0,,Where the information you're passing is a host
Dialogue: 0,1:06:11.94,1:06:19.32,English,,0,0,0,,Which can be either a...it's a string as it shows most these are care stars are actual real strings not fake strings
Dialogue: 0,1:06:20.02,1:06:22.88,English,,0,0,0,,It used to be back in the old days
Dialogue: 0,1:06:23.30,1:06:26.78,English,,0,0,0,,You use char* of generic pointer because there weren't void*
Dialogue: 0,1:06:26.88,1:06:28.24,English,,0,0,0,,But these are actual strings
Dialogue: 0,1:06:28.80,1:06:34.42,English,,0,0,0,,So you give the name like the domain name of a host or you can give the dotted decimal name
Dialogue: 0,1:06:34.94,1:06:41.44,English,,0,0,0,,But written as you know sequence of characters one to eight dot so forth
Dialogue: 0,1:06:42.24,1:06:48.12,English,,0,0,0,,A service for example that this is IPv4 TCP service
Dialogue: 0,1:06:48.56,1:06:54.24,English,,0,0,0,,Some other information that's associated with this particular connection they refer to as hints
Dialogue: 0,1:06:54.28,1:06:57.66,English,,0,0,0,,Because again this is trying to be a very generic looking call
Dialogue: 0,1:06:58.16,1:07:05.62,English,,0,0,0,,And then you pass it in a pointer and it will fill in and return back a pointer to a data structure
Dialogue: 0,1:07:05.94,1:07:09.42,English,,0,0,0,,Which is essentially the way it's returning results back to you
Dialogue: 0,1:07:10.24,1:07:17.08,English,,0,0,0,,And then associated with that is a called free adder info that will then deallocate this space
Dialogue: 0,1:07:17.82,1:07:21.96,English,,0,0,0,,That's used by this data structure from the result
Dialogue: 0,1:07:22.62,1:07:27.32,English,,0,0,0,,And then there's one called getaddrinfo string error
Dialogue: 0,1:07:27.68,1:07:34.28,English,,0,0,0,,Which lets you interpret the various error codes that get created by this routine of the value that it returns
Dialogue: 0,1:07:36.14,1:07:36.82,English,,0,0,0,,So
Dialogue: 0,1:07:37.98,1:07:40.48,English,,0,0,0,,Let's just look a little about this and
Dialogue: 0,1:07:41.82,1:07:46.44,English,,0,0,0,,So the result that's returned by getaddrinfo is a link twist
Dialogue: 0,1:07:48.40,1:07:52.74,English,,0,0,0,,Oh that is null terminated just like...most link lists are
Dialogue: 0,1:07:53.38,1:07:59.72,English,,0,0,0,,Where it gives some combination of the name
Dialogue: 0,1:08:00.60,1:08:02.38,English,,0,0,0,,Of this particular
Dialogue: 0,1:08:05.68,1:08:10.20,English,,0,0,0,,Some naming information for the first top-level one is the
Dialogue: 0,1:08:10.38,1:08:15.38,English,,0,0,0,,What I showed you the canonical name for this particular IP address
Dialogue: 0,1:08:16.54,1:08:20.74,English,,0,0,0,,And then it gives some address information which is
Dialogue: 0,1:08:21.60,1:08:27.92,English,,0,0,0,,You know an IPv4 them that will encode the IP address
Dialogue: 0,1:08:28.40,1:08:31.16,English,,0,0,0,,And as a next pointer to change this link list together
Dialogue: 0,1:08:31.74,1:08:35.50,English,,0,0,0,,And so this is actually one interesting thing about this is it sort of...
Dialogue: 0,1:08:35.94,1:08:43.56,English,,0,0,0,,This link voice together many too many mapping potentially of of names
Dialogue: 0,1:08:43.58,1:08:46.40,English,,0,0,0,,So if I give for example google.com
Dialogue: 0,1:08:46.86,1:08:48.92,English,,0,0,0,,It will return a link list of all
Dialogue: 0,1:08:49.50,1:08:54.38,English,,0,0,0,,However many or you saw with twitter it was returning about four different addresses
Dialogue: 0,1:08:54.40,1:08:59.60,English,,0,0,0,,So this will return actually five missed entries the first will be the canonical name
Dialogue: 0,1:08:59.98,1:09:03.58,English,,0,0,0,,And then it will give each of the four IP addresses
Dialogue: 0,1:09:04.14,1:09:07.06,English,,0,0,0,,That's relevant at this particular time
Dialogue: 0,1:09:08.64,1:09:10.68,English,,0,0,0,,And then you as a programmer
Dialogue: 0,1:09:11.26,1:09:15.34,English,,0,0,0,,Then sort of walk this list you step down this list and typically
Dialogue: 0,1:09:15.90,1:09:18.74,English,,0,0,0,,Try to use each address one after the other
Dialogue: 0,1:09:19.18,1:09:24.98,English,,0,0,0,,And if you fail on one then you try the next and try the next until you hit the end of the list and then you say loops
Dialogue: 0,1:09:25.36,1:09:26.00,English,,0,0,0,,Can't do it
Dialogue: 0,1:09:28.78,1:09:31.24,English,,0,0,0,,And that goes whether you're writing a client or a server
Dialogue: 0,1:09:33.48,1:09:35.44,English,,0,0,0,,So that addrinfo
Dialogue: 0,1:09:36.74,1:09:38.50,English,,0,0,0,,Let's look back at what that is
Dialogue: 0,1:09:40.66,1:09:42.28,English,,0,0,0,,Oh so
Dialogue: 0,1:09:43.62,1:09:49.44,English,,0,0,0,,Addrinfo then is what gets returned is a list of addrinfo struct
Dialogue: 0,1:09:50.84,1:09:54.04,English,,0,0,0,,And so the addrinfo struck contains various fields
Dialogue: 0,1:09:56.66,1:10:05.40,English,,0,0,0,,Which talks about what type of data is here
Dialogue: 0,1:10:05.86,1:10:07.42,English,,0,0,0,,What type of socket is it
Dialogue: 0,1:10:08.88,1:10:15.24,English,,0,0,0,,What its canonical name is how long are its addresses you saw that it's an argument to some of the calls
Dialogue: 0,1:10:16.40,1:10:19.66,English,,0,0,0,,A pointer to a sockaddr struct
Dialogue: 0,1:10:20.26,1:10:24.28,English,,0,0,0,,That's the way that is encoded for IPv
Dialogue: 0,1:10:24.98,1:10:29.52,English,,0,0,0,,What we've already seen sock adders is a sort of low-level data structure that gets used
Dialogue: 0,1:10:29.98,1:10:32.80,English,,0,0,0,,And then an next pointer to chain the link list together
Dialogue: 0,1:10:33.34,1:10:36.16,English,,0,0,0,,And so you'll see some of these are the arguments
Dialogue: 0,1:10:36.16,1:10:41.70,English,,0,0,0,,That then you will use to pass into the other functions like bind and with list links and connect
Dialogue: 0,1:10:47.36,1:10:50.40,English,,0,0,0,,And then there's another version called getnameinfo
Dialogue: 0,1:10:51.32,1:10:53.62,English,,0,0,0,,Which you use when you've got an IP address
Dialogue: 0,1:10:53.80,1:10:56.88,English,,0,0,0,,And you want to find what is its domain name
Dialogue: 0,1:10:57.50,1:11:01.36,English,,0,0,0,,And because you remember that mapping is also potentially a one-to-many
Dialogue: 0,1:11:01.36,1:11:03.96,English,,0,0,0,,There can be multiple domain names associated with it
Dialogue: 0,1:11:04.94,1:11:11.64,English,,0,0,0,,And so it has a similar general thing
Dialogue: 0,1:11:11.70,1:11:14.00,English,,0,0,0,,We'll just look right now it getaddrinfo
Dialogue: 0,1:11:16.04,1:11:22.42,English,,0,0,0,,So just as an example of how you'd write code to make use of this
Dialogue: 0,1:11:22.42,1:11:26.26,English,,0,0,0,,Essentially just as a way of probing the DNS server
Dialogue: 0,1:11:27.18,1:11:31.84,English,,0,0,0,,Is I want to set up an argument a call to getaddrinfo
Dialogue: 0,1:11:32.36,1:11:36.12,English,,0,0,0,,Where the string I'm going to pass the name is
Dialogue: 0,1:11:36.12,1:11:41.48,English,,0,0,0,,Whatever I type in there to this application to main
Dialogue: 0,1:11:42.80,1:11:52.30,English,,0,0,0,,And it just for hints just passes a bunch of zeros
Dialogue: 0,1:11:53.68,1:12:00.24,English,,0,0,0,,And listp again these are this will just be a pointers
Dialogue: 0,1:12:00.30,1:12:02.48,English,,0,0,0,,That I haven't actually
Dialogue: 0,1:12:09.16,1:12:12.94,English,,0,0,0,,Oh okay so you'll notice hints is actually a struct itself
Dialogue: 0,1:12:13.54,1:12:18.36,English,,0,0,0,,Whereas listp and *p are just listsp andp are just pointers to structs
Dialogue: 0,1:12:18.38,1:12:19.94,English,,0,0,0,,They don't have any allocated data
Dialogue: 0,1:12:20.48,1:12:23.66,English,,0,0,0,,So the hints I'm just going to fill in that struct with all zeros
Dialogue: 0,1:12:24.02,1:12:26.30,English,,0,0,0,,Because I don't really need to provide any hints
Dialogue: 0,1:12:27.68,1:12:32.70,English,,0,0,0,,I am telling it that I want an IPv6 TCP connection here
Dialogue: 0,1:12:34.54,1:12:35.94,English,,0,0,0,,And then
Dialogue: 0,1:12:36.32,1:12:38.80,English,,0,0,0,,So what it will do is it will return back
Dialogue: 0,1:12:39.84,1:12:41.62,English,,0,0,0,,What returns an error code
Dialogue: 0,1:12:41.96,1:12:45.36,English,,0,0,0,,But it will fill in returned to me a pointer
Dialogue: 0,1:12:45.82,1:12:49.58,English,,0,0,0,,To a this link twist data structure I showed before
Dialogue: 0,1:12:52.76,1:12:54.96,English,,0,0,0,,And now I can step through that list
Dialogue: 0,1:12:55.94,1:13:03.24,English,,0,0,0,,Using standard linked list code and make calls to the getnameinfo function which will return back domain names
Dialogue: 0,1:13:07.38,1:13:13.76,English,,0,0,0,,And then when it's all done I have to free up that whisk that got returned otherwise all great memory stuff
Dialogue: 0,1:13:14.78,1:13:16.66,English,,0,0,0,,So just as a demo
Dialogue: 0,1:13:26.98,1:13:27.92,English,,0,0,0,,What I'm
Dialogue: 0,1:13:31.60,1:13:32.86,English,,0,0,0,,On oh host info sorry
Dialogue: 0,1:13:38.24,1:13:41.38,English,,0,0,0,,Ah so you can think of it this is like
Dialogue: 0,1:13:42.70,1:13:47.16,English,,0,0,0,,A not very fancy implementation of nslookup
Dialogue: 0,1:13:49.34,1:13:54.04,English,,0,0,0,,So the kind of stuff we already saw before but let's
Dialogue: 0,1:13:58.50,1:14:02.80,English,,0,0,0,,All it's returning are the different addresses and one of the things that I found curious is
Dialogue: 0,1:14:04.04,1:14:06.68,English,,0,0,0,,It returns them in the same order all the time
Dialogue: 0,1:14:09.82,1:14:12.78,English,,0,0,0,,Instead of within a slow cup it kept changing it
Dialogue: 0,1:14:13.50,1:14:15.94,English,,0,0,0,,And I think that has to do with caching
Dialogue: 0,1:14:24.48,1:14:25.68,English,,0,0,0,,No that changed
Dialogue: 0,1:14:28.36,1:14:31.54,English,,0,0,0,,I know it's kind of interesting if it's
Dialogue: 0,1:14:32.28,1:14:36.98,English,,0,0,0,,It you might want to play with this code, it's kind of you can see what's going on in different places
Dialogue: 0,1:14:44.02,1:14:47.10,English,,0,0,0,,And so you can see though that it's
Dialogue: 0,1:14:47.52,1:14:50.40,English,,0,0,0,,Basically getting the same kind of information
Dialogue: 0,1:14:50.68,1:14:55.46,English,,0,0,0,,That you would from nslookup it's really just creating the DNS server to do this
Dialogue: 0,1:14:56.60,1:14:59.22,English,,0,0,0,,But that's the start of what some of this code looks like
Dialogue: 0,1:15:10.52,1:15:12.32,English,,0,0,0,,One of the things you
Dialogue: 0,1:15:12.44,1:15:16.78,English,,0,0,0,,By the way when you're writing your own code,you often make use of what's called localhost
Dialogue: 0,1:15:17.36,1:15:20.48,English,,0,0,0,,And that always just refers to the machine that you're running on it
Dialogue: 0,1:15:20.50,1:15:22.88,English,,0,0,0,,Always has this particular IP address
Dialogue: 0,1:15:22.98,1:15:27.00,English,,0,0,0,,So that address just refers to the machine and as a programmer
Dialogue: 0,1:15:27.54,1:15:29.58,English,,0,0,0,,You do all your testing on one machine
Dialogue: 0,1:15:29.96,1:15:34.56,English,,0,0,0,,You just set up both the client and the server on the same machine and play with it so
Dialogue: 0,1:15:35.60,1:15:40.12,English,,0,0,0,,Localhost is a very useful way of doing code development
Dialogue: 0,1:15:42.88,1:15:47.80,English,,0,0,0,,And if this shows you can request host info for others
Dialogue: 0,1:15:50.06,1:15:52.80,English,,0,0,0,,Thanksgiving and you can also by the way
Dialogue: 0,1:15:58.48,1:16:00.86,English,,0,0,0,,Always give a dotted decimal address
Dialogue: 0,1:16:08.78,1:16:10.04,English,,0,0,0,,And I'm just making it up here
Dialogue: 0,1:16:11.54,1:16:14.64,English,,0,0,0,,What and it's not very interesting because it returns back the same address
Dialogue: 0,1:16:17.84,1:16:19.94,English,,0,0,0,,It's more interesting to run nslookup on that
Dialogue: 0,1:16:27.82,1:16:28.68,English,,0,0,0,,So
Dialogue: 0,1:16:29.76,1:16:32.16,English,,0,0,0,,That just gives you a sense
Dialogue: 0,1:16:32.46,1:16:36.90,English,,0,0,0,,And as you've seen this code is pretty messy stuff to work with there's a lot of struck
Dialogue: 0,1:16:36.98,1:16:40.31,English,,0,0,0,,So you have to initialize,you don't initialize you pass pointers
Dialogue: 0,1:16:40.68,1:16:42.72,English,,0,0,0,,And so the code always looks a bit crufty
Dialogue: 0,1:16:42.72,1:16:46.82,English,,0,0,0,,But that sort of the the interfaces it exists
Dialogue: 0,1:16:47.16,1:16:49.12,English,,0,0,0,,And you'll just have to get somewhat comfortable with it
Dialogue: 0,1:16:49.74,1:16:53.32,English,,0,0,0,,So that will do us for today then thanks
