[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: csapp/Lecture 16 System Level I-O.mp4
Video File: csapp/Lecture 16 System Level I-O.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 1.125000
Scroll Position: 1301
Active Line: 1317
Video Position: 106595

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: English,Noto Sans CJK SC Black,30,&H00FFFFFF,&H00412A2C,&H00412A2C,&H00412A2C,0,0,0,0,100,100,0,0,1,1.5,1.2,2,10,10,10,1
Style: Chinese,Noto Sans CJK SC Black,40,&H00FFFF00,&H00FFFFFF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1.2,1.2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:02.00,English,,0,0,0,,Good afternoon everyone
Dialogue: 0,0:00:00.00,0:00:02.00,Chinese,,0,0,0,,大家下午好
Dialogue: 0,0:00:03.10,0:00:07.70,English,,0,0,0,,So I apologize I have to I'm going to sit mostly through this lecture
Dialogue: 0,0:00:03.10,0:00:07.70,Chinese,,0,0,0,,抱歉这节课我可能大部分时间都得坐着讲
Dialogue: 0,0:00:07.70,0:00:10.00,English,,0,0,0,,I managed to do something to my knee yesterday
Dialogue: 0,0:00:07.70,0:00:10.00,Chinese,,0,0,0,,昨天我的膝盖出了点问题
Dialogue: 0,0:00:10.05,0:00:13.12,English,,0,0,0,,And I'm having trouble moving around very much
Dialogue: 0,0:00:10.05,0:00:13.12,Chinese,,0,0,0,,所以不便过多走动
Dialogue: 0,0:00:13.86,0:00:18.56,English,,0,0,0,,But today what we're going to talk about is input/output
Dialogue: 0,0:00:13.86,0:00:18.56,Chinese,,0,0,0,,今天我们要讨论的话题是输入/输出
Dialogue: 0,0:00:18.60,0:00:23.52,English,,0,0,0,,What it looks like from the programmers' perspective
Dialogue: 0,0:00:18.60,0:00:23.52,Chinese,,0,0,0,,我们要从程序员的角度来讨论这个话题
Dialogue: 0,0:00:24.62,0:00:33.72,English,,0,0,0,,And this is a you've already learned sort of a lot of the standard Unix libraries for like printf and scanf
Dialogue: 0,0:00:24.62,0:00:33.72,Chinese,,0,0,0,,大家已经学过很多标准的 Unix 库，如 printf 和 scanf
Dialogue: 0,0:00:34.26,0:00:37.30,English,,0,0,0,,And those routines and we'll talk about them a little but
Dialogue: 0,0:00:34.26,0:00:37.30,Chinese,,0,0,0,,以及例程等，我们这节课也会有所涉及
Dialogue: 0,0:00:37.68,0:00:40.68,English,,0,0,0,,What we'll first talk about is actually lower level I/O
Dialogue: 0,0:00:37.68,0:00:40.68,Chinese,,0,0,0,,我们今天首先要讲的是低级 I/O
Dialogue: 0,0:00:40.68,0:00:44.40,English,,0,0,0,,Stuff that is directly interfacing to the operating system
Dialogue: 0,0:00:40.68,0:00:44.40,Chinese,,0,0,0,,这些是直接面向操作系统的接口
Dialogue: 0,0:00:45.26,0:00:47.94,English,,0,0,0,,And this is what you're going to need to learn about
Dialogue: 0,0:00:45.26,0:00:47.94,Chinese,,0,0,0,,也是大家要学的内容
Dialogue: 0,0:00:48.78,0:00:55.82,English,,0,0,0,,Partly some of this material you're going to need for the next lab that comes out at midnight tonight the Shell Lab
Dialogue: 0,0:00:48.78,0:00:55.82,Chinese,,0,0,0,,其中有些是将于今晚 12 点开放的 Shell Lab 中需要用到的
Dialogue: 0,0:00:56.48,0:00:58.32,English,,0,0,0,,And you'll need to
Dialogue: 0,0:00:56.48,0:00:58.32,Chinese,,0,0,0,,而且
Dialogue: 0,0:00:58.96,0:01:07.72,English,,0,0,0,,Also you'll be revisiting this at several other labs along the course including the final lab, the Web Proxy Lab
Dialogue: 0,0:00:58.96,0:01:07.72,Chinese,,0,0,0,,之后的其他几个实验也要用到本节课的内容，包括最后的 Web Proxy Lab 实验
Dialogue: 0,0:01:07.86,0:01:17.08,English,,0,0,0,,So this is sort of where we're really digging down deeply into this type of programming you do
Dialogue: 0,0:01:07.86,0:01:17.08,Chinese,,0,0,0,,我们有必要对此进行深入研究
Dialogue: 0,0:01:17.08,0:01:23.54,English,,0,0,0,,If you're writing system software things that are very just barely above the operating system level
Dialogue: 0,0:01:17.08,0:01:23.54,Chinese,,0,0,0,,这有助于大家编写级别略高于操作系统的系统软件
Dialogue: 0,0:01:24.00,0:01:32.38,English,,0,0,0,,And I know for myself learning this material I actually learned this material from 213
Dialogue: 0,0:01:24.00,0:01:32.38,Chinese,,0,0,0,,这些内容我是从课程 213 学的
Dialogue: 0,0:01:32.38,0:01:36.50,English,,0,0,0,,My co-author David O'Halloran is one who knew this stuff already
Dialogue: 0,0:01:32.38,0:01:36.50,Chinese,,0,0,0,,我的合著者 David O'Halloran 对此非常熟悉
Dialogue: 0,0:01:36.78,0:01:38.12,English,,0,0,0,,He wrote that part of the book
Dialogue: 0,0:01:36.78,0:01:38.12,Chinese,,0,0,0,,他编写了书中的相关部分
Dialogue: 0,0:01:38.46,0:01:40.74,English,,0,0,0,,I learned it by reading the book just like you are
Dialogue: 0,0:01:38.46,0:01:40.74,Chinese,,0,0,0,,我也像大家一样，通过这本书学习这些
Dialogue: 0,0:01:41.04,0:01:46.14,English,,0,0,0,,But I found it actually very useful to know a variety of different other situations
Dialogue: 0,0:01:41.04,0:01:46.14,Chinese,,0,0,0,,我觉得能够了解这些不同的情形
Dialogue: 0,0:01:46.14,0:01:47.51,English,,0,0,0,,I've been in the meantime
Dialogue: 0,0:01:46.14,0:01:47.51,Chinese,,0,0,0,,是很有用的
Dialogue: 0,0:01:47.51,0:01:52.56,English,,0,0,0,,This is quite a few years ago and so I think it's worth understanding
Dialogue: 0,0:01:47.51,0:01:52.56,Chinese,,0,0,0,,当然这是好几年前了。总之，我认为这些内容值得大家学习
Dialogue: 0,0:01:53.20,0:01:56.00,English,,0,0,0,,And I'll also mention this kind of material usually is taught
Dialogue: 0,0:01:53.20,0:01:56.00,Chinese,,0,0,0,,这些内容通常只会在课堂上讲到
Dialogue: 0,0:01:56.10,0:02:00.18,English,,0,0,0,,You don't really see it covered in most books
Dialogue: 0,0:01:56.10,0:02:00.18,Chinese,,0,0,0,,大多数书籍并不会涉及
Dialogue: 0,0:02:01.14,0:02:06.06,English,,0,0,0,,Except for ones that are really oriented toward system programmers and are fairly arcane
Dialogue: 0,0:02:01.14,0:02:06.06,Chinese,,0,0,0,,除非是真正面向系统程序员编写的书籍，但这些书相当深奥
Dialogue: 0,0:02:06.64,0:02:10.14,English,,0,0,0,,Or you try and learn it by reading man. pages
Dialogue: 0,0:02:06.64,0:02:10.14,Chinese,,0,0,0,,有时候手册里也会有
Dialogue: 0,0:02:10.26,0:02:17.86,English,,0,0,0,,And that's a fairly cryptic way to try and understand sort of a set of abstractions provided by an API
Dialogue: 0,0:02:10.26,0:02:17.86,Chinese,,0,0,0,,但不过是以一种晦涩的方式去解释 API 中各种抽象的概念
Dialogue: 0,0:02:18.08,0:02:19.52,English,,0,0,0,,So I hope you'll find this useful
Dialogue: 0,0:02:18.08,0:02:19.52,Chinese,,0,0,0,,所以我希望大家会觉得本节课很有帮助
Dialogue: 0,0:02:22.68,0:02:27.00,English,,0,0,0,,So what we'll talk about then is that what I mentioned this low-level I/O that
Dialogue: 0,0:02:22.68,0:02:27.00,Chinese,,0,0,0,,所以今天我们要讲低级 I/O
Dialogue: 0,0:02:27.34,0:02:31.68,English,,0,0,0,,I supported by Unix and other related operating systems
Dialogue: 0,0:02:27.34,0:02:31.68,Chinese,,0,0,0,,Unix 和其他相关的操作系统都支持低级 I/O
Dialogue: 0,0:02:32.36,0:02:36.34,English,,0,0,0,,And then a package called RIO which stands for robust I/O
Dialogue: 0,0:02:32.36,0:02:36.34,Chinese,,0,0,0,,然后会讲 RIO，一种健壮的  I/O 包
Dialogue: 0,0:02:37.10,0:02:45.42,English,,0,0,0,,And you will actually not be using this package until the last lab for the course the proxy lab
Dialogue: 0,0:02:37.10,0:02:45.42,Chinese,,0,0,0,,虽然 RIO 包只有到最后的 Proxy Lab 实验中才会
Dialogue: 0,0:02:45.90,0:02:47.74,English,,0,0,0,,At which time you'll use it a lot
Dialogue: 0,0:02:45.90,0:02:47.74,Chinese,,0,0,0,,频繁用到
Dialogue: 0,0:02:48.30,0:02:50.38,English,,0,0,0,,But it's worth looking at and partly
Dialogue: 0,0:02:48.30,0:02:50.38,Chinese,,0,0,0,,但这节课还是有必要讲一讲
Dialogue: 0,0:02:50.86,0:02:53.80,English,,0,0,0,,It's in the book it's well documented in the book
Dialogue: 0,0:02:50.86,0:02:53.80,Chinese,,0,0,0,,本书中说得很详尽
Dialogue: 0,0:02:54.34,0:02:58.24,English,,0,0,0,,And if you really want to understand how software works or a system works
Dialogue: 0,0:02:54.34,0:02:58.24,Chinese,,0,0,0,,如果大家真正想了解软件或系统是怎么工作的
Dialogue: 0,0:02:58.74,0:03:04.28,English,,0,0,0,,The best thing you can do is if you...if there's good quality source code to look at and study
Dialogue: 0,0:02:58.74,0:03:04.28,Chinese,,0,0,0,,最好的方式就是学习优质的源代码
Dialogue: 0,0:03:04.56,0:03:06.22,English,,0,0,0,,You can learn a lot from doing that
Dialogue: 0,0:03:04.56,0:03:06.22,Chinese,,0,0,0,,大家可以从中学到很多
Dialogue: 0,0:03:06.22,0:03:12.57,English,,0,0,0,,And I really recommend for that chapter in the book that you go ahead and study all of the code
Dialogue: 0,0:03:06.22,0:03:12.57,Chinese,,0,0,0,,建议大家真要去读一读书中关于 RIO 包的章节，学习其中的所有代码
Dialogue: 0,0:03:12.86,0:03:15.24,English,,0,0,0,,That makes up RIO. It's not a huge amount
Dialogue: 0,0:03:12.86,0:03:15.24,Chinese,,0,0,0,,代码不多
Dialogue: 0,0:03:15.84,0:03:19.82,English,,0,0,0,,And just get an appreciation for the subtleties involved in
Dialogue: 0,0:03:15.84,0:03:19.82,Chinese,,0,0,0,,只用去体会不同代码的细微差别
Dialogue: 0,0:03:19.82,0:03:24.72,English,,0,0,0,,How you deal with errors, how you deal with exceptional conditions and things like that
Dialogue: 0,0:03:19.82,0:03:24.72,Chinese,,0,0,0,,学习它们包括如何处理出错、异常情况等
Dialogue: 0,0:03:26.16,0:03:33.04,English,,0,0,0,,And then we'll talk some about how files are represented the sort of various data structures behind files
Dialogue: 0,0:03:26.16,0:03:33.04,Chinese,,0,0,0,,然后我们会讲文件是如何被描述的，如文件相关的数据结构
Dialogue: 0,0:03:33.60,0:03:37.82,English,,0,0,0,,How they support standard I/O and I/O redirection in Unix
Dialogue: 0,0:03:33.60,0:03:37.78,Chinese,,0,0,0,,这些结构在 Unix 中如何支持标准 I/O 和 I/O 重定向
Dialogue: 0,0:03:38.66,0:03:43.72,English,,0,0,0,,And we'll also talk about the so-called buffered I/O
Dialogue: 0,0:03:38.66,0:03:43.72,Chinese,,0,0,0,,我们还会讲到带缓冲的 I/O
Dialogue: 0,0:03:43.72,0:03:47.64,English,,0,0,0,,The I/O that you're more familiar with in C when you use printf and scanf
Dialogue: 0,0:03:43.72,0:03:47.64,Chinese,,0,0,0,,大家可能比较熟悉的是 C 语言中的 printf 和 scanf 函数
Dialogue: 0,0:03:49.86,0:03:56.45,English,,0,0,0,,So Unix actually has a much simpler and more unified view of I/O than any other operating system and it's
Dialogue: 0,0:03:49.86,0:03:56.45,Chinese,,0,0,0,,比起其他操作系统，Unix 中的 I/O 更简单且更一致
Dialogue: 0,0:03:56.45,0:03:58.90,English,,0,0,0,,One of the nice design features of it
Dialogue: 0,0:03:56.45,0:03:58.90,Chinese,,0,0,0,,它的一个设计优点是
Dialogue: 0,0:03:59.56,0:04:03.74,English,,0,0,0,,Is that a lot of abstractions are built into the notion of a file
Dialogue: 0,0:03:59.56,0:04:03.74,Chinese,,0,0,0,,用文件来描述很多抽象的事物
Dialogue: 0,0:04:04.36,0:04:06.80,English,,0,0,0,,And a file is really just a sequence of bytes
Dialogue: 0,0:04:04.36,0:04:06.80,Chinese,,0,0,0,,文件实际上只是一个字节序列
Dialogue: 0,0:04:07.60,0:04:17.10,English,,0,0,0,,And in Unix does not distinguish between different classes of files unlike, say Windows or earlier versions the Macintosh operating system
Dialogue: 0,0:04:07.60,0:04:17.10,Chinese,,0,0,0,,与 Windows 或早期的 Macintosh 操作系统不同，Unix 不区分文件类型
Dialogue: 0,0:04:17.32,0:04:18.76,English,,0,0,0,,It just thinks them as bytes
Dialogue: 0,0:04:17.32,0:04:18.76,Chinese,,0,0,0,,只是把文件看作字节
Dialogue: 0,0:04:18.82,0:04:25.94,English,,0,0,0,,And the operating system level has essentially no understanding of a more detailed structure inside of a file
Dialogue: 0,0:04:18.82,0:04:25.94,Chinese,,0,0,0,,操作系统基本上不了解文件内部的详细结构
Dialogue: 0,0:04:27.44,0:04:33.15,English,,0,0,0,,And one of the things it does is a file is normally originally thought of as
Dialogue: 0,0:04:27.44,0:04:33.15,Chinese,,0,0,0,,它通常把文件看作
Dialogue: 0,0:04:33.78,0:04:39.78,English,,0,0,0,,Something that's stored on say a disk drive or some other external storage device
Dialogue: 0,0:04:33.78,0:04:39.78,Chinese,,0,0,0,,存储在磁盘驱动器或其他外部存储设备上的某个东西
Dialogue: 0,0:04:40.52,0:04:44.94,English,,0,0,0,,And that you open you read it or write it you close it
Dialogue: 0,0:04:40.52,0:04:44.94,Chinese,,0,0,0,,可以对其执行打开、读写、关闭
Dialogue: 0,0:04:45.36,0:04:47.30,English,,0,0,0,,Those sort of standard operations
Dialogue: 0,0:04:45.36,0:04:47.30,Chinese,,0,0,0,,等一系列标准操作
Dialogue: 0,0:04:47.76,0:04:57.62,English,,0,0,0,,But Unix also use the notion of a file to represent many other different  things including for example the devices
Dialogue: 0,0:04:47.76,0:04:57.62,Chinese,,0,0,0,,Unix 也会用文件来描述很多其他不同的事物，如
Dialogue: 0,0:04:58.16,0:05:05.38,English,,0,0,0,,That are the I/O devices that are connected to a particular machine the TTY stands for teletype
Dialogue: 0,0:04:58.16,0:05:05.38,Chinese,,0,0,0,,连接到某台机器上的 I/O 设备。例如，用 TTY 来代表「电传打字机」
Dialogue: 0,0:05:06.00,0:05:14.42,English,,0,0,0,,Which is an antique terminology for how people used to actually interface typewriters to computers
Dialogue: 0,0:05:06.00,0:05:14.42,Chinese,,0,0,0,,这种说法比较古老，过去人们用它来描述打字机与计算机的接口
Dialogue: 0,0:05:15.10,0:05:21.92,English,,0,0,0,,The other thing that are viewed as like files are the network connections what are known as sockets
Dialogue: 0,0:05:15.10,0:05:21.92,Chinese,,0,0,0,,另一个是网络连接，俗称套接字
Dialogue: 0,0:05:22.46,0:05:26.16,English,,0,0,0,,And when you do communication over the Internet
Dialogue: 0,0:05:22.46,0:05:26.16,Chinese,,0,0,0,,当我们通过互联网进行通信时
Dialogue: 0,0:05:26.56,0:05:30.74,English,,0,0,0,,You do it by you send a message by writing to a socket
Dialogue: 0,0:05:26.56,0:05:30.74,Chinese,,0,0,0,,消息是写入套接字来发送的
Dialogue: 0,0:05:31.32,0:05:36.78,English,,0,0,0,,And you accept incoming communication by reading from a socket
Dialogue: 0,0:05:31.32,0:05:36.78,Chinese,,0,0,0,,并从套接字读出来接收的
Dialogue: 0,0:05:36.80,0:05:42.36,English,,0,0,0,,And so the same low-level API is the same
Dialogue: 0,0:05:36.80,0:05:42.36,Chinese,,0,0,0,,低级 API 中也是如此
Dialogue: 0,0:05:42.36,0:05:48.22,English,,0,0,0,,Whether you're reading or writing files on your disk drive or sending packets over the internet
Dialogue: 0,0:05:42.36,0:05:48.22,Chinese,,0,0,0,,在磁盘驱动器上读或写文件以及通过互联网发送数据包
Dialogue: 0,0:05:54.76,0:06:01.68,English,,0,0,0,,So the core operations then associated with files of course are opening and closing them and reading and writing them
Dialogue: 0,0:05:54.76,0:06:01.68,Chinese,,0,0,0,,都基于文件的打开、读写和关闭这些核心操作
Dialogue: 0,0:06:03.06,0:06:07.76,English,,0,0,0,,The other sort of attribute that's associated with most but not all files
Dialogue: 0,0:06:03.06,0:06:07.76,Chinese,,0,0,0,,大多数文件还有另一种属性——文件位置
Dialogue: 0,0:06:08.22,0:06:12.22,English,,0,0,0,,Is what's called the file position so if again if you imagine
Dialogue: 0,0:06:08.22,0:06:12.22,Chinese,,0,0,0,,大家设想一下
Dialogue: 0,0:06:12.52,0:06:17.25,English,,0,0,0,,When you're reading from a file you don't want to always start at the beginning every time you do a read
Dialogue: 0,0:06:12.52,0:06:17.25,Chinese,,0,0,0,,在读文件时，都不希望总是从头开始
Dialogue: 0,0:06:17.31,0:06:20.74,English,,0,0,0,,You read some data and then you read some more data
Dialogue: 0,0:06:17.31,0:06:20.74,Chinese,,0,0,0,,而是先读一部分，接着再读一部分
Dialogue: 0,0:06:20.74,0:06:25.40,English,,0,0,0,,And so that's tracked by a file position which is just a counter
Dialogue: 0,0:06:20.74,0:06:25.40,Chinese,,0,0,0,,这时候就会用到文件位置来追踪，它相当于一种计数器
Dialogue: 0,0:06:25.66,0:06:31.56,English,,0,0,0,,That says how many bytes have been read from this file so far
Dialogue: 0,0:06:25.66,0:06:31.56,Chinese,,0,0,0,,记录了截至目前已读的文件字节数
Dialogue: 0,0:06:31.58,0:06:32.94,English,,0,0,0,,So that I know where to go
Dialogue: 0,0:06:31.58,0:06:32.94,Chinese,,0,0,0,,于是接下来就知道从哪里开始读
Dialogue: 0,0:06:33.84,0:06:40.70,English,,0,0,0,,You can actually even alter that value with a various classes operation called seeking
Dialogue: 0,0:06:33.84,0:06:40.70,Chinese,,0,0,0,,我们甚至可以执行 seek 操作来改变文件位置的值
Dialogue: 0,0:06:41.06,0:06:44.94,English,,0,0,0,,Which is just a way of changing the file pointer the position pointer
Dialogue: 0,0:06:41.06,0:06:44.94,Chinese,,0,0,0,,从而改变文件位置指针的指向
Dialogue: 0,0:06:45.96,0:06:48.64,English,,0,0,0,,Now that doesn't work too well if your input is a terminal
Dialogue: 0,0:06:45.96,0:06:48.64,Chinese,,0,0,0,,但如果是基于终端的输入，该方法则不太适用
Dialogue: 0,0:06:49.06,0:06:56.05,English,,0,0,0,,Where you can't move, you can't sort of back up and have recover data
Dialogue: 0,0:06:49.06,0:06:56.05,Chinese,,0,0,0,,因为无法移动、备份和恢复先前已经读入的数据
Dialogue: 0,0:06:56.05,0:07:01.96,English,,0,0,0,,That was presented to it earlier or jump ahead and start accepting data that hasn't been typed yet
Dialogue: 0,0:06:56.05,0:07:01.96,Chinese,,0,0,0,,也无法提前接收还未键入的数据
Dialogue: 0,0:07:02.36,0:07:06.20,English,,0,0,0,,So there's some kinds of files have a file position and seeking
Dialogue: 0,0:07:02.36,0:07:06.20,Chinese,,0,0,0,,所以有些文件有文件位置和 seek 操作
Dialogue: 0,0:07:06.54,0:07:08.96,English,,0,0,0,,And others don't similar to a network socket
Dialogue: 0,0:07:06.54,0:07:08.96,Chinese,,0,0,0,,有些文件没有，如网络套接字
Dialogue: 0,0:07:08.96,0:07:16.68,English,,0,0,0,,You can't jump a socket for it in time you can only read or write the particular packets as they come in
Dialogue: 0,0:07:08.96,0:07:16.68,Chinese,,0,0,0,,你无法在时间上进行跳转，只能在数据包进入时对其进行读或写
Dialogue: 0,0:07:18.98,0:07:22.59,English,,0,0,0,,But in general think of it then as the file position
Dialogue: 0,0:07:18.98,0:07:22.59,Chinese,,0,0,0,,总之，可以把文件位置
Dialogue: 0,0:07:22.94,0:07:26.70,English,,0,0,0,,As part of the data associated with an open file
Dialogue: 0,0:07:22.94,0:07:26.70,Chinese,,0,0,0,,当作与打开文件相关联的数据的一部分
Dialogue: 0,0:07:27.06,0:07:30.30,English,,0,0,0,,That tells me how far along in this file have I read or written
Dialogue: 0,0:07:27.06,0:07:30.30,Chinese,,0,0,0,,记录了文件已经读或写到的位置
Dialogue: 0,0:07:34.58,0:07:41.82,English,,0,0,0,,And then again the files are because there's all these different things they're sort of unified in this file abstraction
Dialogue: 0,0:07:34.58,0:07:41.82,Chinese,,0,0,0,,关于文件，其实我们是把很多不同的事物统一抽象成了文件
Dialogue: 0,0:07:41.82,0:07:43.58,English,,0,0,0,,But obviously there's differences
Dialogue: 0,0:07:41.82,0:07:43.58,Chinese,,0,0,0,,但这些事物各不相同
Dialogue: 0,0:07:44.10,0:07:46.44,English,,0,0,0,,And different attributes to them and so
Dialogue: 0,0:07:44.10,0:07:46.44,Chinese,,0,0,0,,有不同的属性
Dialogue: 0,0:07:47.80,0:07:51.08,English,,0,0,0,,There's sort of many different categories and subcategories
Dialogue: 0,0:07:47.80,0:07:51.08,Chinese,,0,0,0,,因此就有了不同的文件类型和子类
Dialogue: 0,0:07:51.10,0:07:57.24,English,,0,0,0,,But the ones we'll think about are regular files just think of things that are on a disk drive
Dialogue: 0,0:07:51.10,0:07:57.24,Chinese,,0,0,0,,今天我们只讲普通文件，一类放在磁盘驱动器上的文件
Dialogue: 0,0:07:57.28,0:08:06.66,English,,0,0,0,,Directories which is a...directory is considered a type of file meaning the data that's in there is just enough as a file
Dialogue: 0,0:07:57.28,0:08:06.66,Chinese,,0,0,0,,还有目录，一类仅其中的数据便足以作为文件的文件
Dialogue: 0,0:08:07.02,0:08:11.82,English,,0,0,0,,But of course it's a special kind of file and that it actually does have an interpretation
Dialogue: 0,0:08:07.02,0:08:11.82,Chinese,,0,0,0,,这是一类特殊的文件
Dialogue: 0,0:08:11.82,0:08:17.06,English,,0,0,0,,That entries in that file describe the locations and attributes of other files
Dialogue: 0,0:08:11.82,0:08:17.06,Chinese,,0,0,0,,此类文件中的条目描述了其他文件的位置和属性
Dialogue: 0,0:08:18.64,0:08:23.66,English,,0,0,0,,And then as I mentioned the term socket is a connection to a network
Dialogue: 0,0:08:18.64,0:08:23.66,Chinese,,0,0,0,,再有就是作为网络连接的套接字，我们之前提到过
Dialogue: 0,0:08:24.24,0:08:28.30,English,,0,0,0,,And it's both for sending and for receiving messages over the network
Dialogue: 0,0:08:24.24,0:08:28.30,Chinese,,0,0,0,,它用来发送和接收网络消息
Dialogue: 0,0:08:29.38,0:08:32.16,English,,0,0,0,,There's other files that we won't really talk about
Dialogue: 0,0:08:29.38,0:08:32.16,Chinese,,0,0,0,,有些文件我们今天不会讲到
Dialogue: 0,0:08:32.34,0:08:37.06,English,,0,0,0,,For example when you pipe when you from one application to another
Dialogue: 0,0:08:32.34,0:08:37.06,Chinese,,0,0,0,,例如，用于在应用程序之间传送数据的通道文件
Dialogue: 0,0:08:37.66,0:08:46.82,English,,0,0,0,,That's both the output of the first program and the input of the second are special types of files called pipes
Dialogue: 0,0:08:37.66,0:08:46.82,Chinese,,0,0,0,,这是一类特殊的文件，既是前一程序的输出，也是后一程序的输入
Dialogue: 0,0:08:47.50,0:08:57.58,English,,0,0,0,,And they're handled by writing is putting something into the pipe and reading is to take something out of that pipe
Dialogue: 0,0:08:47.50,0:08:57.58,Chinese,,0,0,0,,这类文件可以写和读，写就是在其中放入数据，读就是从其中取出数据
Dialogue: 0,0:08:58.24,0:09:01.74,English,,0,0,0,,A similar something called a symbolic link which is just a way that
Dialogue: 0,0:08:58.24,0:09:01.74,Chinese,,0,0,0,,还有一类与之相似的文件叫符号链接
Dialogue: 0,0:09:01.74,0:09:04.76,English,,0,0,0,,You can have multiple names for a file
Dialogue: 0,0:09:01.74,0:09:04.76,Chinese,,0,0,0,,一个符号链接文件
Dialogue: 0,0:09:04.76,0:09:14.94,English,,0,0,0,,And pointers to a file that aren't really without having to make separate copies of a file
Dialogue: 0,0:09:04.76,0:09:14.94,Chinese,,0,0,0,,不需要创建副本就可以有多个名称、被多个指针指向
Dialogue: 0,0:09:15.46,0:09:17.82,English,,0,0,0,,And then other special types of devices
Dialogue: 0,0:09:15.46,0:09:17.82,Chinese,,0,0,0,,还有其他特殊类型的设备
Dialogue: 0,0:09:18.50,0:09:24.16,English,,0,0,0,,So we won't really we'll only consider for the first three types of files
Dialogue: 0,0:09:18.50,0:09:24.16,Chinese,,0,0,0,,我们今天只会讨论前三类文件
Dialogue: 0,0:09:24.16,0:09:26.54,English,,0,0,0,,And in fact for today mostly the first two
Dialogue: 0,0:09:24.16,0:09:26.54,Chinese,,0,0,0,,重点讨论前两类
Dialogue: 0,0:09:33.20,0:09:37.30,English,,0,0,0,,So the idea of a file then is it just contains arbitrary data
Dialogue: 0,0:09:33.20,0:09:37.30,Chinese,,0,0,0,,什么是普通文件？普通文件包含任意数据
Dialogue: 0,0:09:37.30,0:09:43.96,English,,0,0,0,,And the operating system really for regular file doesn't try to get into the details of what's inside that file
Dialogue: 0,0:09:37.30,0:09:43.96,Chinese,,0,0,0,,操作系统并不会试图去探索文件内部的具体细节
Dialogue: 0,0:09:44.86,0:09:52.04,English,,0,0,0,,And there's some class of applications that will distinguish between a text file and a binary file
Dialogue: 0,0:09:44.86,0:09:52.04,Chinese,,0,0,0,,有些应用程序会区分文本文件和二进制文件
Dialogue: 0,0:09:53.06,0:09:56.68,English,,0,0,0,,Not really at the operating system level but more higher levels
Dialogue: 0,0:09:53.06,0:09:56.68,Chinese,,0,0,0,,不是在操作系统级别，而是在更高级别
Dialogue: 0,0:09:57.16,0:10:05.64,English,,0,0,0,,And the main difference with that is that a text file should only have the standard characters of ASCII
Dialogue: 0,0:09:57.16,0:10:05.64,Chinese,,0,0,0,,二者的主要区别是文本文件只含有标准的 ASCII 字符
Dialogue: 0,0:10:06.18,0:10:13.36,English,,0,0,0,,Or another class would be various encodings that allow you to do encodings of non-English alphabets
Dialogue: 0,0:10:06.18,0:10:13.36,Chinese,,0,0,0,,或者可以对非英文字符进行编码的 Unicode 字符
Dialogue: 0,0:10:14.96,0:10:27.31,English,,0,0,0,,And binary files would be things like an image or actual object code or a video or audio file or something
Dialogue: 0,0:10:14.96,0:10:27.31,Chinese,,0,0,0,,二进制文件是图像或实际目标代码或音视频文件等所有其他的文件
Dialogue: 0,0:10:27.31,0:10:35.58,English,,0,0,0,,That it's the...within that code there's a sequence of bytes that are encoding numbers in some form directly
Dialogue: 0,0:10:27.31,0:10:35.58,Chinese,,0,0,0,,这类文件中有一个字节序列直接是以某种形式编码的数字
Dialogue: 0,0:10:40.12,0:10:45.62,English,,0,0,0,,And then the main thing about a text file is that there's certain functions that
Dialogue: 0,0:10:40.12,0:10:45.62,Chinese,,0,0,0,,文本文件的主要特征是其包含某些函数
Dialogue: 0,0:10:46.10,0:10:51.18,English,,0,0,0,,Distinguish a newline character meaning the end of a line of text
Dialogue: 0,0:10:46.10,0:10:51.18,Chinese,,0,0,0,,这些函数能够辨别新行符，也就是一行文本的结尾
Dialogue: 0,0:10:52.22,0:10:59.28,English,,0,0,0,,And you already learned about that character it's got the code of 0xa as a byte code
Dialogue: 0,0:10:52.22,0:10:59.28,Chinese,,0,0,0,,大家都知道新行符的单字节编码是 0xa
Dialogue: 0,0:10:59.58,0:11:02.94,English,,0,0,0,,And that became one of the forbidden codes of a text
Dialogue: 0,0:10:59.58,0:11:02.94,Chinese,,0,0,0,,这让它成为文本中的一个禁用代码
Dialogue: 0,0:11:03.08,0:11:07.62,English,,0,0,0,,Because it would be interpreted as a newline by the function gets
Dialogue: 0,0:11:03.08,0:11:07.62,Chinese,,0,0,0,,因为 gets 函数会将其解读为新行
Dialogue: 0,0:11:10.02,0:11:11.04,English,,0,0,0,,Just to mention that
Dialogue: 0,0:11:10.02,0:11:11.04,Chinese,,0,0,0,,顺便提一下
Dialogue: 0,0:11:11.82,0:11:17.80,English,,0,0,0,,This is one place when you're transferring files between say a Windows machine and a Linux or a MAC
Dialogue: 0,0:11:11.82,0:11:17.80,Chinese,,0,0,0,,在 Windows 与 Linux 或 MAC 之间转存文件时
Dialogue: 0,0:11:18.28,0:11:22.02,English,,0,0,0,,One of the things if it's a text file that has to be changed is
Dialogue: 0,0:11:18.28,0:11:22.02,Chinese,,0,0,0,,如果该文件是文本文件，需要注意的一点是
Dialogue: 0,0:11:22.02,0:11:28.20,English,,0,0,0,,That two classes of systems have different ways of interpreting of encoding when is the end of a line
Dialogue: 0,0:11:22.02,0:11:28.20,Chinese,,0,0,0,,这两类系统对文本行结尾的处理不一样
Dialogue: 0,0:11:28.74,0:11:35.42,English,,0,0,0,,And in a Linux or MAC file it's just this character code 0xa
Dialogue: 0,0:11:28.74,0:11:35.42,Chinese,,0,0,0,,在 Linux 或 MAC 文件中，只需要字符编码 0xa
Dialogue: 0,0:11:36.20,0:11:38.38,English,,0,0,0,,Which stands for line feed
Dialogue: 0,0:11:36.20,0:11:38.38,Chinese,,0,0,0,,表示换行
Dialogue: 0,0:11:38.98,0:11:45.12,English,,0,0,0,,Whereas the Windows files finish with a two-character end of line
Dialogue: 0,0:11:38.98,0:11:45.12,Chinese,,0,0,0,,但是在 Windows 文件中，文本行结尾需要两个字符表示
Dialogue: 0,0:11:45.12,0:11:46.88,English,,0,0,0,,Carriage return and line feed
Dialogue: 0,0:11:45.12,0:11:46.88,Chinese,,0,0,0,,回车（0xd）及换行（0xa）
Dialogue: 0,0:11:46.88,0:11:51.74,English,,0,0,0,,And I show you this picture of an object that you've probably only seen in museums
Dialogue: 0,0:11:46.88,0:11:51.74,Chinese,,0,0,0,,幻灯片中展示的物品大家可能只在博物馆中看到过
Dialogue: 0,0:11:52.32,0:11:57.32,English,,0,0,0,,But it's a typewriter and just to tell you what the heck is a carriage return and what's the line feed
Dialogue: 0,0:11:52.32,0:11:57.32,Chinese,,0,0,0,,这是一台打字机，它会让大家更直观地了解回车和换行的概念
Dialogue: 0,0:11:57.68,0:12:02.10,English,,0,0,0,,I thought you might like to in case you've never actually used an old-fashioned typewriter
Dialogue: 0,0:11:57.68,0:12:02.10,Chinese,,0,0,0,,我想大家可能从来没有用过老式打字机
Dialogue: 0,0:12:03.28,0:12:09.46,English,,0,0,0,,Basically at the end of it on the left hand side of a typewriter is this bar
Dialogue: 0,0:12:03.28,0:12:09.46,Chinese,,0,0,0,,这台打字机的左侧是一个滚筒
Dialogue: 0,0:12:09.96,0:12:11.84,English,,0,0,0,,And when you start typing along
Dialogue: 0,0:12:09.96,0:12:11.84,Chinese,,0,0,0,,当你打字时
Dialogue: 0,0:12:14.10,0:12:21.20,English,,0,0,0,,This roller with your page on it sinks along
Dialogue: 0,0:12:14.10,0:12:21.20,Chinese,,0,0,0,,纸就会随着滚筒向左平移
Dialogue: 0,0:12:22.04,0:12:26.26,English,,0,0,0,,And it comes to the end and then you want to get back to the beginning of the next line
Dialogue: 0,0:12:22.04,0:12:26.26,Chinese,,0,0,0,,当滚筒移动到末端时，需要回到下一行的开头
Dialogue: 0,0:12:26.26,0:12:28.74,English,,0,0,0,,So you want to both do the carriage return
Dialogue: 0,0:12:26.26,0:12:28.74,Chinese,,0,0,0,,这时候既要回车
Dialogue: 0,0:12:29.84,0:12:33.29,English,,0,0,0,,Which is this thing shove it to the right
Dialogue: 0,0:12:29.84,0:12:33.29,Chinese,,0,0,0,,把滚筒推到右边
Dialogue: 0,0:12:33.84,0:12:40.02,English,,0,0,0,,And you want to do a line feed you want the roller on it to go down to the next line
Dialogue: 0,0:12:33.84,0:12:40.02,Chinese,,0,0,0,,同时也要换行，让滚筒切换到下一行
Dialogue: 0,0:12:41.06,0:12:43.86,English,,0,0,0,,So there's a knob here that you can twist by hand
Dialogue: 0,0:12:41.06,0:12:43.86,Chinese,,0,0,0,,此时就需要用手转动旋钮完成换行
Dialogue: 0,0:12:43.88,0:12:47.20,English,,0,0,0,,But in general what you do is you type along and then you go slam
Dialogue: 0,0:12:43.88,0:12:47.20,Chinese,,0,0,0,,总之，你一直打到末端，再像这样把滚筒推回右边
Dialogue: 0,0:12:47.66,0:12:53.58,English,,0,0,0,,Like that and this lever both pushes the thing back and it rotates the
Dialogue: 0,0:12:47.66,0:12:53.58,Chinese,,0,0,0,,在打字机里杠杆的作用下，会让滚筒回到行首，并把滚筒旋转
Dialogue: 0,0:12:55.62,0:12:58.08,English,,0,0,0,,The roller by one line's words
Dialogue: 0,0:12:55.62,0:12:58.08,Chinese,,0,0,0,,一行文字的距离
Dialogue: 0,0:12:58.30,0:13:04.66,English,,0,0,0,,So carriage return line feed is where that actually comes from in case you wonder
Dialogue: 0,0:12:58.30,0:13:04.66,Chinese,,0,0,0,,这就是回车换行的由来，仅供了解
Dialogue: 0,0:13:09.26,0:13:13.24,English,,0,0,0,,And then a directory as I mentioned it's stored as a file
Dialogue: 0,0:13:09.26,0:13:13.24,Chinese,,0,0,0,,然后是目录，正如我之前提到过，目录被存储为一种文件
Dialogue: 0,0:13:13.24,0:13:20.56,English,,0,0,0,,But it's a file that the operating system at least the file system part of the operating system actually interprets in very specific ways
Dialogue: 0,0:13:13.24,0:13:20.56,Chinese,,0,0,0,,操作系统或操作系统中的文件系统对其的解读方式非常独特
Dialogue: 0,0:13:21.46,0:13:26.04,English,,0,0,0,,And as you know within every directory there's two special files
Dialogue: 0,0:13:21.46,0:13:26.04,Chinese,,0,0,0,,众所周知，每个目录都含有两个特殊的条目
Dialogue: 0,0:13:26.10,0:13:32.14,English,,0,0,0,,"." and "..", referring to the local file and its parent in the tree structure
Dialogue: 0,0:13:26.10,0:13:32.14,Chinese,,0,0,0,,「.」和「..」，分别表示当前目录自身和树型结构中当前目录的父目录
Dialogue: 0,0:13:33.58,0:13:37.74,English,,0,0,0,,And so in most systems
Dialogue: 0,0:13:33.58,0:13:37.74,Chinese,,0,0,0,,在我所知道的大部分系统中
Dialogue: 0,0:13:37.96,0:13:41.70,English,,0,0,0,,Systems that I know of there's a sort of hierarchical organization to the files
Dialogue: 0,0:13:37.96,0:13:41.70,Chinese,,0,0,0,,所有文件都组织成一种层次结构
Dialogue: 0,0:13:42.26,0:13:45.54,English,,0,0,0,,We're not going to talk much about files...systems
Dialogue: 0,0:13:42.26,0:13:45.54,Chinese,,0,0,0,,在此我们不会讨论太多
Dialogue: 0,0:13:45.64,0:13:49.90,English,,0,0,0,,But there's a hierarchical organization
Dialogue: 0,0:13:45.64,0:13:49.90,Chinese,,0,0,0,,但要知道这是一种层次结构
Dialogue: 0,0:13:50.74,0:13:56.24,English,,0,0,0,,And that's maintained as a series of files each being the directory
Dialogue: 0,0:13:50.74,0:13:56.24,Chinese,,0,0,0,,并被作为一系列文件来维护，这些文件每个都是目录
Dialogue: 0,0:13:56.62,0:14:00.48,English,,0,0,0,,And the directory then is a pointer to its subdirectory which again are files
Dialogue: 0,0:13:56.62,0:14:00.48,Chinese,,0,0,0,,目录又是指向其子目录的指针，而子目录也是文件
Dialogue: 0,0:14:01.94,0:14:04.92,English,,0,0,0,,And so what's referred to in Unix terminology
Dialogue: 0,0:14:01.94,0:14:04.92,Chinese,,0,0,0,,在 Unix
Dialogue: 0,0:14:04.92,0:14:11.94,English,,0,0,0,,And most other operating systems what's known as a path name is a way to navigate
Dialogue: 0,0:14:04.92,0:14:11.94,Chinese,,0,0,0,,以及大多数其他操作系统的语境中，路径名是
Dialogue: 0,0:14:11.98,0:14:17.20,English,,0,0,0,,Through this hierarchy of files and identify one particular one
Dialogue: 0,0:14:11.98,0:14:17.20,Chinese,,0,0,0,,一种在文件层次结构中导向某个特定文件的导航方式
Dialogue: 0,0:14:19.58,0:14:26.20,English,,0,0,0,,And so that all comes to say that the low-level Unix operations
Dialogue: 0,0:14:19.58,0:14:26.20,Chinese,,0,0,0,,总之，低级的 Unix 操作
Dialogue: 0,0:14:26.26,0:14:31.40,English,,0,0,0,,That use to implement this are to open a file to read it and write it and to close it
Dialogue: 0,0:14:26.26,0:14:31.40,Chinese,,0,0,0,,利用路径名对文件进行打开（open）、读（read）、写（write）和关闭（close）操作
Dialogue: 0,0:14:31.40,0:14:33.62,English,,0,0,0,,And those literally those are the names of the functions
Dialogue: 0,0:14:31.40,0:14:33.62,Chinese,,0,0,0,,这些字面上也就是操作函数的名称
Dialogue: 0,0:14:34.70,0:14:37.64,English,,0,0,0,,So the open function then you give a pathname
Dialogue: 0,0:14:34.70,0:14:37.64,Chinese,,0,0,0,,在使用 open 函数时，要给出一个路径名
Dialogue: 0,0:14:38.34,0:14:42.60,English,,0,0,0,,And remember pathnames can be absolute meaning that they start with a '/'
Dialogue: 0,0:14:38.34,0:14:42.60,Chinese,,0,0,0,,路径名可以是用「/」开头的绝对路径
Dialogue: 0,0:14:43.52,0:14:47.28,English,,0,0,0,,And they go all the way down the hierarchy
Dialogue: 0,0:14:43.52,0:14:47.28,Chinese,,0,0,0,,沿着层次结构向下走
Dialogue: 0,0:14:47.56,0:14:54.05,English,,0,0,0,,They can be relative to a particular whatever your current directory is where
Dialogue: 0,0:14:47.56,0:14:54.05,Chinese,,0,0,0,,路径名也可以是相对于当前工作目录的路径
Dialogue: 0,0:14:54.56,0:15:03.88,English,,0,0,0,,And they can also be relative to a user if you use the tilde slash or tilde
Dialogue: 0,0:14:54.56,0:15:03.88,Chinese,,0,0,0,,还可以用「~/」或「~」来指定相对于用户目录的路径名
Dialogue: 0,0:15:04.38,0:15:08.66,English,,0,0,0,,Then that sort of a shortcut in this path name to get to particular users
Dialogue: 0,0:15:04.38,0:15:08.66,Chinese,,0,0,0,,这会让你更快转到特定的用户目录
Dialogue: 0,0:15:09.50,0:15:16.32,English,,0,0,0,,So a pathname can be any of those forms when you open it, it just has to be some way that just like you specify
Dialogue: 0,0:15:09.50,0:15:16.32,Chinese,,0,0,0,,路径名可以采取上述任意一种，当你打开文件时
Dialogue: 0,0:15:16.32,0:15:21.20,English,,0,0,0,,In other places that you tell where this particular file is you're trying to open
Dialogue: 0,0:15:16.32,0:15:21.20,Chinese,,0,0,0,,尤其当文件不在当前工作目录，你必须明确指出它所在的位置
Dialogue: 0,0:15:22.90,0:15:25.38,English,,0,0,0,,And so it's given a pathname and then
Dialogue: 0,0:15:22.90,0:15:25.38,Chinese,,0,0,0,,所以要给出一个路径名，然后
Dialogue: 0,0:15:25.56,0:15:32.52,English,,0,0,0,,It's given an integer code that says what do you want to do when you open this file
Dialogue: 0,0:15:25.56,0:15:32.52,Chinese,,0,0,0,,还要给出一个整数代码，指明打开文件时
Dialogue: 0,0:15:32.52,0:15:34.10,English,,0,0,0,,In what form do you want to open it
Dialogue: 0,0:15:32.52,0:15:34.10,Chinese,,0,0,0,,你想以什么形式打开它
Dialogue: 0,0:15:34.66,0:15:42.90,English,,0,0,0,,And that's specified by a series of constants that are already predefined when you include the appropriate files
Dialogue: 0,0:15:34.66,0:15:42.90,Chinese,,0,0,0,,这些整数代码由一系列预先定义好的常量指定，但是你要 include 相关文件
Dialogue: 0,0:15:44.62,0:15:48.42,English,,0,0,0,,And you can...and those actually get bitwise
Dialogue: 0,0:15:44.62,0:15:48.42,Chinese,,0,0,0,,它们适合按位操作
Dialogue: 0,0:15:48.76,0:15:53.92,English,,0,0,0,,Each of those is a one bit flag in some power of two position
Dialogue: 0,0:15:48.76,0:15:53.92,Chinese,,0,0,0,,每个都是一个等于 2 的某次幂的标志量
Dialogue: 0,0:15:54.46,0:15:58.92,English,,0,0,0,,Or it's a position one bit in a field somewhere
Dialogue: 0,0:15:54.46,0:15:58.92,Chinese,,0,0,0,,或者是位于某个字段的一个 1 位的标志量
Dialogue: 0,0:15:59.38,0:16:03.16,English,,0,0,0,,And so you can logically or those together if you want multiple combinations
Dialogue: 0,0:15:59.38,0:16:03.16,Chinese,,0,0,0,,可以通过逻辑「或」运算得到多种组合
Dialogue: 0,0:16:03.94,0:16:09.44,English,,0,0,0,,So for example I can say read-only, I can say read and write
Dialogue: 0,0:16:03.94,0:16:09.44,Chinese,,0,0,0,,例如只读、可读可写
Dialogue: 0,0:16:09.98,0:16:12.78,English,,0,0,0,,I can say append meaning don't
Dialogue: 0,0:16:09.98,0:16:12.78,Chinese,,0,0,0,,还可以用 append
Dialogue: 0,0:16:13.02,0:16:19.68,English,,0,0,0,,If I'm opening it to write don't begin it the don't start writing at the beginning start writing it wherever the end of the file is now
Dialogue: 0,0:16:13.02,0:16:19.68,Chinese,,0,0,0,,表示当打开文件进行写的操作时，不要从头开始，而是从文件结尾处开始
Dialogue: 0,0:16:20.36,0:16:23.18,English,,0,0,0,,So all those can be done and this is described in the book
Dialogue: 0,0:16:20.36,0:16:23.18,Chinese,,0,0,0,,所以通过使用正确的常量名及「或」运算，这些都可以实现
Dialogue: 0,0:16:23.62,0:16:30.20,English,,0,0,0,,By using the right set of names of constants and oring them together
Dialogue: 0,0:16:23.62,0:16:30.20,Chinese,,0,0,0,,这在书中也有所介绍
Dialogue: 0,0:16:31.44,0:16:34.22,English,,0,0,0,,And that will return something that's called a file descriptor
Dialogue: 0,0:16:31.44,0:16:34.22,Chinese,,0,0,0,,打开操作返回一个文件描述符
Dialogue: 0,0:16:34.74,0:16:39.48,English,,0,0,0,,And that's a very important idea that and one of the reasons why we're talking about this today
Dialogue: 0,0:16:34.74,0:16:39.48,Chinese,,0,0,0,,这是一个非常重要的概念，所以我们今天要讲
Dialogue: 0,0:16:39.48,0:16:41.48,English,,0,0,0,,This is going to be very important in your lab
Dialogue: 0,0:16:39.48,0:16:41.48,Chinese,,0,0,0,,同时这对你们的实验也非常重要
Dialogue: 0,0:16:42.06,0:16:45.84,English,,0,0,0,,Is the notion of a file descriptor which is just a small integer
Dialogue: 0,0:16:42.06,0:16:45.84,Chinese,,0,0,0,,文件描述符是比较小的一个整数
Dialogue: 0,0:16:46.36,0:16:51.34,English,,0,0,0,,That lists which particular one of the open files
Dialogue: 0,0:16:46.36,0:16:51.34,Chinese,,0,0,0,,标识当前程序正在操作的
Dialogue: 0,0:16:51.76,0:16:56.16,English,,0,0,0,,That's being used by this particular program are you referring to
Dialogue: 0,0:16:51.76,0:16:56.16,Chinese,,0,0,0,,某个打开文件
Dialogue: 0,0:16:56.74,0:17:02.02,English,,0,0,0,,And so it's a small number because these are a sign sequentially
Dialogue: 0,0:16:56.74,0:17:02.02,Chinese,,0,0,0,,它是一个比较小的数，因为是按顺序编号的
Dialogue: 0,0:17:02.02,0:17:04.20,English,,0,0,0,,When you begin your program and you run
Dialogue: 0,0:17:02.02,0:17:04.20,Chinese,,0,0,0,,当你启动并运行程序
Dialogue: 0,0:17:05.36,0:17:09.74,English,,0,0,0,,And you're in fact limited on most machines to some
Dialogue: 0,0:17:05.36,0:17:09.74,Chinese,,0,0,0,,大多数机器
Dialogue: 0,0:17:10.00,0:17:13.92,English,,0,0,0,,Some bounded number of open files you're allowed to have at any time
Dialogue: 0,0:17:10.00,0:17:13.92,Chinese,,0,0,0,,允许同时打开的文件数量是有限的
Dialogue: 0,0:17:14.24,0:17:16.18,English,,0,0,0,,In fact if you go to...
Dialogue: 0,0:17:14.24,0:17:16.18,Chinese,,0,0,0,,实际上
Dialogue: 0,0:17:18.96,0:17:19.66,English,,0,0,0,,Let's see...
Dialogue: 0,0:17:18.96,0:17:19.66,Chinese,,0,0,0,,举个例子
Dialogue: 0,0:17:20.52,0:17:22.96,English,,0,0,0,,If you're on a machine and you type in limit
Dialogue: 0,0:17:20.52,0:17:22.96,Chinese,,0,0,0,,如果在这里键入 limit
Dialogue: 0,0:17:30.26,0:17:32.78,English,,0,0,0,,You'll see there that entry called descriptors
Dialogue: 0,0:17:30.26,0:17:32.78,Chinese,,0,0,0,,会出现一堆条目，其中有一条叫 descriptors
Dialogue: 0,0:17:33.88,0:17:39.90,English,,0,0,0,,1024 says that you can't have more than 1024 files open at any given time
Dialogue: 0,0:17:33.88,0:17:39.90,Chinese,,0,0,0,,1024 表示在任何时候能够同时打开的文件数量不超过 1024 个
Dialogue: 0,0:17:40.16,0:17:42.96,English,,0,0,0,,And in fact if you've got 1024 files open
Dialogue: 0,0:17:40.16,0:17:42.96,Chinese,,0,0,0,,实际上，如果你同时打开了 1024 个文件
Dialogue: 0,0:17:43.12,0:17:45.80,English,,0,0,0,,It's a chance you're doing something really seriously wrong
Dialogue: 0,0:17:43.12,0:17:45.80,Chinese,,0,0,0,,可能你犯了一个很严重的错误
Dialogue: 0,0:17:46.42,0:17:49.18,English,,0,0,0,,Being that you haven't been closing the files you should be closing
Dialogue: 0,0:17:46.42,0:17:49.18,Chinese,,0,0,0,,没有关闭本该关闭的文件
Dialogue: 0,0:17:59.96,0:18:05.22,English,,0,0,0,,And all the system calls including these always have return codes
Dialogue: 0,0:17:59.96,0:18:05.22,Chinese,,0,0,0,,所有系统调用都有返回值
Dialogue: 0,0:18:05.66,0:18:12.10,English,,0,0,0,,And the return codes vary sometimes a negative number is an error sometimes a zero is an error
Dialogue: 0,0:18:05.66,0:18:12.10,Chinese,,0,0,0,,返回值的涵义不总是相同，有时候负数表示出错，有时候 0 表示错误
Dialogue: 0,0:18:12.50,0:18:17.12,English,,0,0,0,,Now they're all different and all confusing and all inscrutable
Dialogue: 0,0:18:12.50,0:18:17.12,Chinese,,0,0,0,,由于涵义不同，会令人产生困惑
Dialogue: 0,0:18:17.12,0:18:22.60,English,,0,0,0,,So you have to look at the documentation for every single one of those functions
Dialogue: 0,0:18:17.12,0:18:22.60,Chinese,,0,0,0,,所以必须查看每个函数的文档
Dialogue: 0,0:18:22.60,0:18:26.66,English,,0,0,0,,And one of the rules we're going to hammer away at in this course
Dialogue: 0,0:18:22.60,0:18:26.66,Chinese,,0,0,0,,本课中我们会反复强调的一条规则是
Dialogue: 0,0:18:27.34,0:18:31.34,English,,0,0,0,,Is every time you make a system call you should check the return code
Dialogue: 0,0:18:27.34,0:18:31.34,Chinese,,0,0,0,,每次进行系统调用时都应该检查返回值
Dialogue: 0,0:18:31.98,0:18:36.10,English,,0,0,0,,To see if there's an error and then do some appropriate way of handling the error
Dialogue: 0,0:18:31.98,0:18:36.10,Chinese,,0,0,0,,看看是否存在错误，并采取一些适当的方法来处理错误
Dialogue: 0,0:18:36.10,0:18:38.32,English,,0,0,0,,That's just a practice it's a pain in the butt
Dialogue: 0,0:18:36.10,0:18:38.32,Chinese,,0,0,0,,这是一个惯例，但比较烦人
Dialogue: 0,0:18:38.84,0:18:41.70,English,,0,0,0,,It makes your code look like a rat's nest of conditionals
Dialogue: 0,0:18:38.84,0:18:41.70,Chinese,,0,0,0,,因为这样做会让代码看起来一团糟
Dialogue: 0,0:18:42.24,0:18:45.78,English,,0,0,0,,You really would rather not because often there's an error you
Dialogue: 0,0:18:42.24,0:18:45.78,Chinese,,0,0,0,,大家都不想这样做，因为当出现错误时
Dialogue: 0,0:18:46.22,0:18:49.04,English,,0,0,0,,Deciding what you're going to do when there's an error is harder than
Dialogue: 0,0:18:46.22,0:18:49.04,Chinese,,0,0,0,,决定要怎么处理它更难
Dialogue: 0,0:18:49.56,0:18:51.73,English,,0,0,0,,Then figuring just ignoring it all together
Dialogue: 0,0:18:49.56,0:18:51.73,Chinese,,0,0,0,,不如直接忽略
Dialogue: 0,0:18:52.84,0:18:54.52,English,,0,0,0,,And so there's a lot of code out there
Dialogue: 0,0:18:52.84,0:18:54.52,Chinese,,0,0,0,,在大量的代码前
Dialogue: 0,0:18:54.52,0:18:58.06,English,,0,0,0,,Where people just cross their fingers and hope there's never errors in their system calls
Dialogue: 0,0:18:54.52,0:18:58.06,Chinese,,0,0,0,,人们只能祈求系统调用永远不出错
Dialogue: 0,0:18:58.96,0:19:05.08,English,,0,0,0,,But we're going to really push on you hard to say every time you make a system call check the return code
Dialogue: 0,0:18:58.96,0:19:05.08,Chinese,,0,0,0,,即便如此，我们还是要强调每次进行系统调用时务必检查返回值
Dialogue: 0,0:19:05.26,0:19:06.84,English,,0,0,0,,And do something if it's not right
Dialogue: 0,0:19:05.26,0:19:06.84,Chinese,,0,0,0,,如果出错，就需采取措施
Dialogue: 0,0:19:09.38,0:19:15.30,English,,0,0,0,,And so the open will return a number so that it's an int that it returns
Dialogue: 0,0:19:09.38,0:19:15.30,Chinese,,0,0,0,,打开操作会返回一个有符号的整数值
Dialogue: 0,0:19:15.30,0:19:20.32,English,,0,0,0,,But if it's a negative number that means it couldn't open the file
Dialogue: 0,0:19:15.30,0:19:20.32,Chinese,,0,0,0,,如果返回值为负，就意味着无法打开文件
Dialogue: 0,0:19:20.32,0:19:25.24,English,,0,0,0,,For example the file doesn't exist or you're trying to open it in a mode
Dialogue: 0,0:19:20.32,0:19:25.24,Chinese,,0,0,0,,原因有很多，可能是该文件不存在
Dialogue: 0,0:19:25.26,0:19:27.56,English,,0,0,0,,That you're not authorized to open it in
Dialogue: 0,0:19:25.26,0:19:27.56,Chinese,,0,0,0,,或者试图在未经授权的模式下打开它
Dialogue: 0,0:19:30.44,0:19:37.66,English,,0,0,0,,So there's three particular file descriptors associated with every single process that runs
Dialogue: 0,0:19:30.44,0:19:37.66,Chinese,,0,0,0,,每个运行的进程都有三个特定的文件描述符
Dialogue: 0,0:19:37.66,0:19:42.02,English,,0,0,0,,One is standard input the other standard output the third is standard error
Dialogue: 0,0:19:37.66,0:19:42.02,Chinese,,0,0,0,,分别是标准输入、标准输出和标准错误
Dialogue: 0,0:19:42.30,0:19:47.36,English,,0,0,0,,And they always have a file descriptor number 0, 1 and 2
Dialogue: 0,0:19:42.30,0:19:47.36,Chinese,,0,0,0,,对应的文件描述符值始终是 0、1、2
Dialogue: 0,0:19:49.86,0:19:56.88,English,,0,0,0,,So that you shouldn't really refer to them by their file descriptor numbers
Dialogue: 0,0:19:49.86,0:19:56.88,Chinese,,0,0,0,,虽然不能用这些值直接去引用它们
Dialogue: 0,0:19:56.90,0:20:00.74,English,,0,0,0,,Even though you actually can reliably depend on those values
Dialogue: 0,0:19:56.90,0:20:00.74,Chinese,,0,0,0,,但实际上你还是能够依赖这些值
Dialogue: 0,0:20:02.82,0:20:04.74,English,,0,0,0,,Same way if you want to close a file
Dialogue: 0,0:20:02.82,0:20:04.74,Chinese,,0,0,0,,关闭文件也是一样
Dialogue: 0,0:20:04.76,0:20:11.12,English,,0,0,0,,Also open you see you give a pathname and a one bit a one integer field
Dialogue: 0,0:20:04.76,0:20:11.12,Chinese,,0,0,0,,打开文件时，你需要给出一个路径名和一个按位操作的整数
Dialogue: 0,0:20:11.18,0:20:15.12,English,,0,0,0,,That gives these flags say something about the modes in which you want to open it
Dialogue: 0,0:20:11.18,0:20:15.12,Chinese,,0,0,0,,这个整数指明你想在什么的模式下访问该文件
Dialogue: 0,0:20:16.58,0:20:22.36,English,,0,0,0,,To close a file you just say close and you give the file descriptor number not the name of the file
Dialogue: 0,0:20:16.58,0:20:22.36,Chinese,,0,0,0,,关闭文件时，只要调用 close 函数，并指出文件描述符值而不是文件名
Dialogue: 0,0:20:22.86,0:20:24.84,English,,0,0,0,,And it returns a return code too
Dialogue: 0,0:20:22.86,0:20:24.84,Chinese,,0,0,0,,该操作也会有一个返回值
Dialogue: 0,0:20:26.72,0:20:33.86,English,,0,0,0,,So you might say now why in the world could you ever get an error closing a file if it's open
Dialogue: 0,0:20:26.72,0:20:33.86,Chinese,,0,0,0,,你可能会想难道关闭打开的文件还会报错
Dialogue: 0,0:20:34.22,0:20:36.56,English,,0,0,0,,And the answer is that actually can happen
Dialogue: 0,0:20:34.22,0:20:36.56,Chinese,,0,0,0,,答案是肯定的
Dialogue: 0,0:20:37.24,0:20:42.02,English,,0,0,0,,In particular we'll see when we have multi-threaded programs
Dialogue: 0,0:20:37.24,0:20:42.02,Chinese,,0,0,0,,特别是在多线程程序中
Dialogue: 0,0:20:42.02,0:20:50.54,English,,0,0,0,,Where it's possible to have two essentially two programs running at the same time sharing their data structures and
Dialogue: 0,0:20:42.02,0:20:50.54,Chinese,,0,0,0,,可能有两个程序同时运行，共享数据结构
Dialogue: 0,0:20:51.06,0:20:53.56,English,,0,0,0,,Interacting with each other sharing their memory
Dialogue: 0,0:20:51.06,0:20:53.56,Chinese,,0,0,0,,彼此交互，共享内存
Dialogue: 0,0:20:54.02,0:20:59.78,English,,0,0,0,,It's a very important kind of programming and one that you can really make bad horrible mistakes in
Dialogue: 0,0:20:54.02,0:20:59.78,Chinese,,0,0,0,,这是一种非常重要的编程方式，但也很容易踩雷
Dialogue: 0,0:21:00.02,0:21:04.31,English,,0,0,0,,And one of the bad horrible mistakes is if you try to close a file that's already been closed
Dialogue: 0,0:21:00.02,0:21:04.31,Chinese,,0,0,0,,比如，尝试关闭一个已经关闭的文件
Dialogue: 0,0:21:04.58,0:21:09.66,English,,0,0,0,,It'll be an error and that can happen if there's two different parts of your program running
Dialogue: 0,0:21:04.58,0:21:09.66,Chinese,,0,0,0,,这个错误在程序的两个不同部分同时运行时就可能发生
Dialogue: 0,0:21:10.10,0:21:12.50,English,,0,0,0,,And each of them tries to close the file
Dialogue: 0,0:21:10.10,0:21:12.50,Chinese,,0,0,0,,两个部分都试图去关闭这个文件
Dialogue: 0,0:21:15.26,0:21:20.04,English,,0,0,0,,So in the book and in this code you'll see
Dialogue: 0,0:21:15.26,0:21:20.04,Chinese,,0,0,0,,在书中和这段代码中
Dialogue: 0,0:21:20.48,0:21:24.58,English,,0,0,0,,We introduce some error handling routines one of which is called perror
Dialogue: 0,0:21:20.48,0:21:24.58,Chinese,,0,0,0,,介绍了一些错误处理例程，其中之一是 perror
Dialogue: 0,0:21:25.16,0:21:30.86,English,,0,0,0,,And all it does is print some not whatever message you want to print
Dialogue: 0,0:21:25.16,0:21:30.86,Chinese,,0,0,0,,其作用是打印部分消息
Dialogue: 0,0:21:31.36,0:21:33.42,English,,0,0,0,,And then it exits the program
Dialogue: 0,0:21:31.36,0:21:33.42,Chinese,,0,0,0,,然后退出程序
Dialogue: 0,0:21:37.16,0:21:41.00,English,,0,0,0,,Or no I guess it doesn't that I'll mention it in a little while
Dialogue: 0,0:21:37.16,0:21:41.00,Chinese,,0,0,0,,不对，好像不是这样，它只打印一条错误消息
Dialogue: 0,0:21:42.18,0:21:44.02,English,,0,0,0,,It just prints an error message
Dialogue: 0,0:21:42.18,0:21:44.02,Chinese,,0,0,0,,这个我们稍后再讲
Dialogue: 0,0:21:44.88,0:21:50.08,English,,0,0,0,,But the point is even something as mundane as closing a file you should be checking the return code
Dialogue: 0,0:21:44.88,0:21:50.08,Chinese,,0,0,0,,总之，即便像关闭文件这样枯燥乏味的操作，也应该检查返回值
Dialogue: 0,0:21:52.08,0:21:55.12,English,,0,0,0,,Okay so this is the function that reads
Dialogue: 0,0:21:52.08,0:21:55.12,Chinese,,0,0,0,,现在我们来看读函数
Dialogue: 0,0:21:56.56,0:21:58.42,English,,0,0,0,,At this low level is called read
Dialogue: 0,0:21:56.56,0:21:58.42,Chinese,,0,0,0,,在低级 I/O 中，读函数就叫 read
Dialogue: 0,0:21:59.22,0:22:01.27,English,,0,0,0,,And it's given a file descriptor
Dialogue: 0,0:21:59.22,0:22:01.27,Chinese,,0,0,0,,调用该函数要给出一个文件描述符
Dialogue: 0,0:22:01.70,0:22:04.18,English,,0,0,0,,You provided a pointer to a buffer
Dialogue: 0,0:22:01.70,0:22:04.18,Chinese,,0,0,0,,还要给出一个指向缓冲区的指针
Dialogue: 0,0:22:04.64,0:22:09.30,English,,0,0,0,,That's you've had to allocate either statically or via malloc
Dialogue: 0,0:22:04.64,0:22:09.30,Chinese,,0,0,0,,缓冲区可以通过静态或 malloc 分配
Dialogue: 0,0:22:10.12,0:22:15.82,English,,0,0,0,,And you also specify how long that buffer is  so that it can't overflow that buffer
Dialogue: 0,0:22:10.12,0:22:15.82,Chinese,,0,0,0,,而且要指定缓冲区的长度，避免溢出
Dialogue: 0,0:22:16.74,0:22:21.96,English,,0,0,0,,And read just means read as many bytes as you feel like
Dialogue: 0,0:22:16.74,0:22:21.96,Chinese,,0,0,0,,所谓 read，是指读入若干字节数
Dialogue: 0,0:22:22.86,0:22:25.06,English,,0,0,0,,But no more than the number I tell you to
Dialogue: 0,0:22:22.86,0:22:25.06,Chinese,,0,0,0,,但不超过指定的最大字节数
Dialogue: 0,0:22:26.08,0:22:28.08,English,,0,0,0,,Which sounds like a weird statement
Dialogue: 0,0:22:26.08,0:22:28.08,Chinese,,0,0,0,,需要指出的是
Dialogue: 0,0:22:28.46,0:22:29.94,English,,0,0,0,,What you mean what you feel like
Dialogue: 0,0:22:28.46,0:22:29.94,Chinese,,0,0,0,,这里的若干字节数
Dialogue: 0,0:22:31.50,0:22:35.74,English,,0,0,0,,Well it has to read at least one byte so if for example it's
Dialogue: 0,0:22:31.50,0:22:35.74,Chinese,,0,0,0,,必须至少是 1 个
Dialogue: 0,0:22:37.18,0:22:41.58,English,,0,0,0,,A standard input it will hang there and wait until
Dialogue: 0,0:22:37.18,0:22:41.58,Chinese,,0,0,0,,例如，在标准输入中，read 将挂起并等待
Dialogue: 0,0:22:41.98,0:22:48.38,English,,0,0,0,,Actually with standard input it will wait until you've typed in a string and hit the return
Dialogue: 0,0:22:41.98,0:22:48.38,Chinese,,0,0,0,,直到你输入一个字符串，然后回车
Dialogue: 0,0:22:49.66,0:22:54.66,English,,0,0,0,,And it will then read at least some fraction of that into the program
Dialogue: 0,0:22:49.66,0:22:54.66,Chinese,,0,0,0,,它就会将该字符串的至少一部分内容读入程序中
Dialogue: 0,0:22:55.66,0:22:59.58,English,,0,0,0,,If it's a network connection again
Dialogue: 0,0:22:55.66,0:22:59.58,Chinese,,0,0,0,,同样地，在网络连接中
Dialogue: 0,0:22:59.76,0:23:05.12,English,,0,0,0,,The read will just wait it will hang until something arrives
Dialogue: 0,0:22:59.76,0:23:05.12,Chinese,,0,0,0,,它也将挂起并等待
Dialogue: 0,0:23:05.22,0:23:10.30,English,,0,0,0,,On that particular network connection and then read in some number of bytes
Dialogue: 0,0:23:05.22,0:23:10.30,Chinese,,0,0,0,,直到新内容进入，它才会读入若干字节
Dialogue: 0,0:23:11.42,0:23:15.48,English,,0,0,0,,That have been sent to it and I'm being vague by saying some number
Dialogue: 0,0:23:11.42,0:23:15.48,Chinese,,0,0,0,,这里我说的“若干”是泛指
Dialogue: 0,0:23:15.88,0:23:20.64,English,,0,0,0,,Because the truth is that there's no guarantee it will read any fixed number of bytes
Dialogue: 0,0:23:15.88,0:23:20.64,Chinese,,0,0,0,,实际上，它读入的字节数不是固定的
Dialogue: 0,0:23:21.86,0:23:23.27,English,,0,0,0,,It will read at least one
Dialogue: 0,0:23:21.86,0:23:23.27,Chinese,,0,0,0,,至少 1 个
Dialogue: 0,0:23:23.90,0:23:26.68,English,,0,0,0,,And it won't read any more than that buffer is
Dialogue: 0,0:23:23.90,0:23:26.68,Chinese,,0,0,0,,最多不超过缓冲区的长度
Dialogue: 0,0:23:27.12,0:23:29.48,English,,0,0,0,,But the number between that might be variable
Dialogue: 0,0:23:27.12,0:23:29.48,Chinese,,0,0,0,,但介于二者之间的字节数都是可以的
Dialogue: 0,0:23:30.02,0:23:35.94,English,,0,0,0,,And so when it reads less than that the number of maximum number bytes you specify
Dialogue: 0,0:23:30.02,0:23:35.94,Chinese,,0,0,0,,当读入的字节数小于指定的最大值时
Dialogue: 0,0:23:35.94,0:23:37.34,English,,0,0,0,,That's called a short read
Dialogue: 0,0:23:35.94,0:23:37.34,Chinese,,0,0,0,,这种情况被称为不足值
Dialogue: 0,0:23:38.50,0:23:41.62,English,,0,0,0,,And that can and does happen and you have to write your code
Dialogue: 0,0:23:38.50,0:23:41.62,Chinese,,0,0,0,,这确实可能发生，所以在写代码时
Dialogue: 0,0:23:41.96,0:23:44.82,English,,0,0,0,,Expecting it and we'll talk about that a little bit
Dialogue: 0,0:23:41.96,0:23:44.82,Chinese,,0,0,0,,要考虑到这种情况，我们稍后还会讲到
Dialogue: 0,0:23:49.98,0:23:55.62,English,,0,0,0,,And so again and by read returns a signed number
Dialogue: 0,0:23:49.98,0:23:55.62,Chinese,,0,0,0,,read 函数也会返回一个有符号的整数
Dialogue: 0,0:23:56.14,0:24:03.22,English,,0,0,0,,Actually of data type ssize_t like s s i z e underscore t
Dialogue: 0,0:23:56.14,0:24:03.22,Chinese,,0,0,0,,数据类型 ssize_t
Dialogue: 0,0:24:03.64,0:24:07.26,English,,0,0,0,,Which is typically a long int
Dialogue: 0,0:24:03.64,0:24:07.26,Chinese,,0,0,0,,通常是一个有符号的长整数
Dialogue: 0,0:24:07.76,0:24:14.32,English,,0,0,0,,So a potentially negative number in it, that number is if it says zero
Dialogue: 0,0:24:07.76,0:24:14.32,Chinese,,0,0,0,,它有可能是负数，如果是 0
Dialogue: 0,0:24:15.50,0:24:19.12,English,,0,0,0,,It means that it's hit it's detected the end of the file
Dialogue: 0,0:24:15.50,0:24:19.12,Chinese,,0,0,0,,表示检测到 EOF
Dialogue: 0,0:24:19.62,0:24:25.26,English,,0,0,0,,That you've run to the end of the stored file that the network connection has been closed or something has happened
Dialogue: 0,0:24:19.62,0:24:25.26,Chinese,,0,0,0,,说明执行到文件结尾或网络连接已经关闭等
Dialogue: 0,0:24:26.16,0:24:30.04,English,,0,0,0,,If it's positive then that's the number of bytes that were read
Dialogue: 0,0:24:26.16,0:24:30.04,Chinese,,0,0,0,,如果是正数，表示已读入的字节数
Dialogue: 0,0:24:30.34,0:24:32.26,English,,0,0,0,,And if it's negative it's an error code
Dialogue: 0,0:24:30.34,0:24:32.26,Chinese,,0,0,0,,如果是负数，表示出错
Dialogue: 0,0:24:39.06,0:24:42.80,English,,0,0,0,,So as I mentioned if it reads fewer than the number of bytes you specify
Dialogue: 0,0:24:39.06,0:24:42.80,Chinese,,0,0,0,,正如我之前提到的，如果读入的字节数少于指定的最大长度
Dialogue: 0,0:24:42.82,0:24:46.62,English,,0,0,0,,That's referred to as a short count and I'll talk about why that would occur
Dialogue: 0,0:24:42.82,0:24:46.62,Chinese,,0,0,0,,这种情况被称为不足值，稍后我会解释为什么会这样
Dialogue: 0,0:24:48.26,0:24:54.46,English,,0,0,0,,Writing is sort of the same idea that you provide a file descriptor you provide a buffer
Dialogue: 0,0:24:48.26,0:24:54.46,Chinese,,0,0,0,,写和读类似，都要给出一个文件描述符
Dialogue: 0,0:24:54.78,0:24:57.94,English,,0,0,0,,Where the data that you want to write out is stored
Dialogue: 0,0:24:54.78,0:24:57.94,Chinese,,0,0,0,,一个用于存储写出数据的缓冲区
Dialogue: 0,0:24:58.56,0:25:01.98,English,,0,0,0,,And you give how many bytes long do you want your write to be
Dialogue: 0,0:24:58.56,0:25:01.98,Chinese,,0,0,0,,以及要写的字节长度
Dialogue: 0,0:25:03.30,0:25:11.52,English,,0,0,0,,And it will write some number of bytes to the output at least one and no more than n bytes
Dialogue: 0,0:25:03.30,0:25:11.52,Chinese,,0,0,0,,可以写出的字节数至少 1 个，最多不超过缓冲区长度
Dialogue: 0,0:25:11.72,0:25:15.52,English,,0,0,0,,But it might not be all of them which is kind of weird because you said
Dialogue: 0,0:25:11.72,0:25:15.52,Chinese,,0,0,0,,但不一定写满
Dialogue: 0,0:25:15.76,0:25:19.92,English,,0,0,0,,I want to write this, I want to send it to a file, I want to send it over the internet
Dialogue: 0,0:25:15.76,0:25:19.92,Chinese,,0,0,0,,虽然我想写这个，我想写到一个文件，我想通过互联网发送
Dialogue: 0,0:25:20.66,0:25:23.80,English,,0,0,0,,But it can potentially not send them all
Dialogue: 0,0:25:20.66,0:25:23.80,Chinese,,0,0,0,,但可能无法全部发送
Dialogue: 0,0:25:25.38,0:25:28.10,English,,0,0,0,,And we'll talk about that a little bit
Dialogue: 0,0:25:25.38,0:25:28.10,Chinese,,0,0,0,,这种情况也被称为不足值
Dialogue: 0,0:25:28.58,0:25:30.64,English,,0,0,0,,So again that's called a short write
Dialogue: 0,0:25:28.58,0:25:30.64,Chinese,,0,0,0,,这个稍后我会再讲
Dialogue: 0,0:25:33.08,0:25:36.62,English,,0,0,0,,And similarly it will return the number of bytes that were written
Dialogue: 0,0:25:33.08,0:25:36.62,Chinese,,0,0,0,,同样地，写操作也会返回已写的字节数
Dialogue: 0,0:25:37.36,0:25:41.16,English,,0,0,0,,And so if it's less than zero that's an error code
Dialogue: 0,0:25:37.36,0:25:41.16,Chinese,,0,0,0,,如果是负数，表示出错
Dialogue: 0,0:25:44.38,0:25:48.60,English,,0,0,0,,So just to give you a really simple example of this in action
Dialogue: 0,0:25:44.38,0:25:48.60,Chinese,,0,0,0,,下面简单举个例子
Dialogue: 0,0:25:48.82,0:25:54.28,English,,0,0,0,,This code does what you call echoing meaning that you type in something and it will print it out
Dialogue: 0,0:25:48.82,0:25:54.28,Chinese,,0,0,0,,这段代码会把输入的内容一次一个字节打印出来
Dialogue: 0,0:25:55.02,0:25:57.48,English,,0,0,0,,And it does it in the most mundane way possible
Dialogue: 0,0:25:55.02,0:25:57.48,Chinese,,0,0,0,,用一种最机械的方式
Dialogue: 0,0:25:58.04,0:26:03.02,English,,0,0,0,,By reading specifying a single byte reads and a single byte writes
Dialogue: 0,0:25:58.04,0:26:03.02,Chinese,,0,0,0,,指定每次读入 1 个字节，便写出 1 个字节
Dialogue: 0,0:26:03.72,0:26:09.20,English,,0,0,0,,So you remember I told you read will read at least one byte, but no more than the number you've told it
Dialogue: 0,0:26:03.72,0:26:09.20,Chinese,,0,0,0,,我之前说过，读操作时至少读入 1 个字节，但不超过指定的字节数
Dialogue: 0,0:26:09.96,0:26:13.34,English,,0,0,0,,So when you give it one, it means it will read exactly one byte
Dialogue: 0,0:26:09.96,0:26:13.34,Chinese,,0,0,0,,因此，当指定读入的字节数为 1 时，它肯定只读 1 个字节
Dialogue: 0,0:26:13.40,0:26:18.94,English,,0,0,0,,And similarly with write if you say write one byte that's guaranteed to happen
Dialogue: 0,0:26:13.40,0:26:18.94,Chinese,,0,0,0,,同理，当指定写出的字节数为 1 时，它肯定只写 1 个字节
Dialogue: 0,0:26:20.68,0:26:23.84,English,,0,0,0,,And so this is really really bad code
Dialogue: 0,0:26:20.68,0:26:23.84,Chinese,,0,0,0,,这其实是一段非常糟糕的代码
Dialogue: 0,0:26:24.44,0:26:27.62,English,,0,0,0,,In the sense that call to read or to write
Dialogue: 0,0:26:24.44,0:26:27.62,Chinese,,0,0,0,,从读、写调用的角度来说
Dialogue: 0,0:26:27.62,0:26:31.14,English,,0,0,0,,The system level call is a relatively expensive call
Dialogue: 0,0:26:27.62,0:26:31.14,Chinese,,0,0,0,,系统级调用的开销是比较大的
Dialogue: 0,0:26:31.70,0:26:38.32,English,,0,0,0,,It means kicking your whole operation up to the operating system doing what's called a context switch
Dialogue: 0,0:26:31.70,0:26:38.32,Chinese,,0,0,0,,这意味着将操作过程全抛给操作系统，执行所谓的上下文切换
Dialogue: 0,0:26:39.28,0:26:46.86,English,,0,0,0,,Meaning it will go into the kernel of the system invoke operating system functions
Dialogue: 0,0:26:39.28,0:26:46.86,Chinese,,0,0,0,,为此，它会进入系统内核，调用操作系统函数
Dialogue: 0,0:26:47.72,0:26:53.54,English,,0,0,0,,Do whatever the read or write tells it to do come back out switch back to your job
Dialogue: 0,0:26:47.72,0:26:53.54,Chinese,,0,0,0,,按指令完成读、写操作，再切回到先前的工作
Dialogue: 0,0:26:53.88,0:26:59.40,English,,0,0,0,,And that will typically take maybe 20,000 to 40,000 clock cycles
Dialogue: 0,0:26:53.88,0:26:59.40,Chinese,,0,0,0,,这个过程通常需要 20,000 到 40,000 个时钟周期
Dialogue: 0,0:27:00.12,0:27:05.10,English,,0,0,0,,Which you know a clock cycle nowadays is less than a nanosecond so you say
Dialogue: 0,0:27:00.12,0:27:05.10,Chinese,,0,0,0,,现在的电脑 1 个时钟周期不到 1 纳秒，所以大家可能会说
Dialogue: 0,0:27:05.40,0:27:08.04,English,,0,0,0,,Yeah it's a you're talking
Dialogue: 0,0:27:05.40,0:27:08.04,Chinese,,0,0,0,,20,000 到 40,000 个时钟周期
Dialogue: 0,0:27:08.84,0:27:11.68,English,,0,0,0,,Maybe 10 microseconds what's the big deal there
Dialogue: 0,0:27:08.84,0:27:11.68,Chinese,,0,0,0,,才不过 10 微秒，没什么大不了
Dialogue: 0,0:27:12.22,0:27:16.84,English,,0,0,0,,But that'll add up if you start sending long files out over
Dialogue: 0,0:27:12.22,0:27:16.84,Chinese,,0,0,0,,但如果发送的是长文件，时间消耗不容小觑
Dialogue: 0,0:27:17.44,0:27:22.62,English,,0,0,0,,You know millions of bytes if you start sending them a one byte at a time
Dialogue: 0,0:27:17.44,0:27:22.62,Chinese,,0,0,0,,例如，对于一个数百万字节的文件，如果每次发送 1 个字节
Dialogue: 0,0:27:23.82,0:27:29.90,English,,0,0,0,,You'll spend most of that time sitting in the operating system going crazy
Dialogue: 0,0:27:23.82,0:27:29.90,Chinese,,0,0,0,,你的大部分时间将是坐在操作系统前等待，这会让人抓狂
Dialogue: 0,0:27:31.38,0:27:36.10,English,,0,0,0,,So this is not a good idea but it does work and that's actually a easy mistake
Dialogue: 0,0:27:31.38,0:27:36.10,Chinese,,0,0,0,,所以这不是一个好主意，但确实可以运行
Dialogue: 0,0:27:36.10,0:27:41.96,English,,0,0,0,,You can make as a programmer is to not use is to use the low level writing and reading
Dialogue: 0,0:27:36.10,0:27:41.96,Chinese,,0,0,0,,实际上，像这样调用低级读写是程序员容易犯的一个错误
Dialogue: 0,0:27:42.52,0:27:46.52,English,,0,0,0,,And the program will function fine it's just it will be really really slow
Dialogue: 0,0:27:42.52,0:27:46.52,Chinese,,0,0,0,,虽然程序运行正常，但是真的很慢
Dialogue: 0,0:27:47.60,0:27:52.20,English,,0,0,0,,But just to give you a demo of this idea of
Dialogue: 0,0:27:47.60,0:27:52.20,Chinese,,0,0,0,,我来给大家做个演示
Dialogue: 0,0:27:55.04,0:27:56.78,English,,0,0,0,,Calls to the operating system
Dialogue: 0,0:27:55.04,0:27:56.78,Chinese,,0,0,0,,便于理解这种操作系统调用的概念
Dialogue: 0,0:27:57.54,0:27:59.10,English,,0,0,0,,There's a pretty cool...
Dialogue: 0,0:27:57.54,0:27:59.10,Chinese,,0,0,0,,有一个很酷的……
Dialogue: 0,0:28:03.14,0:28:05.78,English,,0,0,0,,So this program and this is on the web
Dialogue: 0,0:28:03.14,0:28:05.78,Chinese,,0,0,0,,先介绍一下这个程序
Dialogue: 0,0:28:05.96,0:28:09.58,English,,0,0,0,,Linked off the webpage the code for this lecture
Dialogue: 0,0:28:05.96,0:28:09.58,Chinese,,0,0,0,,它可以通过课程内网链接访问
Dialogue: 0,0:28:10.14,0:28:15.32,English,,0,0,0,,So this one called cpstdin meaning copy standard input
Dialogue: 0,0:28:10.14,0:28:15.32,Chinese,,0,0,0,,键入 cpstdin，意思是复制标准输入
Dialogue: 0,0:28:16.58,0:28:18.62,English,,0,0,0,,Is just the code I showed you
Dialogue: 0,0:28:16.58,0:28:18.62,Chinese,,0,0,0,,它用的代码就是我之前向大家展示的那段
Dialogue: 0,0:28:18.62,0:28:21.40,English,,0,0,0,,So if you type something it will just echo it back
Dialogue: 0,0:28:18.62,0:28:21.40,Chinese,,0,0,0,,键入什么，就会输出什么
Dialogue: 0,0:28:24.14,0:28:28.82,English,,0,0,0,,So it's reading in...so it looks to you and to me
Dialogue: 0,0:28:24.14,0:28:28.82,Chinese,,0,0,0,,表面上看起来
Dialogue: 0,0:28:30.82,0:28:32.02,English,,0,0,0,,Like it's
Dialogue: 0,0:28:30.82,0:28:32.02,Chinese,,0,0,0,,似乎
Dialogue: 0,0:28:35.88,0:28:41.20,English,,0,0,0,,Reading a line of text and then echoing it back but what it's actually doing
Dialogue: 0,0:28:35.88,0:28:41.20,Chinese,,0,0,0,,它是先读完一行文本后再将其写出
Dialogue: 0,0:28:42.74,0:28:49.56,English,,0,0,0,,Is again the interface to the terminal is one that it doesn't actually wake up this code until it gets a complete line
Dialogue: 0,0:28:42.74,0:28:49.56,Chinese,,0,0,0,,这是因为终端的接口决定它必须读入完整的一行后才会唤醒这段代码
Dialogue: 0,0:28:49.98,0:28:54.14,English,,0,0,0,,But it's actually just printing these characters back one character at a time
Dialogue: 0,0:28:49.98,0:28:54.14,Chinese,,0,0,0,,实际上，它只是一次一个字节地将这些字符打印出来
Dialogue: 0,0:28:55.86,0:29:00.24,English,,0,0,0,,And I can demo that by there's a pretty interesting
Dialogue: 0,0:28:55.86,0:29:00.24,Chinese,,0,0,0,,我可以给大家做个演示
Dialogue: 0,0:29:02.06,0:29:04.74,English,,0,0,0,,Facility called tracing strace
Dialogue: 0,0:29:02.06,0:29:04.74,Chinese,,0,0,0,,有一个很有趣的追踪工具 strace
Dialogue: 0,0:29:06.62,0:29:09.62,English,,0,0,0,,And what strace will do if you give it the name of a program
Dialogue: 0,0:29:06.62,0:29:09.62,Chinese,,0,0,0,,如果给它提供一个程序名
Dialogue: 0,0:29:10.26,0:29:16.02,English,,0,0,0,,Is it will detect every system call that you make
Dialogue: 0,0:29:10.26,0:29:16.02,Chinese,,0,0,0,,它就会检测出
Dialogue: 0,0:29:16.70,0:29:20.30,English,,0,0,0,,Every basically call to the operating system functions
Dialogue: 0,0:29:16.70,0:29:20.30,Chinese,,0,0,0,,程序运行时
Dialogue: 0,0:29:20.98,0:29:23.40,English,,0,0,0,,That you make when you run a program
Dialogue: 0,0:29:20.98,0:29:23.40,Chinese,,0,0,0,,对操作系统函数的几乎所有调用
Dialogue: 0,0:29:23.86,0:29:28.84,English,,0,0,0,,And it will generally spew out this huge amount of inscrutable stuff that you don't really want to see
Dialogue: 0,0:29:23.86,0:29:28.84,Chinese,,0,0,0,,然后列出一堆很复杂的内容
Dialogue: 0,0:29:29.40,0:29:30.96,English,,0,0,0,,I'll just show you this
Dialogue: 0,0:29:29.40,0:29:30.96,Chinese,,0,0,0,,给大家看一下
Dialogue: 0,0:29:32.86,0:29:38.28,English,,0,0,0,,It's telling you logging every single call and it's usually way too much stuff
Dialogue: 0,0:29:32.86,0:29:38.28,Chinese,,0,0,0,,它会记录每次调用，但全部显示的话内容又太多
Dialogue: 0,0:29:39.18,0:29:41.12,English,,0,0,0,,So the more useful way to do this
Dialogue: 0,0:29:39.18,0:29:41.12,Chinese,,0,0,0,,这时候可以
Dialogue: 0,0:29:42.46,0:29:50.68,English,,0,0,0,,Is to give it an argument that says I only want to watch some limited class of functions when this is running
Dialogue: 0,0:29:42.46,0:29:50.68,Chinese,,0,0,0,,定义一个参数，指定只显示某些函数
Dialogue: 0,0:29:50.76,0:29:55.80,English,,0,0,0,,And so what I just want our calls to the write the low level output write
Dialogue: 0,0:29:50.76,0:29:55.80,Chinese,,0,0,0,,如果只看对低级输出 write 函数的调用
Dialogue: 0,0:29:57.94,0:30:02.14,English,,0,0,0,,And you'll see that what happens then is this string I typed in
Dialogue: 0,0:29:57.94,0:30:02.14,Chinese,,0,0,0,,大家就会看到键入的这个字符串
Dialogue: 0,0:30:03.30,0:30:07.58,English,,0,0,0,,Turned into a series of 1 byte writes
Dialogue: 0,0:30:03.30,0:30:07.58,Chinese,,0,0,0,,变成了一系列 1 个字节的写操作
Dialogue: 0,0:30:08.08,0:30:10.68,English,,0,0,0,,Calls to the low level write function
Dialogue: 0,0:30:08.08,0:30:10.68,Chinese,,0,0,0,,这些就是对低级 write 函数的调用
Dialogue: 0,0:30:12.80,0:30:16.64,English,,0,0,0,,And of course same way I could show you the reads and writes
Dialogue: 0,0:30:12.80,0:30:16.64,Chinese,,0,0,0,,同样地，也可以查看对读写的调用
Dialogue: 0,0:30:18.88,0:30:19.54,English,,0,0,0,,Let's try that
Dialogue: 0,0:30:18.88,0:30:19.54,Chinese,,0,0,0,,我们来试一试
Dialogue: 0,0:30:25.18,0:30:29.70,English,,0,0,0,,And it's all confused because I'm measuring this comes out on standard error
Dialogue: 0,0:30:25.18,0:30:29.70,Chinese,,0,0,0,,这看起来比较乱，我猜可能是因为这是基于标准错误显示的
Dialogue: 0,0:30:30.16,0:30:34.64,English,,0,0,0,,But on the terminal it's sort of interleaving standard error and standard out, so it's kind of messy to look at
Dialogue: 0,0:30:30.16,0:30:34.64,Chinese,,0,0,0,,但在终端上标准错误与标准输出相互交织，所以显示出来的内容比较乱
Dialogue: 0,0:30:35.36,0:30:39.04,English,,0,0,0,,But again you can see that it's taking my characters
Dialogue: 0,0:30:35.36,0:30:39.04,Chinese,,0,0,0,,但大家仍然可以看到键入的字符
Dialogue: 0,0:30:39.50,0:30:42.12,English,,0,0,0,,And it's reading 1 and writing 1 in this loop
Dialogue: 0,0:30:39.50,0:30:42.12,Chinese,,0,0,0,,被 1 个字节地读、1 个字节地写，循环往复
Dialogue: 0,0:30:48.76,0:30:53.44,English,,0,0,0,,So let's see Ctrl+D to get out of it back to the code
Dialogue: 0,0:30:48.76,0:30:53.44,Chinese,,0,0,0,,Ctrl+D 退出，回到幻灯片中的代码
Dialogue: 0,0:31:02.26,0:31:05.24,English,,0,0,0,,So what's this short count business why would that occur
Dialogue: 0,0:31:02.26,0:31:05.24,Chinese,,0,0,0,,那么为什么会出现不足值
Dialogue: 0,0:31:05.90,0:31:09.40,English,,0,0,0,,Well there's a couple of ones as I mentioned if you counter an end-of-file
Dialogue: 0,0:31:05.90,0:31:09.40,Chinese,,0,0,0,,我提到过，如果遇到 EOF
Dialogue: 0,0:31:09.66,0:31:13.58,English,,0,0,0,,You're not going to read in however many bytes you are given for the buffer
Dialogue: 0,0:31:09.66,0:31:13.58,Chinese,,0,0,0,,无论指定的缓冲区有多长，都会停止读入
Dialogue: 0,0:31:15.08,0:31:18.52,English,,0,0,0,,If you are reading text lines from a terminal
Dialogue: 0,0:31:15.08,0:31:18.52,Chinese,,0,0,0,,如果是从终端读取文本行
Dialogue: 0,0:31:19.98,0:31:24.02,English,,0,0,0,,The terminal handler will just send a line
Dialogue: 0,0:31:19.98,0:31:24.02,Chinese,,0,0,0,,终端处理器每遇到新行符就会停止
Dialogue: 0,0:31:24.22,0:31:27.74,English,,0,0,0,,It's worth at a time with the newline character terminating it
Dialogue: 0,0:31:24.22,0:31:27.74,Chinese,,0,0,0,,所以每次只发送一行文字
Dialogue: 0,0:31:28.38,0:31:31.34,English,,0,0,0,,If you're reading or writing a network packet
Dialogue: 0,0:31:28.38,0:31:31.34,Chinese,,0,0,0,,如果是读写网络数据包
Dialogue: 0,0:31:31.96,0:31:36.14,English,,0,0,0,,The way network packets work is that or messages
Dialogue: 0,0:31:31.96,0:31:36.14,Chinese,,0,0,0,,网络数据包的工作方式是
Dialogue: 0,0:31:36.14,0:31:39.48,English,,0,0,0,,If you have a big long message it's broken into smaller chunks
Dialogue: 0,0:31:36.14,0:31:39.48,Chinese,,0,0,0,,如果是一条很长的消息，它会被分割成多个小数据块
Dialogue: 0,0:31:42.86,0:31:45.38,English,,0,0,0,,Typically about a thousand bytes or so. [Question]
Dialogue: 0,0:31:42.86,0:31:45.38,Chinese,,0,0,0,,每块通常约 1000 个字节，请讲
Dialogue: 0,0:31:45.38,0:31:52.64,English,,0,0,0,,[Student speaking]
Dialogue: 0,0:31:45.38,0:31:52.64,Chinese,,0,0,0,,「学生提问」
Dialogue: 0,0:31:52.66,0:31:56.68,English,,0,0,0,,If you are trying to read from an end-of-file return 0
Dialogue: 0,0:31:52.66,0:31:56.68,Chinese,,0,0,0,,如果从 EOF 读，则返回 0
Dialogue: 0,0:32:01.12,0:32:05.00,English,,0,0,0,,Is that a short count it's a really short count yes but it's not a negative
Dialogue: 0,0:32:01.12,0:32:05.00,Chinese,,0,0,0,,这是不是不足值？是，确实是不足值，但不会返回负数
Dialogue: 0,0:32:06.68,0:32:10.38,English,,0,0,0,,Yes so as it says here if you encounter an end-of-file
Dialogue: 0,0:32:06.68,0:32:10.38,Chinese,,0,0,0,,是的，正如这里提到的遇到 EOF 的情况
Dialogue: 0,0:32:11.54,0:32:14.86,English,,0,0,0,,It will actually there's two things actually it's a really good question
Dialogue: 0,0:32:11.54,0:32:14.86,Chinese,,0,0,0,,这是一个非常好的问题。实际上发生了两件事
Dialogue: 0,0:32:15.28,0:32:21.08,English,,0,0,0,,If you're like near the end of a file you have a hundred bytes left and you say read 200
Dialogue: 0,0:32:15.28,0:32:21.08,Chinese,,0,0,0,,如果接近 EOF，假设还剩 100 个字节，但你指定读入 200 个字节
Dialogue: 0,0:32:22.14,0:32:24.32,English,,0,0,0,,Your first call to read will come back and
Dialogue: 0,0:32:22.14,0:32:24.32,Chinese,,0,0,0,,第一次调用 read 时
Dialogue: 0,0:32:24.78,0:32:28.56,English,,0,0,0,,Get 100 character it would say 100 and it will get that number
Dialogue: 0,0:32:24.78,0:32:28.56,Chinese,,0,0,0,,它将读入 100 个字节并返回 100
Dialogue: 0,0:32:29.12,0:32:32.80,English,,0,0,0,,And then you call again the second time and it will return zero
Dialogue: 0,0:32:29.12,0:32:32.80,Chinese,,0,0,0,,然后进行第二次调用，它将返回 0
Dialogue: 0,0:32:33.18,0:32:36.28,English,,0,0,0,,And so that's how you actually detect the true end of file
Dialogue: 0,0:32:33.18,0:32:36.28,Chinese,,0,0,0,,我们实际上是这样检测到 EOF 的
Dialogue: 0,0:32:36.78,0:32:41.08,English,,0,0,0,,As opposed to you know some other reason you might have gotten a short count is if that
Dialogue: 0,0:32:36.78,0:32:41.08,Chinese,,0,0,0,,这与其它不足值情况不同
Dialogue: 0,0:32:41.46,0:32:45.30,English,,0,0,0,,You actually get a read of 0 the only case you'll get that for is an end-of-file
Dialogue: 0,0:32:41.46,0:32:45.30,Chinese,,0,0,0,,返回值为 0 的唯一可能就是遇到 EOF
Dialogue: 0,0:32:45.56,0:32:48.56,English,,0,0,0,,So that's a good question thanks
Dialogue: 0,0:32:45.56,0:32:48.56,Chinese,,0,0,0,,你提了一个很好的问题，谢谢
Dialogue: 0,0:32:50.08,0:32:55.98,English,,0,0,0,,So again if over the internet typically packets are around a thousand bytes
Dialogue: 0,0:32:50.08,0:32:55.98,Chinese,,0,0,0,,回到刚才讲的内容，通过互联网发送的数据包通常约 1000 个字节
Dialogue: 0,0:32:55.98,0:33:02.36,English,,0,0,0,,It actually depends on where it's gone through what layers in the protocols it's gone through
Dialogue: 0,0:32:55.98,0:33:02.36,Chinese,,0,0,0,,实际取决于它要通过的是协议中的哪一层
Dialogue: 0,0:33:02.36,0:33:08.40,English,,0,0,0,,But 1500 bytes is actually the standard what they call minimum transmission unit
Dialogue: 0,0:33:02.36,0:33:08.40,Chinese,,0,0,0,,但一般是 1500 个字节，这就是标准的最小传输单元
Dialogue: 0,0:33:08.88,0:33:12.26,English,,0,0,0,,So if you have a big long file it will come back in blocks like that
Dialogue: 0,0:33:08.88,0:33:12.26,Chinese,,0,0,0,,因此，一个大的文件就会被分割成像那样的小数据块
Dialogue: 0,0:33:12.86,0:33:15.40,English,,0,0,0,,And if you're trying to read into a larger buffer
Dialogue: 0,0:33:12.86,0:33:15.40,Chinese,,0,0,0,,如果想将该文件读入一个较大的缓冲区
Dialogue: 0,0:33:15.88,0:33:18.71,English,,0,0,0,,It will typically come back in chunks
Dialogue: 0,0:33:15.88,0:33:18.71,Chinese,,0,0,0,,它通常也是按块读入
Dialogue: 0,0:33:19.32,0:33:19.84,English,,0,0,0,,[Question]
Dialogue: 0,0:33:19.32,0:33:19.84,Chinese,,0,0,0,,请讲
Dialogue: 0,0:33:19.86,0:33:24.44,English,,0,0,0,,[Student speaking]
Dialogue: 0,0:33:19.86,0:33:24.44,Chinese,,0,0,0,,「学生提问」
Dialogue: 0,0:33:25.92,0:33:27.38,English,,0,0,0,,No in other words you
Dialogue: 0,0:33:25.92,0:33:27.38,Chinese,,0,0,0,,不，缓冲区大小没有统一的标准
Dialogue: 0,0:33:27.88,0:33:35.38,English,,0,0,0,,And again if you're writing code you shouldn't expect any number particularly it will be dependent on the implementation
Dialogue: 0,0:33:27.88,0:33:35.38,Chinese,,0,0,0,,在写代码时不用考虑缓冲区的大小，它将取决于具体的代码实现
Dialogue: 0,0:33:35.38,0:33:43.54,English,,0,0,0,,[Student speaking]
Dialogue: 0,0:33:35.38,0:33:43.54,Chinese,,0,0,0,,「学生提问」
Dialogue: 0,0:33:43.54,0:33:48.10,English,,0,0,0,,No because I'm only reading or writing one character at a time right
Dialogue: 0,0:33:43.54,0:33:48.10,Chinese,,0,0,0,,不是，因为每次只读或只写一个字符，对吧
Dialogue: 0,0:33:49.42,0:33:57.70,English,,0,0,0,,So I guess you're asking what if I like spend a week typing characters in a really long string and hit return
Dialogue: 0,0:33:49.42,0:33:57.70,Chinese,,0,0,0,,我想你要问的是，如果花一周的时间键入一长串字符后再回车会发生什么
Dialogue: 0,0:33:58.10,0:34:01.10,English,,0,0,0,,I don't know if you try it let me know the answer
Dialogue: 0,0:33:58.10,0:34:01.10,Chinese,,0,0,0,,我不知道，你试完告诉我
Dialogue: 0,0:34:03.90,0:34:09.20,English,,0,0,0,,But it won't cause an error but that part believe me they've really gone through that code a lot of times
Dialogue: 0,0:34:03.90,0:34:09.20,Chinese,,0,0,0,,它不会导致错误，但相信我这段代码有人已经试过很多次
Dialogue: 0,0:34:09.64,0:34:14.10,English,,0,0,0,,And gotten rid of all those lurking buffer overflow vulnerabilities in the code
Dialogue: 0,0:34:09.64,0:34:14.10,Chinese,,0,0,0,,并克服了代码中所有潜在的缓冲区溢出漏洞
Dialogue: 0,0:34:15.00,0:34:17.04,English,,0,0,0,,But we'll let you do it I don't actually know
Dialogue: 0,0:34:15.00,0:34:17.04,Chinese,,0,0,0,,但我本人没有试过，也不反对你去试
Dialogue: 0,0:34:18.02,0:34:22.72,English,,0,0,0,,But within the you should write your code again expecting short counts as a possibility
Dialogue: 0,0:34:18.02,0:34:22.72,Chinese,,0,0,0,,总之，写代码时应该考虑到可能出现不足值
Dialogue: 0,0:34:23.04,0:34:26.98,English,,0,0,0,,And by the way that's one of the the headaches of using this low-level I/O is
Dialogue: 0,0:34:23.04,0:34:26.98,Chinese,,0,0,0,,不过，使用这种低级 I/O 的一个麻烦就是
Dialogue: 0,0:34:27.40,0:34:32.14,English,,0,0,0,,Is dealing with short counts it's often sort of a nuisance of an application level
Dialogue: 0,0:34:27.40,0:34:32.14,Chinese,,0,0,0,,处理不足值，这通常是一种应用程序级别的麻烦
Dialogue: 0,0:34:33.26,0:34:42.46,English,,0,0,0,,So you don't you usually package this kind of low-level file I/O into other libraries that you're calling
Dialogue: 0,0:34:33.26,0:34:42.46,Chinese,,0,0,0,,因此通常会将此类低级 I/O 操作封装到正在调用的其它库中
Dialogue: 0,0:34:42.46,0:34:46.88,English,,0,0,0,,It's only where we're demonstrating this is the sort of lowest level in the stack
Dialogue: 0,0:34:42.46,0:34:46.88,Chinese,,0,0,0,,只不过我们讲的是最低级的操作
Dialogue: 0,0:34:52.26,0:34:55.22,English,,0,0,0,,And writing also can give you a short count
Dialogue: 0,0:34:52.26,0:34:55.22,Chinese,,0,0,0,,写也会出现不足值
Dialogue: 0,0:34:55.32,0:35:01.32,English,,0,0,0,,For example if you're sending packets over a network it will only send as many as is that packet can hold
Dialogue: 0,0:34:55.32,0:35:01.32,Chinese,,0,0,0,,例如，通过网络发送数据包时，它只会发送该包可以容纳的字节数
Dialogue: 0,0:35:01.90,0:35:06.80,English,,0,0,0,,And then return back to you and you have to keep pumping them out to send the different packets
Dialogue: 0,0:35:01.90,0:35:06.80,Chinese,,0,0,0,,然后返回，你必须把数据抽取出来按包发送
Dialogue: 0,0:35:07.90,0:35:13.76,English,,0,0,0,,And so usually when you write code that uses this goal of while you have to anticipate these short counts
Dialogue: 0,0:35:07.90,0:35:13.76,Chinese,,0,0,0,,因此，通常在编写使用 while 循环的代码时，必须考虑到不足值的情况
Dialogue: 0,0:35:15.90,0:35:21.64,English,,0,0,0,,So professor O'Halloran wrote a package called RIO
Dialogue: 0,0:35:15.90,0:35:21.64,Chinese,,0,0,0,,因此，O'Halloran 教授写了一个名为 RIO 的软件包
Dialogue: 0,0:35:22.06,0:35:27.52,English,,0,0,0,,And you'll...for now we'll just talk about what this package is
Dialogue: 0,0:35:22.06,0:35:27.52,Chinese,,0,0,0,,现在我们来讲这个软件包
Dialogue: 0,0:35:27.52,0:35:32.68,English,,0,0,0,,This is a package that you really going to want to use for the final lab for the course
Dialogue: 0,0:35:27.52,0:35:32.68,Chinese,,0,0,0,,该软件包非常适用于本课程最后的实验
Dialogue: 0,0:35:33.20,0:35:39.20,English,,0,0,0,,And so for right now it's more of a high-level here's an example of code that uses low-level I/O
Dialogue: 0,0:35:33.20,0:35:39.20,Chinese,,0,0,0,,RIO 是一种更高级的软件包，但使用了低级 I/O 的操作
Dialogue: 0,0:35:39.68,0:35:42.96,English,,0,0,0,,And packages up in a way that makes it a little bit more palatable
Dialogue: 0,0:35:39.68,0:35:42.96,Chinese,,0,0,0,,只是进行了更好的封装，使用起来更方便
Dialogue: 0,0:35:43.84,0:35:47.36,English,,0,0,0,,So RIO provides actually a number of different, two different
Dialogue: 0,0:35:43.84,0:35:47.36,Chinese,,0,0,0,,准确来说
Dialogue: 0,0:35:49.66,0:35:51.64,English,,0,0,0,,Well actually three
Dialogue: 0,0:35:49.66,0:35:51.64,Chinese,,0,0,0,,RIO 提供了两种
Dialogue: 0,0:35:52.48,0:36:00.60,English,,0,0,0,,Two different levels of interface to this file I/O
Dialogue: 0,0:35:52.48,0:36:00.60,Chinese,,0,0,0,,不同级别的 I/O 文件接口
Dialogue: 0,0:36:00.96,0:36:06.06,English,,0,0,0,,The lowest one is basically just a fairly small wrapper around
Dialogue: 0,0:36:00.96,0:36:06.06,Chinese,,0,0,0,,最低级别的接口只对
Dialogue: 0,0:36:08.46,0:36:12.00,English,,0,0,0,,The existing the I/O the reads and writes you saw
Dialogue: 0,0:36:08.46,0:36:12.00,Chinese,,0,0,0,,低级 I/O 读写进行了简单封装
Dialogue: 0,0:36:12.46,0:36:14.60,English,,0,0,0,,That will handle the short count issue
Dialogue: 0,0:36:12.46,0:36:14.60,Chinese,,0,0,0,,从而解决不足值问题
Dialogue: 0,0:36:15.16,0:36:21.62,English,,0,0,0,,And so when you say with RIO if you make a call to the readn function and you say some number of bytes
Dialogue: 0,0:36:15.16,0:36:21.62,Chinese,,0,0,0,,举个例子，如果调用 RIO 包中的 readn 函数并指定字节数
Dialogue: 0,0:36:22.40,0:36:27.08,English,,0,0,0,,Then that function will not return until it's read that number of bytes
Dialogue: 0,0:36:22.40,0:36:27.08,Chinese,,0,0,0,,在读完该字节数之前函数不会返回
Dialogue: 0,0:36:27.20,0:36:33.56,English,,0,0,0,,So better be careful that many bytes are there if it's a network socket or a file
Dialogue: 0,0:36:27.20,0:36:33.56,Chinese,,0,0,0,,但如果处理的是包含很多字节的网络套接字或其他文件，需要多加注意
Dialogue: 0,0:36:33.82,0:36:37.52,English,,0,0,0,,Well because it will flag an error message
Dialogue: 0,0:36:33.82,0:36:37.52,Chinese,,0,0,0,,因为
Dialogue: 0,0:36:37.52,0:36:44.44,English,,0,0,0,,If it's...will actually hang up if it's a network connection waiting to read the bytes
Dialogue: 0,0:36:37.52,0:36:44.44,Chinese,,0,0,0,,如果是网络连接，它将挂起并等待
Dialogue: 0,0:36:45.18,0:36:49.08,English,,0,0,0,,Or return an error if it hits an end of file what it's not expected
Dialogue: 0,0:36:45.18,0:36:49.08,Chinese,,0,0,0,,如果是读到不期望的 EOF，它将返回错误
Dialogue: 0,0:36:49.64,0:36:54.02,English,,0,0,0,,And similarly with writen is sort of a wrapper around the write function
Dialogue: 0,0:36:49.64,0:36:54.02,Chinese,,0,0,0,,同样地，RIO 中的 writen 函数也对 write 函数进行了简单封装
Dialogue: 0,0:36:54.36,0:36:59.34,English,,0,0,0,,That will deal with...just loop until the short counts are taken care of
Dialogue: 0,0:36:54.36,0:36:59.34,Chinese,,0,0,0,,它将一直循环直到不足值问题被妥善处理
Dialogue: 0,0:37:00.70,0:37:06.26,English,,0,0,0,,And then there is another class of of I/O that's called buffered I/O
Dialogue: 0,0:37:00.70,0:37:06.26,Chinese,,0,0,0,,另一种 I/O 是带缓冲的 I/O
Dialogue: 0,0:37:06.78,0:37:09.18,English,,0,0,0,,And this is what you really want to use in practice
Dialogue: 0,0:37:06.78,0:37:09.18,Chinese,,0,0,0,,这类 I/O 在实践中经常用到
Dialogue: 0,0:37:09.74,0:37:15.20,English,,0,0,0,,And what you mostly use with the standard Unix I/O functions
Dialogue: 0,0:37:09.74,0:37:15.20,Chinese,,0,0,0,,也最常与标准的 Unix I/O 函数一起使用
Dialogue: 0,0:37:15.72,0:37:20.26,English,,0,0,0,,Is that you want to within the the user code build up a little buffer of
Dialogue: 0,0:37:15.72,0:37:20.26,Chinese,,0,0,0,,它会在用户代码中建立一个小的缓冲区
Dialogue: 0,0:37:20.90,0:37:26.94,English,,0,0,0,,Of bytes that have either been read in but not yet consumed by the application program
Dialogue: 0,0:37:20.90,0:37:26.94,Chinese,,0,0,0,,用来存放已读但还未被应用程序使用的字节
Dialogue: 0,0:37:27.38,0:37:31.02,English,,0,0,0,,Or you accumulate some number of bytes in your program
Dialogue: 0,0:37:27.38,0:37:31.02,Chinese,,0,0,0,,或用来在程序中存放一些字节
Dialogue: 0,0:37:31.18,0:37:35.56,English,,0,0,0,,Before it's actually shoved out into the file or out onto the network
Dialogue: 0,0:37:31.18,0:37:35.56,Chinese,,0,0,0,,以便未来输出文件或网络中
Dialogue: 0,0:37:38.12,0:37:46.90,English,,0,0,0,,And there's two versions of that one is a text oriented line oriented I/O and the other is just a byte oriented I/O
Dialogue: 0,0:37:38.12,0:37:46.90,Chinese,,0,0,0,,带缓冲的 I/O 有两种，一种是基于文本，另一种是基于字节
Dialogue: 0,0:37:50.12,0:37:55.62,English,,0,0,0,,So let's go through what the functions are and actually look at the code for them
Dialogue: 0,0:37:50.12,0:37:55.62,Chinese,,0,0,0,,我们来具体看看这些函数及其对应的代码
Dialogue: 0,0:37:56.04,0:38:00.04,English,,0,0,0,,So as I mentioned the ones called readn and writen are just very same
Dialogue: 0,0:37:56.04,0:38:00.04,Chinese,,0,0,0,,正如我提到的，readn 和 writen
Dialogue: 0,0:38:00.04,0:38:03.82,English,,0,0,0,,They have the same general semantics as the read and write
Dialogue: 0,0:38:00.04,0:38:03.82,Chinese,,0,0,0,,在语义上与 read 和 write 大体相同
Dialogue: 0,0:38:04.32,0:38:06.12,English,,0,0,0,,But they deal with the short count issue
Dialogue: 0,0:38:04.32,0:38:06.12,Chinese,,0,0,0,,但它们会处理不足值问题
Dialogue: 0,0:38:06.98,0:38:09.68,English,,0,0,0,,So let's actually take a look at readn
Dialogue: 0,0:38:06.98,0:38:09.68,Chinese,,0,0,0,,以 readn 为例
Dialogue: 0,0:38:11.20,0:38:14.90,English,,0,0,0,,So again readn is given a file descriptor
Dialogue: 0,0:38:11.20,0:38:14.90,Chinese,,0,0,0,,调用 readn 函数也要给出一个文件描述符
Dialogue: 0,0:38:15.72,0:38:18.40,English,,0,0,0,,A destination buffer
Dialogue: 0,0:38:15.72,0:38:18.40,Chinese,,0,0,0,,一个目标缓冲区
Dialogue: 0,0:38:19.96,0:38:25.28,English,,0,0,0,,And an indication of how many characters
Dialogue: 0,0:38:19.96,0:38:25.28,Chinese,,0,0,0,,以及要读入的字符数
Dialogue: 0,0:38:25.52,0:38:29.24,English,,0,0,0,,How many bytes it's supposed to read and it's supposed to
Dialogue: 0,0:38:25.52,0:38:29.24,Chinese,,0,0,0,,也就是应该读入多少字节
Dialogue: 0,0:38:36.48,0:38:43.46,English,,0,0,0,,It's supposed to return...I guess it will return either a negative number if there's an error
Dialogue: 0,0:38:36.48,0:38:43.46,Chinese,,0,0,0,,它也有返回值，如果出错，返回负数
Dialogue: 0,0:38:43.48,0:38:45.98,English,,0,0,0,,0 if it's at an end of file
Dialogue: 0,0:38:43.48,0:38:45.98,Chinese,,0,0,0,,如果遇到 EOF，返回 0
Dialogue: 0,0:38:49.62,0:38:51.48,English,,0,0,0,,Or the number of bytes read
Dialogue: 0,0:38:49.62,0:38:51.48,Chinese,,0,0,0,,或读入的字节数
Dialogue: 0,0:38:51.48,0:38:55.70,English,,0,0,0,,So I guess I was a little bit I should have been more careful
Dialogue: 0,0:38:51.48,0:38:55.70,Chinese,,0,0,0,,我想我应该更小心一点
Dialogue: 0,0:38:55.70,0:39:00.12,English,,0,0,0,,If it hits an end of file partway through it will return a short count
Dialogue: 0,0:38:55.70,0:39:00.12,Chinese,,0,0,0,,如果没读满遇到 EOF，它将返回不足值
Dialogue: 0,0:39:00.74,0:39:03.74,English,,0,0,0,,But that's the only case it won't return a short count
Dialogue: 0,0:39:00.74,0:39:03.74,Chinese,,0,0,0,,但那是唯一会返回不足值的情况
Dialogue: 0,0:39:04.32,0:39:06.12,English,,0,0,0,,If there really it could have read more bytes
Dialogue: 0,0:39:04.32,0:39:06.12,Chinese,,0,0,0,,只要还可以继续读，就不会返回不足值
Dialogue: 0,0:39:07.24,0:39:13.70,English,,0,0,0,,So the main loop here you see is it keeps calling read over and over again until it's happy
Dialogue: 0,0:39:07.24,0:39:13.70,Chinese,,0,0,0,,所以可以看到这里的一个主要循环是它会不停调用 read
Dialogue: 0,0:39:14.72,0:39:18.18,English,,0,0,0,,One way it can be happy is if it's read as many bytes
Dialogue: 0,0:39:14.72,0:39:18.18,Chinese,,0,0,0,,直到读入的字节数
Dialogue: 0,0:39:18.44,0:39:21.86,English,,0,0,0,,As it was supposed to read in the first place
Dialogue: 0,0:39:18.44,0:39:21.86,Chinese,,0,0,0,,等于指定要读的字节数
Dialogue: 0,0:39:23.12,0:39:26.34,English,,0,0,0,,The other is that if it hits an error code
Dialogue: 0,0:39:23.12,0:39:26.34,Chinese,,0,0,0,,或者遇到出错代码
Dialogue: 0,0:39:28.52,0:39:29.70,English,,0,0,0,,And you'll notice that
Dialogue: 0,0:39:28.52,0:39:29.70,Chinese,,0,0,0,,虽然
Dialogue: 0,0:39:37.86,0:39:43.14,English,,0,0,0,,And that there's some subtlety of tracking which type of error that is
Dialogue: 0,0:39:37.86,0:39:43.14,Chinese,,0,0,0,,不太容易追踪出错的类型
Dialogue: 0,0:39:43.24,0:39:47.90,English,,0,0,0,,But in general the common cases it will return the negative number indicating an error
Dialogue: 0,0:39:43.24,0:39:47.90,Chinese,,0,0,0,,但通常会返回表示出错的负数
Dialogue: 0,0:39:49.62,0:39:54.46,English,,0,0,0,,If the number read is zero
Dialogue: 0,0:39:49.62,0:39:54.46,Chinese,,0,0,0,,如果 nread 为 0
Dialogue: 0,0:39:55.34,0:39:57.26,English,,0,0,0,,Then that indicated an end-of-file
Dialogue: 0,0:39:55.34,0:39:57.26,Chinese,,0,0,0,,表示遇到 EOF
Dialogue: 0,0:39:58.36,0:40:02.94,English,,0,0,0,,And so what it will return is as many bytes as it's read
Dialogue: 0,0:39:58.36,0:40:02.94,Chinese,,0,0,0,,这时候它将返回已读的字节数
Dialogue: 0,0:40:03.30,0:40:05.04,English,,0,0,0,,So return the short count
Dialogue: 0,0:40:03.30,0:40:05.04,Chinese,,0,0,0,,返回不足值
Dialogue: 0,0:40:06.49,0:40:14.18,English,,0,0,0,,And here it's just saying okay I've read this number of bytes and increment and decrement the right values
Dialogue: 0,0:40:06.49,0:40:14.18,Chinese,,0,0,0,,这几行代码是说已经读了若干字节，通过 −= 和 += 更新相应变量
Dialogue: 0,0:40:14.24,0:40:20.04,English,,0,0,0,,So the point is it will keep looping keep doing reads until it either gets the number of bytes it should
Dialogue: 0,0:40:14.24,0:40:20.04,Chinese,,0,0,0,,总之，它会循环执行读操作，直到读完指定的字节数
Dialogue: 0,0:40:20.34,0:40:23.00,English,,0,0,0,,It hits an error or it encounters an end-of-file
Dialogue: 0,0:40:20.34,0:40:23.00,Chinese,,0,0,0,,或者出错，或者遇到 EOF
Dialogue: 0,0:40:25.62,0:40:30.50,English,,0,0,0,,And you'll see it has it's checking for all these different error conditions for every call it makes
Dialogue: 0,0:40:25.62,0:40:30.50,Chinese,,0,0,0,,每次调用它都会判定所有出错条件
Dialogue: 0,0:40:32.72,0:40:35.30,English,,0,0,0,,So this code by the way is sort of typical that
Dialogue: 0,0:40:32.72,0:40:35.30,Chinese,,0,0,0,,这是一段比较典型的代码
Dialogue: 0,0:40:35.74,0:40:40.60,English,,0,0,0,,It looks a little messy when you first look at it but if you sort of study it it'll all make sense
Dialogue: 0,0:40:35.74,0:40:40.60,Chinese,,0,0,0,,虽然乍看之下有点凌乱，但多加研究就会发现它这样做是有道理的
Dialogue: 0,0:40:43.08,0:40:46.18,English,,0,0,0,,So now let's talk about buffered I/O and
Dialogue: 0,0:40:43.08,0:40:46.18,Chinese,,0,0,0,,接下来我们来讲带缓冲的 I/O
Dialogue: 0,0:40:46.38,0:40:49.00,English,,0,0,0,,What buffered I/O is...this is a very important concept
Dialogue: 0,0:40:46.38,0:40:49.00,Chinese,,0,0,0,,什么是带缓冲的 I/O，这是一个非常重要的概念
Dialogue: 0,0:40:49.10,0:40:51.44,English,,0,0,0,,So it's part of the reason we want to show you the code for
Dialogue: 0,0:40:49.10,0:40:51.44,Chinese,,0,0,0,,所以要让大家看看这段代码
Dialogue: 0,0:40:58.94,0:41:06.35,English,,0,0,0,,So the idea of buffered I/O is that there's a buffer meaning just an
Dialogue: 0,0:40:58.94,0:41:06.35,Chinese,,0,0,0,,带缓冲的 I/O 会给文件
Dialogue: 0,0:41:06.86,0:41:09.16,English,,0,0,0,,Array of byte characters array of bytes
Dialogue: 0,0:41:06.86,0:41:09.16,Chinese,,0,0,0,,分配
Dialogue: 0,0:41:09.64,0:41:14.58,English,,0,0,0,,They're allocated and associated with this particular file
Dialogue: 0,0:41:09.64,0:41:14.58,Chinese,,0,0,0,,关联的缓冲区
Dialogue: 0,0:41:15.34,0:41:20.16,English,,0,0,0,,And the program if it's on a read what it will do is it will fill up
Dialogue: 0,0:41:15.34,0:41:20.16,Chinese,,0,0,0,,如果程序正在执行读操作
Dialogue: 0,0:41:20.58,0:41:24.64,English,,0,0,0,,This buffer if it will give a read with a much larger number
Dialogue: 0,0:41:20.58,0:41:24.64,Chinese,,0,0,0,,它将填满该缓冲区
Dialogue: 0,0:41:24.86,0:41:29.20,English,,0,0,0,,With a large number basically the size of the actual
Dialogue: 0,0:41:24.86,0:41:29.20,Chinese,,0,0,0,,读入
Dialogue: 0,0:41:29.68,0:41:32.32,English,,0,0,0,,How much memory you've allocated for this buffer
Dialogue: 0,0:41:29.68,0:41:32.32,Chinese,,0,0,0,,分配给缓冲区的字节长度
Dialogue: 0,0:41:33.00,0:41:38.34,English,,0,0,0,,And the system will fill that up with up to that number of characters
Dialogue: 0,0:41:33.00,0:41:38.34,Chinese,,0,0,0,,并且系统会向缓冲区填入不超过其大小的字节数
Dialogue: 0,0:41:39.10,0:41:44.70,English,,0,0,0,,And then when the user program wants to now look at this get some bytes
Dialogue: 0,0:41:39.10,0:41:44.70,Chinese,,0,0,0,,当用户程序想要提取若干字节时
Dialogue: 0,0:41:45.10,0:41:49.94,English,,0,0,0,,It will first check do I already have some in the buffer that haven't been read yet
Dialogue: 0,0:41:45.10,0:41:49.94,Chinese,,0,0,0,,它会先看看缓冲区内是否还有未读取的字节
Dialogue: 0,0:41:50.36,0:41:52.08,English,,0,0,0,,And if so I'll just return those
Dialogue: 0,0:41:50.36,0:41:52.08,Chinese,,0,0,0,,如果有，就接着读
Dialogue: 0,0:41:53.42,0:41:56.08,English,,0,0,0,,And if not then I'll refill the buffer
Dialogue: 0,0:41:53.42,0:41:56.08,Chinese,,0,0,0,,如果没有，就重新填满缓冲区
Dialogue: 0,0:41:56.32,0:42:00.92,English,,0,0,0,,So the idea of it is instead of every time going to the operating system
Dialogue: 0,0:41:56.32,0:42:00.92,Chinese,,0,0,0,,这样做的好处是不用每次需要一个或少量字符时
Dialogue: 0,0:42:00.92,0:42:03.88,English,,0,0,0,,And asking for one character small number of characters
Dialogue: 0,0:42:00.92,0:42:03.88,Chinese,,0,0,0,,都调用一次操作系统
Dialogue: 0,0:42:05.02,0:42:11.78,English,,0,0,0,,They called the operating system says give me pretty much as many characters as you've got up to some limit
Dialogue: 0,0:42:05.02,0:42:11.78,Chinese,,0,0,0,,而是我先调用一次，把若干字符缓存起来
Dialogue: 0,0:42:12.68,0:42:16.36,English,,0,0,0,,And then I'll just go away and let the application program
Dialogue: 0,0:42:12.68,0:42:16.36,Chinese,,0,0,0,,后续应用程序只需要
Dialogue: 0,0:42:16.50,0:42:20.76,English,,0,0,0,,Sort of pull these out a couple of bytes at a time
Dialogue: 0,0:42:16.50,0:42:20.76,Chinese,,0,0,0,,每次从缓冲区中提取
Dialogue: 0,0:42:21.22,0:42:25.80,English,,0,0,0,,But I won't bug the operating system to do it I being the RIO function
Dialogue: 0,0:42:21.22,0:42:25.80,Chinese,,0,0,0,,避免我再去调用操作系统，“我”指 RIO 函数
Dialogue: 0,0:42:27.00,0:42:32.52,English,,0,0,0,,And the way it does it is by just keeping a pointer that indicates
Dialogue: 0,0:42:27.00,0:42:32.52,Chinese,,0,0,0,,这个过程是借助指针来完成的
Dialogue: 0,0:42:32.96,0:42:35.26,English,,0,0,0,,What part of the the bytes
Dialogue: 0,0:42:32.96,0:42:35.26,Chinese,,0,0,0,,指针所指向的位置
Dialogue: 0,0:42:35.42,0:42:42.28,English,,0,0,0,,That I've already brought in from the operating system call
Dialogue: 0,0:42:35.42,0:42:42.28,Chinese,,0,0,0,,标明了我已经通过调用操作系统读到缓冲区
Dialogue: 0,0:42:42.66,0:42:46.16,English,,0,0,0,,But haven't been supplied yet to the application program
Dialogue: 0,0:42:42.66,0:42:46.16,Chinese,,0,0,0,,但还未读出到应用程序的字节段的起始点
Dialogue: 0,0:42:46.74,0:42:52.52,English,,0,0,0,,And so in this sort of larger picture of things if you imagine you're walking through a file
Dialogue: 0,0:42:46.74,0:42:52.52,Chinese,,0,0,0,,从一个文件的角度来考虑
Dialogue: 0,0:42:54.38,0:43:00.20,English,,0,0,0,,At any given point in time this buffer will represent some a range in that file
Dialogue: 0,0:42:54.38,0:43:00.20,Chinese,,0,0,0,,缓冲区就代表某个时间点上该文件中的一段字节
Dialogue: 0,0:43:00.56,0:43:05.24,English,,0,0,0,,Where the green is the stuff that's already been read by the application program
Dialogue: 0,0:43:00.56,0:43:05.24,Chinese,,0,0,0,,绿色区域表示已经被应用程序读过的部分
Dialogue: 0,0:43:05.82,0:43:08.64,English,,0,0,0,,The pink is the stuff that's been read
Dialogue: 0,0:43:05.82,0:43:08.64,Chinese,,0,0,0,,粉红色区域表示
Dialogue: 0,0:43:09.00,0:43:11.56,English,,0,0,0,,But from the operating system out of a file
Dialogue: 0,0:43:09.00,0:43:11.56,Chinese,,0,0,0,,已经通过调用操作系统从该文件中读出
Dialogue: 0,0:43:12.00,0:43:14.68,English,,0,0,0,,But not yet read by the application program
Dialogue: 0,0:43:12.00,0:43:14.68,Chinese,,0,0,0,,但还未被应用程序读过的部分
Dialogue: 0,0:43:16.88,0:43:20.30,English,,0,0,0,,And the way this is implemented once you think about it
Dialogue: 0,0:43:16.88,0:43:20.30,Chinese,,0,0,0,,稍加思索，就会发现这个操作实现起来
Dialogue: 0,0:43:20.36,0:43:22.18,English,,0,0,0,,It's not too hard to do
Dialogue: 0,0:43:20.36,0:43:22.18,Chinese,,0,0,0,,其实并不难
Dialogue: 0,0:43:22.46,0:43:29.88,English,,0,0,0,,Is that associated with every file connection then is a file descriptor
Dialogue: 0,0:43:22.46,0:43:29.88,Chinese,,0,0,0,,每个文件都对应一个文件描述符
Dialogue: 0,0:43:31.48,0:43:34.60,English,,0,0,0,,A count that tells you how many bytes
Dialogue: 0,0:43:31.48,0:43:34.60,Chinese,,0,0,0,,一个计数——
Dialogue: 0,0:43:35.32,0:43:38.16,English,,0,0,0,,There are that have not been read yet
Dialogue: 0,0:43:35.32,0:43:38.16,Chinese,,0,0,0,,告诉你还有多少字节未读
Dialogue: 0,0:43:39.34,0:43:46.68,English,,0,0,0,,A pointer to where this changeover is
Dialogue: 0,0:43:39.34,0:43:46.68,Chinese,,0,0,0,,一个指针——分割已读与未读区域
Dialogue: 0,0:43:47.20,0:43:52.98,English,,0,0,0,,And then the actual storage of the buffer itself
Dialogue: 0,0:43:47.20,0:43:52.98,Chinese,,0,0,0,,以及缓冲区本身的实际存储空间
Dialogue: 0,0:43:53.02,0:43:56.18,English,,0,0,0,,The characters allocated the bytes allocated to the buffer itself
Dialogue: 0,0:43:53.02,0:43:56.18,Chinese,,0,0,0,,也就是分配给缓冲区的字节数
Dialogue: 0,0:44:00.38,0:44:08.18,English,,0,0,0,,And so here's an example then of using RIO to do this echo that
Dialogue: 0,0:44:00.38,0:44:08.18,Chinese,,0,0,0,,来看一个用 RIO 函数边读边写的例子
Dialogue: 0,0:44:08.30,0:44:17.78,English,,0,0,0,,You first read a line, and reading a line means it will look for and stop at a line feed character
Dialogue: 0,0:44:08.30,0:44:17.78,Chinese,,0,0,0,,它会先读入一行文本，直到遇到换行符为止
Dialogue: 0,0:44:18.68,0:44:20.37,English,,0,0,0,,And writing it back out
Dialogue: 0,0:44:18.68,0:44:20.37,Chinese,,0,0,0,,再把读入的文本写出来
Dialogue: 0,0:44:20.68,0:44:32.42,English,,0,0,0,,And again if you do the demo of this code
Dialogue: 0,0:44:20.68,0:44:32.42,Chinese,,0,0,0,,我们来演示一下这段代码
Dialogue: 0,0:44:48.96,0:44:56.64,English,,0,0,0,,It's a little again you get...let me just trace writes because it's a little hard to see the reads here hard to figure out with...
Dialogue: 0,0:44:48.96,0:44:56.64,Chinese,,0,0,0,,同样也会看到......方便起见，我们只追踪写操作
Dialogue: 0,0:45:04.94,0:45:06.64,English,,0,0,0,,So you'll see that it's
Dialogue: 0,0:45:04.94,0:45:06.64,Chinese,,0,0,0,,可以看到
Dialogue: 0,0:45:08.94,0:45:13.34,English,,0,0,0,,Read the whole line and now it's done at the operating system level
Dialogue: 0,0:45:08.94,0:45:13.34,Chinese,,0,0,0,,它在操作系统层面现在已经读完了一整行
Dialogue: 0,0:45:13.74,0:45:21.34,English,,0,0,0,,It's written just one chunk's worth one call to the operating system's write function
Dialogue: 0,0:45:13.74,0:45:21.34,Chinese,,0,0,0,,然后调用操作系统的 write 函数写了一整行
Dialogue: 0,0:45:25.48,0:45:27.66,English,,0,0,0,,Instead of byte by byte
Dialogue: 0,0:45:25.48,0:45:27.66,Chinese,,0,0,0,,而不是逐个字节地写
Dialogue: 0,0:45:38.92,0:45:42.18,English,,0,0,0,,Okay so again I'm not going to go through all the code
Dialogue: 0,0:45:38.92,0:45:42.18,Chinese,,0,0,0,,这段代码的其他部分我就不再讲了
Dialogue: 0,0:45:42.18,0:45:45.16,English,,0,0,0,,But it's actually worth your while to do this
Dialogue: 0,0:45:42.18,0:45:45.16,Chinese,,0,0,0,,但确实值得大家去试一试
Dialogue: 0,0:45:45.58,0:45:51.82,English,,0,0,0,,And by the way I've actually done some applications where I took the RIO code I want to add some features to it
Dialogue: 0,0:45:45.58,0:45:51.82,Chinese,,0,0,0,,顺便说一下，我自己也试了试，基于 RIO 代码自行添加了一些功能
Dialogue: 0,0:45:52.42,0:45:57.66,English,,0,0,0,,But it's a very useful starting point to be able to build your own customized routines
Dialogue: 0,0:45:52.42,0:45:57.66,Chinese,,0,0,0,,对于创建自定义例程来说，这确实是一个很不错的起点
Dialogue: 0,0:45:59.42,0:46:02.24,English,,0,0,0,,Okay so let's talk about some other parts of files
Dialogue: 0,0:45:59.42,0:46:02.24,Chinese,,0,0,0,,现在来讲讲文件的其他部分
Dialogue: 0,0:46:04.02,0:46:08.70,English,,0,0,0,,One is that associated with a file is what they call metadata
Dialogue: 0,0:46:04.02,0:46:08.70,Chinese,,0,0,0,,一个是文件元数据
Dialogue: 0,0:46:10.08,0:46:14.56,English,,0,0,0,,So the data are the actual contents of the file actual bytes inside that file
Dialogue: 0,0:46:10.08,0:46:14.56,Chinese,,0,0,0,,所谓元数据，是指文件中实际包含的数据信息
Dialogue: 0,0:46:14.96,0:46:18.40,English,,0,0,0,,But there's a whole bunch of other stuff that's associated with the file
Dialogue: 0,0:46:14.96,0:46:18.40,Chinese,,0,0,0,,这些信息有很多，包括
Dialogue: 0,0:46:20.02,0:46:22.22,English,,0,0,0,,Information about what type of file it is
Dialogue: 0,0:46:20.02,0:46:22.22,Chinese,,0,0,0,,关于文件类型的信息
Dialogue: 0,0:46:22.74,0:46:27.30,English,,0,0,0,,What protection read/write/execute protections it has
Dialogue: 0,0:46:22.74,0:46:27.30,Chinese,,0,0,0,,关于文件保护类型的信息，比如读/写/执行保护等
Dialogue: 0,0:46:30.06,0:46:33.64,English,,0,0,0,,Some information about the ownership of that file
Dialogue: 0,0:46:30.06,0:46:33.64,Chinese,,0,0,0,,关于文件所有权的信息
Dialogue: 0,0:46:34.04,0:46:39.46,English,,0,0,0,,What type it is and also the times associated with it
Dialogue: 0,0:46:34.04,0:46:39.46,Chinese,,0,0,0,,比如类型和时间——
Dialogue: 0,0:46:39.46,0:46:44.08,English,,0,0,0,,When was it created, when was it last accessed and when was it last modified
Dialogue: 0,0:46:39.46,0:46:44.08,Chinese,,0,0,0,,文件创建时间、最后一次访问时间、最后一次修改时间等
Dialogue: 0,0:46:44.66,0:46:51.38,English,,0,0,0,,So that's known as metadata and every file has that kind of information associated with it
Dialogue: 0,0:46:44.66,0:46:51.38,Chinese,,0,0,0,,这些都属于元数据，每个文件中都有
Dialogue: 0,0:46:51.94,0:46:55.50,English,,0,0,0,,And you can actually and it's in a data structure called a stat
Dialogue: 0,0:46:51.94,0:46:55.50,Chinese,,0,0,0,,它们被存放在
Dialogue: 0,0:46:59.10,0:47:00.25,English,,0,0,0,,Data structure
Dialogue: 0,0:46:59.10,0:47:00.25,Chinese,,0,0,0,,stat 数据结构中
Dialogue: 0,0:47:00.68,0:47:11.88,English,,0,0,0,,And you can if you want to write code that then sort of probes the directory structure of a file system
Dialogue: 0,0:47:00.68,0:47:11.88,Chinese,,0,0,0,,如果想写代码来查看文件系统的目录结构
Dialogue: 0,0:47:12.38,0:47:15.06,English,,0,0,0,,You can make a call to the stat function
Dialogue: 0,0:47:12.38,0:47:15.06,Chinese,,0,0,0,,可以调用 stat 函数
Dialogue: 0,0:47:15.18,0:47:20.08,English,,0,0,0,,And it's given the pathname of the file you want to stat
Dialogue: 0,0:47:15.18,0:47:20.08,Chinese,,0,0,0,,为此，需要给出想要 stat 的文件的路径名
Dialogue: 0,0:47:20.66,0:47:27.34,English,,0,0,0,,And then a pointer to one of these stat data structures and then that
Dialogue: 0,0:47:20.66,0:47:27.34,Chinese,,0,0,0,,以及指向其中一个 stat 数据结构的指针
Dialogue: 0,0:47:27.96,0:47:32.50,English,,0,0,0,,Data structure will get filled in by the information for this particular file
Dialogue: 0,0:47:27.96,0:47:32.50,Chinese,,0,0,0,,这样一来，文件信息就会填入该指针指向的 stat 数据结构
Dialogue: 0,0:47:32.90,0:47:36.86,English,,0,0,0,,And then you can test various attributes about that file
Dialogue: 0,0:47:32.90,0:47:36.86,Chinese,,0,0,0,,然后便可以测试文件的各种属性
Dialogue: 0,0:47:37.30,0:47:41.32,English,,0,0,0,,And say basically get the information
Dialogue: 0,0:47:37.30,0:47:41.32,Chinese,,0,0,0,,并获得存放在该 stat 数据结构中
Dialogue: 0,0:47:42.10,0:47:44.48,English,,0,0,0,,That's stored here
Dialogue: 0,0:47:42.10,0:47:44.48,Chinese,,0,0,0,,几乎所有信息
Dialogue: 0,0:47:44.58,0:47:47.78,English,,0,0,0,,And there's all these nasty compile time constants
Dialogue: 0,0:47:44.58,0:47:47.78,Chinese,,0,0,0,,这里需要用到编译时常量或宏
Dialogue: 0,0:47:47.90,0:47:57.20,English,,0,0,0,,That you use or macros that you use to look at and examine these metadata
Dialogue: 0,0:47:47.90,0:47:57.20,Chinese,,0,0,0,,它们可以用来查看并检查这些元数据
Dialogue: 0,0:48:04.70,0:48:07.18,English,,0,0,0,,So here's an example I will do it but
Dialogue: 0,0:48:04.70,0:48:07.18,Chinese,,0,0,0,,举个例子
Dialogue: 0,0:48:07.20,0:48:10.98,English,,0,0,0,,But it's a function called statcheck it's in the same directory
Dialogue: 0,0:48:07.20,0:48:10.98,Chinese,,0,0,0,,如果调用处于同一目录下的 statcheck 函数来检查某文件
Dialogue: 0,0:48:11.54,0:48:16.30,English,,0,0,0,,And so if you check some file or typically say well it's a regular file
Dialogue: 0,0:48:11.54,0:48:16.30,Chinese,,0,0,0,,通常是普通文件
Dialogue: 0,0:48:16.84,0:48:18.92,English,,0,0,0,,And yes you're allowed to read it
Dialogue: 0,0:48:16.84,0:48:18.92,Chinese,,0,0,0,,它会显示 yes，表示可以读该文件
Dialogue: 0,0:48:19.34,0:48:28.46,English,,0,0,0,,But now if I call chmod to eliminate set all the protections to zero
Dialogue: 0,0:48:19.34,0:48:28.46,Chinese,,0,0,0,,但如果用 chmod 将所有保护设为 0
Dialogue: 0,0:48:28.76,0:48:30.76,English,,0,0,0,,It'll say no you can't read it now
Dialogue: 0,0:48:28.76,0:48:30.76,Chinese,,0,0,0,,它会显示 no，表示不可以读该文件
Dialogue: 0,0:48:32.90,0:48:37.72,English,,0,0,0,,And so again that's just making use of this data here
Dialogue: 0,0:48:32.90,0:48:37.72,Chinese,,0,0,0,,元数据及其运用我们就讲到这里
Dialogue: 0,0:48:39.46,0:48:44.04,English,,0,0,0,,So now this is the part that gets a lot more tricky
Dialogue: 0,0:48:39.46,0:48:44.04,Chinese,,0,0,0,,接下来讲所有文件信息是如何在程序中表示的
Dialogue: 0,0:48:44.46,0:48:49.74,English,,0,0,0,,Is how our files how are all this information about file is actually represented by the programs
Dialogue: 0,0:48:44.46,0:48:49.74,Chinese,,0,0,0,,该部分是一个难点
Dialogue: 0,0:48:49.78,0:48:50.40,English,,0,0,0,,[Question]
Dialogue: 0,0:48:49.78,0:48:50.40,Chinese,,0,0,0,,请讲
Dialogue: 0,0:48:50.40,0:48:53.28,English,,0,0,0,,[Student speaking]
Dialogue: 0,0:48:50.40,0:48:53.28,Chinese,,0,0,0,,「学生提问」
Dialogue: 0,0:48:53.28,0:48:56.65,Chinese,,0,0,0,,Yes stat just...
Dialogue: 0,0:48:53.28,0:48:56.65,Chinese,,0,0,0,,好，stat 仅仅是......
Dialogue: 0,0:49:07.82,0:49:10.40,English,,0,0,0,,I'll tell you one way you can find out what stat does
Dialogue: 0,0:49:07.82,0:49:10.40,Chinese,,0,0,0,,有一种方法可以让大家找出 stat 的作用
Dialogue: 0,0:49:13.32,0:49:15.24,English,,0,0,0,,If you say man 2 stat
Dialogue: 0,0:49:13.32,0:49:15.24,Chinese,,0,0,0,,在这里键入 man 2 stat
Dialogue: 0,0:49:16.58,0:49:18.80,English,,0,0,0,,You'll get more than you want to know
Dialogue: 0,0:49:16.58,0:49:18.80,Chinese,,0,0,0,,问题就会迎刃而解，而且还会了解到更多知识
Dialogue: 0,0:49:19.42,0:49:22.96,English,,0,0,0,,So in general you know if you say man stat
Dialogue: 0,0:49:19.42,0:49:22.96,Chinese,,0,0,0,,一般来说，如果键入 man stat
Dialogue: 0,0:49:27.10,0:49:33.08,English,,0,0,0,,It'll give a Unix command that you can use to stat a file
Dialogue: 0,0:49:27.10,0:49:33.08,Chinese,,0,0,0,,它会显示一条 Unix 命令，用于 stat 文件
Dialogue: 0,0:49:33.74,0:49:38.06,English,,0,0,0,,So I can say "stat ."
Dialogue: 0,0:49:33.74,0:49:38.06,Chinese,,0,0,0,,还可以键入 「stat .」
Dialogue: 0,0:49:39.94,0:49:43.28,English,,0,0,0,,And it will print out some information about a file
Dialogue: 0,0:49:39.94,0:49:43.28,Chinese,,0,0,0,,它会打印出一些文件信息
Dialogue: 0,0:49:45.56,0:49:48.52,English,,0,0,0,,In this case my local directory let's see
Dialogue: 0,0:49:45.56,0:49:48.52,Chinese,,0,0,0,,如果回到本地目录
Dialogue: 0,0:49:51.66,0:49:54.32,English,,0,0,0,,I can stat any file
Dialogue: 0,0:49:51.66,0:49:54.32,Chinese,,0,0,0,,我可以使用 stat 查看任何文件的状态信息
Dialogue: 0,0:49:54.88,0:49:59.60,English,,0,0,0,,Here and it will print out some cryptic information about it
Dialogue: 0,0:49:54.88,0:49:59.60,Chinese,,0,0,0,,它会打印出关于该文件的一些加密信息
Dialogue: 0,0:50:01.94,0:50:04.12,English,,0,0,0,,But if you say man 2 stat
Dialogue: 0,0:50:01.94,0:50:04.12,Chinese,,0,0,0,,但如果键入 man 2 stat
Dialogue: 0,0:50:04.82,0:50:09.08,English,,0,0,0,,The Unix man pages are divided into different categories
Dialogue: 0,0:50:04.82,0:50:09.08,Chinese,,0,0,0,,由于 Unix 手册包含不同的章节
Dialogue: 0,0:50:10.34,0:50:13.00,English,,0,0,0,,And things that our system calls
Dialogue: 0,0:50:10.34,0:50:13.00,Chinese,,0,0,0,,而 Unix 系统库要调用的内容
Dialogue: 0,0:50:13.76,0:50:20.00,English,,0,0,0,,Unix system library calls are typically in section 2 of the man pages
Dialogue: 0,0:50:13.76,0:50:20.00,Chinese,,0,0,0,,通常位于该手册的第二章
Dialogue: 0,0:50:20.78,0:50:22.97,English,,0,0,0,,And so that will return information about it
Dialogue: 0,0:50:20.78,0:50:22.97,Chinese,,0,0,0,,所以键入 man 2 stat 将返回该章的相关信息
Dialogue: 0,0:50:23.48,0:50:28.74,English,,0,0,0,,But the main point of it is stat is then a function that you call
Dialogue: 0,0:50:23.48,0:50:28.74,Chinese,,0,0,0,,总之， stat 是一个可供调用的函数
Dialogue: 0,0:50:28.74,0:50:32.38,English,,0,0,0,,Where you give it a path name and a pointer to a buffer that you want it
Dialogue: 0,0:50:28.74,0:50:32.38,Chinese,,0,0,0,,给它一个路径名和一个指向缓冲区的指针后
Dialogue: 0,0:50:33.00,0:50:41.94,English,,0,0,0,,And it will then fill in the contents the buffer with the information about that particular file
Dialogue: 0,0:50:33.00,0:50:41.94,Chinese,,0,0,0,,它会把文件信息
Dialogue: 0,0:50:42.62,0:50:49.26,English,,0,0,0,,And the form that it fills it in is one of these data structures called a struct stat
Dialogue: 0,0:50:42.62,0:50:49.26,Chinese,,0,0,0,,以 struct stat 数据结构的方式填入缓冲区中
Dialogue: 0,0:50:50.64,0:50:57.10,English,,0,0,0,,And that's pretty typical of a lot of these functions is that they have some predefined struct
Dialogue: 0,0:50:50.64,0:50:57.10,Chinese,,0,0,0,,这些函数的一个典型特征是它们含有一些预定义的 struct
Dialogue: 0,0:50:57.96,0:51:01.96,English,,0,0,0,,And if you want to get the...if you want to get information you pa...
Dialogue: 0,0:50:57.96,0:51:01.96,Chinese,,0,0,0,,如果想获得信息
Dialogue: 0,0:51:01.96,0:51:05.02,English,,0,0,0,,You allocate one of those struts you pass a pointer to it
Dialogue: 0,0:51:01.96,0:51:05.02,Chinese,,0,0,0,,可以先分配一个 struct，再传一个指针给该它
Dialogue: 0,0:51:05.46,0:51:08.38,English,,0,0,0,,And then the library function will fill in the details
Dialogue: 0,0:51:05.46,0:51:08.38,Chinese,,0,0,0,,库函数就会将文件信息填入该 struct
Dialogue: 0,0:51:09.30,0:51:11.28,English,,0,0,0,,[T: Does that make sense] [S: Yeah] [T: Okay]
Dialogue: 0,0:51:09.30,0:51:11.28,Chinese,,0,0,0,,「明白了吗？」「明白了」「好」
Dialogue: 0,0:51:23.46,0:51:28.76,English,,0,0,0,,Okay so now let's look at some of the internal data structures that
Dialogue: 0,0:51:23.46,0:51:28.76,Chinese,,0,0,0,,现在来看一看由操作系统维护的与程序中文件相关的
Dialogue: 0,0:51:29.47,0:51:34.14,English,,0,0,0,,The operating system maintains regarding the files associated with a program
Dialogue: 0,0:51:29.47,0:51:34.14,Chinese,,0,0,0,,一些内部数据结构
Dialogue: 0,0:51:34.60,0:51:39.10,English,,0,0,0,,And this is a source of really nasty exam problems
Dialogue: 0,0:51:34.60,0:51:39.10,Chinese,,0,0,0,,请注意这是考试的难点
Dialogue: 0,0:51:39.10,0:51:44.18,English,,0,0,0,,I'll just warn you, so you're going to want to read this part of the book carefully
Dialogue: 0,0:51:39.10,0:51:44.18,Chinese,,0,0,0,,大家一定要仔细阅读书中有关这部分的内容
Dialogue: 0,0:51:44.78,0:51:47.66,English,,0,0,0,,Study the practice problems look at the old exams
Dialogue: 0,0:51:44.78,0:51:47.66,Chinese,,0,0,0,,研究习题、看看历次的考题
Dialogue: 0,0:51:47.66,0:51:51.92,English,,0,0,0,,Because I can guarantee you're going to get some of these on the final that's a promise
Dialogue: 0,0:51:47.66,0:51:51.92,Chinese,,0,0,0,,我保证期末考试中肯定会出现原题
Dialogue: 0,0:51:53.02,0:51:56.16,English,,0,0,0,,And they can be infinitely obscure so
Dialogue: 0,0:51:53.02,0:51:56.16,Chinese,,0,0,0,,这些题目可能会很难懂
Dialogue: 0,0:51:56.98,0:51:58.94,English,,0,0,0,,We can we can torch you with these
Dialogue: 0,0:51:56.98,0:51:58.94,Chinese,,0,0,0,,但是可以从中受到启发
Dialogue: 0,0:51:59.84,0:52:06.12,English,,0,0,0,,So that the main point is that associated with any executing process
Dialogue: 0,0:51:59.84,0:52:06.12,Chinese,,0,0,0,,讲到内部数据结构，对于任何执行进程
Dialogue: 0,0:52:06.16,0:52:09.70,English,,0,0,0,,Which you can think of a process as a running program
Dialogue: 0,0:52:06.16,0:52:09.70,Chinese,,0,0,0,,在这里我们可以把进程看成一个正在运行的程序
Dialogue: 0,0:52:11.16,0:52:17.32,English,,0,0,0,,Is something called the descriptor table
Dialogue: 0,0:52:11.16,0:52:17.32,Chinese,,0,0,0,,都有与之相关的描述符表
Dialogue: 0,0:52:17.90,0:52:19.46,English,,0,0,0,,And what that contains is
Dialogue: 0,0:52:17.90,0:52:19.46,Chinese,,0,0,0,,对于每个打开文件
Dialogue: 0,0:52:19.94,0:52:23.12,English,,0,0,0,,For every open file that you have
Dialogue: 0,0:52:19.94,0:52:23.12,Chinese,,0,0,0,,描述符表都含有一个表项
Dialogue: 0,0:52:24.02,0:52:28.30,English,,0,0,0,,It has a pointer to a data structure called
Dialogue: 0,0:52:24.02,0:52:28.30,Chinese,,0,0,0,,指向该文件的数据结构
Dialogue: 0,0:52:29.32,0:52:34.04,English,,0,0,0,,An entry in a table that's maintained by the operating system globally
Dialogue: 0,0:52:29.32,0:52:34.04,Chinese,,0,0,0,,该数据结构是文件表中的一个表项，由操作系统进行全局维护
Dialogue: 0,0:52:36.66,0:52:41.52,English,,0,0,0,,Which describes each of the open files
Dialogue: 0,0:52:36.66,0:52:41.52,Chinese,,0,0,0,,它描述了每个打开文件
Dialogue: 0,0:52:42.30,0:52:48.16,English,,0,0,0,,Actually each every time a file is opened
Dialogue: 0,0:52:42.30,0:52:48.16,Chinese,,0,0,0,,实际上每打开一个文件
Dialogue: 0,0:52:48.40,0:52:53.90,English,,0,0,0,,That allocates a record in this open file table
Dialogue: 0,0:52:48.40,0:52:53.90,Chinese,,0,0,0,,都会在打开文件表中分配一个表项
Dialogue: 0,0:52:56.38,0:53:02.58,English,,0,0,0,,And so as I mentioned file descriptors 0, 1 and 2 have specific meanings
Dialogue: 0,0:52:56.38,0:53:02.58,Chinese,,0,0,0,,正如我之前提到的，文件描述符 0、1、2 有其特定的含义
Dialogue: 0,0:53:03.14,0:53:09.74,English,,0,0,0,,And the other files are other ones that you've opened during the course of your program execution and have not yet closed
Dialogue: 0,0:53:03.14,0:53:09.74,Chinese,,0,0,0,,除它们以外的其他描述符代表在程序执行过程中打开但还未关闭的其他文件
Dialogue: 0,0:53:11.00,0:53:20.23,English,,0,0,0,,So that's so each of these then is a reference to a particular open file
Dialogue: 0,0:53:11.00,0:53:20.23,Chinese,,0,0,0,,每个文件表表项都是对某个打开文件的引用
Dialogue: 0,0:53:20.60,0:53:23.58,English,,0,0,0,,And it gives information about that file
Dialogue: 0,0:53:20.60,0:53:23.58,Chinese,,0,0,0,,它给出了关于该文件的信息
Dialogue: 0,0:53:24.54,0:53:27.16,English,,0,0,0,,And it also gives the position in the file that
Dialogue: 0,0:53:24.54,0:53:27.16,Chinese,,0,0,0,,还给出了文件位置
Dialogue: 0,0:53:27.30,0:53:30.62,English,,0,0,0,,Currently is that I told you every time you open a file there's
Dialogue: 0,0:53:27.30,0:53:30.62,Chinese,,0,0,0,,文件位置我之前提到过：每打开一个文件
Dialogue: 0,0:53:31.16,0:53:32.50,English,,0,0,0,,For a regular file at least
Dialogue: 0,0:53:31.16,0:53:32.50,Chinese,,0,0,0,,至少每打开一个普通文件
Dialogue: 0,0:53:32.94,0:53:37.68,English,,0,0,0,,There's an associated position of where in the file was your last read or write
Dialogue: 0,0:53:32.94,0:53:37.68,Chinese,,0,0,0,,都会有一个文件位置，指向最后一次读或写结束的地方
Dialogue: 0,0:53:38.46,0:53:40.10,English,,0,0,0,,Or where would you be your next read or write
Dialogue: 0,0:53:38.46,0:53:40.10,Chinese,,0,0,0,,或者下一次读或写起始的地方
Dialogue: 0,0:53:41.34,0:53:42.64,English,,0,0,0,,And so that's the file pos
Dialogue: 0,0:53:41.34,0:53:42.64,Chinese,,0,0,0,,这就是文件位置
Dialogue: 0,0:53:44.10,0:53:49.32,English,,0,0,0,,And there's also a reference count which is used by the operating system to keep track of
Dialogue: 0,0:53:44.10,0:53:49.32,Chinese,,0,0,0,,文件表表项中还含有一个引用计数
Dialogue: 0,0:53:50.90,0:53:57.50,English,,0,0,0,,Because we'll see it's possible to have multiple processes sharing
Dialogue: 0,0:53:50.90,0:53:57.50,Chinese,,0,0,0,,由于打开文件表中的一个表项
Dialogue: 0,0:53:58.50,0:54:00.90,English,,0,0,0,,An entry in this open file table and
Dialogue: 0,0:53:58.50,0:54:00.90,Chinese,,0,0,0,,可能由多个进程共享
Dialogue: 0,0:54:01.20,0:54:06.66,English,,0,0,0,,It uses this reference count which is a standard way of keeping track of memory allocation
Dialogue: 0,0:54:01.20,0:54:06.66,Chinese,,0,0,0,,所以引用计数被操作系统用来追踪内存分配
Dialogue: 0,0:54:07.32,0:54:13.24,English,,0,0,0,,To know when it no longer needs that entry when there's been enough
Dialogue: 0,0:54:07.32,0:54:13.24,Chinese,,0,0,0,,从而知道什么时候不再需要该表项
Dialogue: 0,0:54:14.92,0:54:20.18,English,,0,0,0,,When the file is no longer accessible and therefore this entry is not needed
Dialogue: 0,0:54:14.92,0:54:20.18,Chinese,,0,0,0,,比如文件不可访问时
Dialogue: 0,0:54:21.74,0:54:27.32,English,,0,0,0,,So for every one of your open files that will have an entry in this table
Dialogue: 0,0:54:21.74,0:54:27.32,Chinese,,0,0,0,,总之每个打开文件在文件表中都会有一个对应的表项
Dialogue: 0,0:54:27.50,0:54:31.40,English,,0,0,0,,And this table as I said is shared across the whole operating system
Dialogue: 0,0:54:27.50,0:54:31.40,Chinese,,0,0,0,,而这个文件表由整个操作系统共享
Dialogue: 0,0:54:32.90,0:54:38.26,English,,0,0,0,,And then associated with every file is called v-node
Dialogue: 0,0:54:32.90,0:54:38.26,Chinese,,0,0,0,,此外，每个文件还有一个与之相关的 v-node
Dialogue: 0,0:54:38.40,0:54:40.20,English,,0,0,0,,Which stands for virtual node
Dialogue: 0,0:54:38.40,0:54:40.20,Chinese,,0,0,0,,这是虚拟节点
Dialogue: 0,0:54:40.50,0:54:46.64,English,,0,0,0,,And this is where that contains the sort of information about this file
Dialogue: 0,0:54:40.50,0:54:46.64,Chinese,,0,0,0,,其中包含
Dialogue: 0,0:54:46.90,0:54:53.60,English,,0,0,0,,In particular where it is stored this information that you can get from stat and things like that
Dialogue: 0,0:54:46.90,0:54:53.60,Chinese,,0,0,0,,可以从 stat 中获得的文件信息，比如文件存储的位置
Dialogue: 0,0:54:54.84,0:54:58.82,English,,0,0,0,,How big it is and things like that
Dialogue: 0,0:54:54.84,0:54:58.82,Chinese,,0,0,0,,文件的大小等
Dialogue: 0,0:54:59.72,0:55:06.86,English,,0,0,0,,So that's for every file in the system actually has a v-node entry
Dialogue: 0,0:54:59.72,0:55:06.86,Chinese,,0,0,0,,实际上系统中的每个文件不论是否打开
Dialogue: 0,0:55:07.26,0:55:08.67,English,,0,0,0,,Whether it's open or closed
Dialogue: 0,0:55:07.26,0:55:08.67,Chinese,,0,0,0,,都在 v-node 表中有一个对应的表项
Dialogue: 0,0:55:09.56,0:55:11.72,English,,0,0,0,,Now this can get complicated
Dialogue: 0,0:55:09.56,0:55:11.72,Chinese,,0,0,0,,接下来要讲的内容比较复杂
Dialogue: 0,0:55:12.88,0:55:17.74,English,,0,0,0,,So for example if within a single program you call open twice on the same function
Dialogue: 0,0:55:12.88,0:55:17.74,Chinese,,0,0,0,,举个例子，如果你在某个程序中用同一个函数调用 open 两次
Dialogue: 0,0:55:19.02,0:55:21.40,English,,0,0,0,,You'll actually get two different file descriptors
Dialogue: 0,0:55:19.02,0:55:21.40,Chinese,,0,0,0,,你会得到两个不同的文件描述符
Dialogue: 0,0:55:22.82,0:55:28.80,English,,0,0,0,,And you'll be able to access that same file and have two different positions in it
Dialogue: 0,0:55:22.82,0:55:28.80,Chinese,,0,0,0,,两个文件描述符都能让你访问同一个文件并形成两个不同的文件位置
Dialogue: 0,0:55:28.94,0:55:34.32,English,,0,0,0,,Then it makes sense if you imagine you're reading from a file
Dialogue: 0,0:55:28.94,0:55:34.32,Chinese,,0,0,0,,简单来说：假设你正在读一个文件
Dialogue: 0,0:55:35.42,0:55:41.16,English,,0,0,0,,And you might want to read from two different positions in that file
Dialogue: 0,0:55:35.42,0:55:41.16,Chinese,,0,0,0,,你希望在同一个程序中从该文件的两个不同位置读取
Dialogue: 0,0:55:41.16,0:55:44.40,English,,0,0,0,,Within the same program and you can do that that's perfectly legal
Dialogue: 0,0:55:41.16,0:55:44.40,Chinese,,0,0,0,,这样做是可以的，也是完全合法的
Dialogue: 0,0:55:45.06,0:55:50.16,English,,0,0,0,,You just call open twice and that will keep track of two different positions
Dialogue: 0,0:55:45.06,0:55:50.16,Chinese,,0,0,0,,这时候你只需要调用两次 open，形成两个不同的文件位置
Dialogue: 0,0:55:51.54,0:55:55.89,English,,0,0,0,,So the point is these file descriptors might be referring to the same file
Dialogue: 0,0:55:51.54,0:55:55.89,Chinese,,0,0,0,,总之不同的文件描述符可能引用的是同一个文件
Dialogue: 0,0:55:56.34,0:55:58.98,English,,0,0,0,,But they're actually at different positions within the file
Dialogue: 0,0:55:56.34,0:55:58.98,Chinese,,0,0,0,,只是文件位置可能不同
Dialogue: 0,0:55:59.34,0:56:05.38,English,,0,0,0,,And that can happen also if you've opened a file for both reading and for writing
Dialogue: 0,0:55:59.34,0:56:05.38,Chinese,,0,0,0,,此外，如果你打开一个文件同时进行读写操作
Dialogue: 0,0:56:05.74,0:56:11.18,English,,0,0,0,,And you're writing ahead and then reading characters bytes that have already been written
Dialogue: 0,0:56:05.74,0:56:11.18,Chinese,,0,0,0,,并且是先写后读，也会发生这种情况
Dialogue: 0,0:56:12.04,0:56:12.90,English,,0,0,0,,That makes sense
Dialogue: 0,0:56:12.04,0:56:12.90,Chinese,,0,0,0,,道理是类似的
Dialogue: 0,0:56:13.42,0:56:17.22,English,,0,0,0,,It's not such a good idea to have two different write
Dialogue: 0,0:56:13.42,0:56:17.22,Chinese,,0,0,0,,但不建议在对文件进行写操作时
Dialogue: 0,0:56:18.32,0:56:24.50,English,,0,0,0,,File opens that are writing simultaneously you can mess up the file pretty badly that way
Dialogue: 0,0:56:18.32,0:56:24.50,Chinese,,0,0,0,,两次调用 open，因为这样会让文件变得很乱
Dialogue: 0,0:56:24.92,0:56:27.86,English,,0,0,0,,But there's nothing in the operating system that prevents you from doing that
Dialogue: 0,0:56:24.92,0:56:27.86,Chinese,,0,0,0,,不过操作系统不会阻止你这样做
Dialogue: 0,0:56:28.82,0:56:34.66,English,,0,0,0,,So it won't it's not a good idea but it's a legal operation
Dialogue: 0,0:56:28.82,0:56:34.66,Chinese,,0,0,0,,虽然不建议，但这是合法操作
Dialogue: 0,0:56:35.84,0:56:41.88,English,,0,0,0,,So that's the point is you have to distinguish at what level is sharing taking place and you see that
Dialogue: 0,0:56:35.84,0:56:41.88,Chinese,,0,0,0,,我们必须弄清楚共享发生在什么级别
Dialogue: 0,0:56:43.89,0:56:53.20,English,,0,0,0,,If you have two different table entries sharing one file
Dialogue: 0,0:56:43.89,0:56:53.20,Chinese,,0,0,0,,如果两个不同的描述符表表项共同引用一个文件
Dialogue: 0,0:56:53.64,0:56:57.88,English,,0,0,0,,Then that what's different there is that you can be working at different file positions
Dialogue: 0,0:56:53.64,0:56:57.88,Chinese,,0,0,0,,这说明可能是有两个不同的文件位置
Dialogue: 0,0:57:00.68,0:57:04.20,English,,0,0,0,,Similarly of course the more common thing is
Dialogue: 0,0:57:00.68,0:57:04.20,Chinese,,0,0,0,,当然更常见的情况是
Dialogue: 0,0:57:06.30,0:57:09.85,English,,0,0,0,,You have two different open files and they're referring to different files
Dialogue: 0,0:57:06.30,0:57:09.85,Chinese,,0,0,0,,两个不同的描述符表表项引用两个不同的打开文件
Dialogue: 0,0:57:10.74,0:57:13.48,English,,0,0,0,,But now and this is where life gets exciting
Dialogue: 0,0:57:10.74,0:57:13.48,Chinese,,0,0,0,,有意思的是
Dialogue: 0,0:57:13.98,0:57:18.46,English,,0,0,0,,If you call fork you remember about fork that it spawns a child
Dialogue: 0,0:57:13.98,0:57:18.46,Chinese,,0,0,0,,如果调用 fork——我讲过 fork 会创建一个子进程
Dialogue: 0,0:57:19.86,0:57:23.88,English,,0,0,0,,But that child inherits a lot of information from its parent
Dialogue: 0,0:57:19.86,0:57:23.88,Chinese,,0,0,0,,子进程会继承父进程的很多信息
Dialogue: 0,0:57:23.98,0:57:25.58,English,,0,0,0,,And one of the things it inherits
Dialogue: 0,0:57:23.98,0:57:25.58,Chinese,,0,0,0,,其中包括描述符表
Dialogue: 0,0:57:26.22,0:57:30.28,English,,0,0,0,,Is its descriptor table it gets a replica of that descriptor table
Dialogue: 0,0:57:26.22,0:57:30.28,Chinese,,0,0,0,,子进程会获得父进程描述符表的副本
Dialogue: 0,0:57:31.54,0:57:34.09,English,,0,0,0,,And so now both the parent and the child
Dialogue: 0,0:57:31.54,0:57:34.09,Chinese,,0,0,0,,所以父子进程
Dialogue: 0,0:57:34.88,0:57:38.94,English,,0,0,0,,Have identical entries in their descriptor table
Dialogue: 0,0:57:34.88,0:57:38.94,Chinese,,0,0,0,,就会有相同的描述符表表项
Dialogue: 0,0:57:38.94,0:57:40.78,English,,0,0,0,,And so they're sharing files
Dialogue: 0,0:57:38.94,0:57:40.78,Chinese,,0,0,0,,所以它们共享文件
Dialogue: 0,0:57:41.32,0:57:45.06,English,,0,0,0,,But not at the file level but at the open file table
Dialogue: 0,0:57:41.32,0:57:45.06,Chinese,,0,0,0,,但这时候的共享不是文件级别而是打开文件表级别的共享
Dialogue: 0,0:57:45.72,0:57:49.18,English,,0,0,0,,And what that means is if the parent does a read
Dialogue: 0,0:57:45.72,0:57:49.18,Chinese,,0,0,0,,这意味着如果父进程进行读操作
Dialogue: 0,0:57:49.66,0:57:51.94,English,,0,0,0,,It'll bump along the file position
Dialogue: 0,0:57:49.66,0:57:51.94,Chinese,,0,0,0,,文件位置前移
Dialogue: 0,0:57:52.44,0:57:54.18,English,,0,0,0,,And if the child now does a read
Dialogue: 0,0:57:52.44,0:57:54.18,Chinese,,0,0,0,,如果此时子进程再进行读操作
Dialogue: 0,0:57:55.22,0:57:59.16,English,,0,0,0,,It will see this from this new position
Dialogue: 0,0:57:55.22,0:57:59.16,Chinese,,0,0,0,,它将从这个新位置读起
Dialogue: 0,0:57:59.72,0:58:02.58,English,,0,0,0,,So you can see why the exam problems get really interesting
Dialogue: 0,0:57:59.72,0:58:02.58,Chinese,,0,0,0,,这么多的可能性
Dialogue: 0,0:58:03.29,0:58:08.44,English,,0,0,0,,That will keep track of all these different possibilities
Dialogue: 0,0:58:03.29,0:58:08.44,Chinese,,0,0,0,,这么多的情况
Dialogue: 0,0:58:08.86,0:58:09.98,English,,0,0,0,,And they'll do different things
Dialogue: 0,0:58:08.86,0:58:09.98,Chinese,,0,0,0,,考题自然就有意思了
Dialogue: 0,0:58:11.82,0:58:14.28,English,,0,0,0,,And so
Dialogue: 0,0:58:11.82,0:58:14.28,Chinese,,0,0,0,,所以.....
Dialogue: 0,0:58:14.82,0:58:20.64,English,,0,0,0,,And then of course the parent or the child can start opening and closing their own files as well and that will get very messy
Dialogue: 0,0:58:14.82,0:58:20.64,Chinese,,0,0,0,,当然父进程或子进程可以自行打开和关闭文件，但这会变得非常混乱
Dialogue: 0,0:58:21.16,0:58:25.10,English,,0,0,0,,And here's what you see the reason for having reference counts here that
Dialogue: 0,0:58:21.16,0:58:25.10,Chinese,,0,0,0,,所以必须用到引用计数
Dialogue: 0,0:58:26.64,0:58:29.68,English,,0,0,0,,If you have a lot of forking going on
Dialogue: 0,0:58:26.64,0:58:29.68,Chinese,,0,0,0,,如果 fork 太多
Dialogue: 0,0:58:30.66,0:58:36.64,English,,0,0,0,,Then you can create multiple pointers to this table entry
Dialogue: 0,0:58:30.66,0:58:36.64,Chinese,,0,0,0,,就可能会有多个指针指向同一个文件表表项
Dialogue: 0,0:58:37.14,0:58:44.20,English,,0,0,0,,And in order to really really close the file each of these has to call close
Dialogue: 0,0:58:37.14,0:58:44.20,Chinese,,0,0,0,,如果此时要关闭文件，所有进程都必须调用 close
Dialogue: 0,0:58:45.60,0:58:50.38,English,,0,0,0,,Before the file is truly truly closed from an operating system perspective
Dialogue: 0,0:58:45.60,0:58:50.38,Chinese,,0,0,0,,才能从操作系统的角度真正关闭它
Dialogue: 0,0:58:55.52,0:59:03.58,English,,0,0,0,,So there's other fun things that make life interesting too and contribute to the exam problem possibilities
Dialogue: 0,0:58:55.52,0:59:03.58,Chinese,,0,0,0,,还有其他有意思的内容，生活因它们而变得多姿多彩，考题也因它们而充满无限可能
Dialogue: 0,0:59:04.08,0:59:05.90,English,,0,0,0,,One is a call called dup2
Dialogue: 0,0:59:04.08,0:59:05.90,Chinese,,0,0,0,,其中之一是 dup2
Dialogue: 0,0:59:06.98,0:59:09.48,English,,0,0,0,,And the purpose of dup2 is to
Dialogue: 0,0:59:06.98,0:59:09.48,Chinese,,0,0,0,,dup2 用于
Dialogue: 0,0:59:13.16,0:59:20.04,English,,0,0,0,,[Excuse me] duplicate an entry in the descriptor table
Dialogue: 0,0:59:13.16,0:59:20.04,Chinese,,0,0,0,,抱歉，复制描述符表表项
Dialogue: 0,0:59:20.68,0:59:29.14,English,,0,0,0,,And the most common use of that is I/O redirection that either greater or less than sign to either
Dialogue: 0,0:59:20.68,0:59:29.14,Chinese,,0,0,0,,它最常见的用途是 I/O 重定向
Dialogue: 0,0:59:29.36,0:59:33.18,English,,0,0,0,,Redirect read the instead of from standard input from the file
Dialogue: 0,0:59:29.36,0:59:33.18,Chinese,,0,0,0,,用 > 符号表示将从标准输入读重定向到从文件读
Dialogue: 0,0:59:34.02,0:59:38.22,English,,0,0,0,,Or instead of writing to standard output to write to a file
Dialogue: 0,0:59:34.02,0:59:38.22,Chinese,,0,0,0,,用 < 符号表示将写出到标准输出重定向到写出到文件
Dialogue: 0,0:59:38.86,0:59:43.76,English,,0,0,0,,And the way the operating system actually implements that is shortly after starting the program
Dialogue: 0,0:59:38.86,0:59:43.76,Chinese,,0,0,0,,具体实现方法是：操作系统会在程序启动后不久
Dialogue: 0,0:59:44.42,0:59:46.50,English,,0,0,0,,It will call dup2
Dialogue: 0,0:59:44.42,0:59:46.50,Chinese,,0,0,0,,调用 dup2
Dialogue: 0,0:59:48.52,1:00:01.30,English,,0,0,0,,To make it so that the file descriptor 1 is not the standard output for this process
Dialogue: 0,0:59:48.52,1:00:01.30,Chinese,,0,0,0,,从而使此进程的标准输出
Dialogue: 0,1:00:01.34,1:00:04.74,English,,0,0,0,,But it's actually the original standard output
Dialogue: 0,1:00:01.34,1:00:04.74,Chinese,,0,0,0,,不再是最初的标准输出——文件描述符 1
Dialogue: 0,1:00:04.74,1:00:09.56,English,,0,0,0,,But it's actually a descriptor for the file that it's supposed to write to
Dialogue: 0,1:00:04.74,1:00:09.56,Chinese,,0,0,0,,而是待写出到文件的描述符
Dialogue: 0,1:00:09.88,1:00:12.24,English,,0,0,0,,And same way if it's doing input redirection
Dialogue: 0,1:00:09.88,1:00:12.24,Chinese,,0,0,0,,输入重定向也同样如此
Dialogue: 0,1:00:14.16,1:00:16.40,English,,0,0,0,,But you can call dup2 yourself
Dialogue: 0,1:00:14.16,1:00:16.40,Chinese,,0,0,0,,你自己也可以调用 dup2 完成重定向
Dialogue: 0,1:00:16.90,1:00:20.60,English,,0,0,0,,And do these kind of things and there's actually good reasons for doing so
Dialogue: 0,1:00:16.90,1:00:20.60,Chinese,,0,0,0,,这样做是非常合理的
Dialogue: 0,1:00:26.88,1:00:29.50,English,,0,0,0,,So in particular imagine I open the file
Dialogue: 0,1:00:26.88,1:00:29.50,Chinese,,0,0,0,,比如，我先打开文件 A
Dialogue: 0,1:00:29.92,1:00:33.94,English,,0,0,0,,And standard output points to the sort of normal thing
Dialogue: 0,1:00:29.92,1:00:33.94,Chinese,,0,0,0,,标准输出会像往常一样指向此文件表表项
Dialogue: 0,1:00:36.84,1:00:40.28,English,,0,0,0,,And I open a new file I call it B
Dialogue: 0,1:00:36.84,1:00:40.28,Chinese,,0,0,0,,我再打开一个新的文件 B
Dialogue: 0,1:00:41.18,1:00:42.58,English,,0,0,0,,And then I call dup2
Dialogue: 0,1:00:41.18,1:00:42.58,Chinese,,0,0,0,,接着调用 dup2
Dialogue: 0,1:00:42.96,1:00:43.52,English,,0,0,0,,[Excuse me]
Dialogue: 0,1:00:42.96,1:00:43.52,Chinese,,0,0,0,,抱歉
Dialogue: 0,1:00:44.04,1:00:48.54,English,,0,0,0,,And now what both file descriptor 1 and file descriptor 4 are sharing
Dialogue: 0,1:00:44.04,1:00:48.54,Chinese,,0,0,0,,现在文件描述符 1 和文件描述符 4 共享此文件表表项
Dialogue: 0,1:00:48.92,1:00:52.68,English,,0,0,0,,This entry in the file table and you see the reference count of 2
Dialogue: 0,1:00:48.92,1:00:52.68,Chinese,,0,0,0,,引用计数显示为 2
Dialogue: 0,1:00:53.90,1:00:56.50,English,,0,0,0,,And so in order to really close it then
Dialogue: 0,1:00:53.90,1:00:56.50,Chinese,,0,0,0,,如果要真正关闭它
Dialogue: 0,1:00:56.88,1:01:02.34,English,,0,0,0,,What would typically happen at this point is this happens before
Dialogue: 0,1:00:56.88,1:01:02.34,Chinese,,0,0,0,,通常需要在它启动程序前
Dialogue: 0,1:01:02.34,1:01:06.02,English,,0,0,0,,It starts your program you'd want to close file descriptor 4
Dialogue: 0,1:01:02.34,1:01:06.02,Chinese,,0,0,0,,关闭文件描述符 4
Dialogue: 0,1:01:10.30,1:01:15.18,English,,0,0,0,,And in fact there's a lot of bugs you can make by not closing files
Dialogue: 0,1:01:10.30,1:01:15.18,Chinese,,0,0,0,,否则可能会引起很多漏洞
Dialogue: 0,1:01:15.60,1:01:19.80,English,,0,0,0,,It's easy to make mistakes when you have multiple entries in these tables
Dialogue: 0,1:01:15.60,1:01:19.80,Chinese,,0,0,0,,因为文件表表项存在被共享时很容易出错
Dialogue: 0,1:01:19.90,1:01:25.32,English,,0,0,0,,[Yes] [Student speaking]
Dialogue: 0,1:01:19.90,1:01:25.32,Chinese,,0,0,0,,「请讲」「学生提问」
Dialogue: 0,1:01:25.42,1:01:30.70,English,,0,0,0,,No, if I call close this one it just decrements this reference count
Dialogue: 0,1:01:25.42,1:01:30.70,Chinese,,0,0,0,,不会，如果调用 close 函数关闭文件，只会减少引用计数
Dialogue: 0,1:01:31.16,1:01:33.02,English,,0,0,0,,But this remains a valid entry here
Dialogue: 0,1:01:31.16,1:01:33.02,Chinese,,0,0,0,,但这仍会是一个有效的表项
Dialogue: 0,1:01:33.02,1:01:38.70,English,,0,0,0,,[student speaking]
Dialogue: 0,1:01:33.02,1:01:38.70,Chinese,,0,0,0,,「学生提问」
Dialogue: 0,1:01:38.74,1:01:48.48,English,,0,0,0,,Yes but dup2 will decrement the reference count of the original
Dialogue: 0,1:01:38.74,1:01:48.48,Chinese,,0,0,0,,是的，但是 dup2 会减少文件 A 的引用计数
Dialogue: 0,1:01:51.52,1:01:54.72,English,,0,0,0,,So dup2 goes backwards from where you think it should
Dialogue: 0,1:01:51.52,1:01:54.72,Chinese,,0,0,0,,让我们回去再看看 dup2
Dialogue: 0,1:01:57.74,1:01:59.22,English,,0,0,0,,So dup2 is the...
Dialogue: 0,1:01:57.74,1:01:59.22,Chinese,,0,0,0,,所以 dup2 是......
Dialogue: 0,1:02:01.54,1:02:06.78,English,,0,0,0,,I want what I refer to for example file descriptor
Dialogue: 0,1:02:01.54,1:02:06.78,Chinese,,0,0,0,,例如
Dialogue: 0,1:02:08.86,1:02:15.46,English,,0,0,0,,I want file descriptor 4 to become what I can use to and refer to with file descriptor 1 here
Dialogue: 0,1:02:08.86,1:02:15.46,Chinese,,0,0,0,,如果想用文件描述符 1 引用文件描述符 4 指向的文件
Dialogue: 0,1:02:16.14,1:02:19.12,English,,0,0,0,,It will actually decrement the reference count
Dialogue: 0,1:02:16.14,1:02:19.12,Chinese,,0,0,0,,dup2 会先关闭文件描述符 1 原先指向的文件，减少该文件的引用计数
Dialogue: 0,1:02:19.76,1:02:23.70,English,,0,0,0,,Of this before it done does the copy
Dialogue: 0,1:02:19.76,1:02:23.70,Chinese,,0,0,0,,然后再进行复制操作
Dialogue: 0,1:02:24.76,1:02:32.52,English,,0,0,0,,Otherwise it will create like an orphan in this table right
Dialogue: 0,1:02:24.76,1:02:32.52,Chinese,,0,0,0,,如果不关，内核就无法释放它，对吧
Dialogue: 0,1:02:37.22,1:02:43.40,English,,0,0,0,,So anyways dup2 also is a powerful but dangerous mechanism
Dialogue: 0,1:02:37.22,1:02:43.40,Chinese,,0,0,0,,总之 dup2 是一个强大但危险的机制
Dialogue: 0,1:02:44.96,1:02:49.58,English,,0,0,0,,So now finally let me just mention the much more common I/O that
Dialogue: 0,1:02:44.96,1:02:49.58,Chinese,,0,0,0,,最后我再提一下应用程序中
Dialogue: 0,1:02:49.96,1:02:51.49,English,,0,0,0,,Application programs use
Dialogue: 0,1:02:49.96,1:02:51.49,Chinese,,0,0,0,,更常用的 I/O
Dialogue: 0,1:02:51.92,1:02:56.14,English,,0,0,0,,Is what's known as the standard I/O and that's what's documented in K&R and
Dialogue: 0,1:02:51.92,1:02:56.14,Chinese,,0,0,0,,这就是标准 I/O，K&R 一书中对此作了相关说明
Dialogue: 0,1:02:56.20,1:02:59.16,English,,0,0,0,,It's actually part of the the C standard
Dialogue: 0,1:02:56.20,1:02:59.16,Chinese,,0,0,0,,标准 I/O 实际上是标准 C 的一部分
Dialogue: 0,1:02:59.36,1:03:01.14,English,,0,0,0,,All these different functions
Dialogue: 0,1:02:59.36,1:03:01.14,Chinese,,0,0,0,,包含不同的函数
Dialogue: 0,1:03:01.54,1:03:08.38,English,,0,0,0,,And so the main feature it adds is sort of like what you saw with the RIO package it adds buffering
Dialogue: 0,1:03:01.54,1:03:08.38,Chinese,,0,0,0,,类似于 RIO 包，标准 I/O 函数都带有缓冲功能
Dialogue: 0,1:03:09.46,1:03:11.60,English,,0,0,0,,So it doesn't have to do this low-level stuff
Dialogue: 0,1:03:09.46,1:03:11.60,Chinese,,0,0,0,,所以避免了很多低级操作
Dialogue: 0,1:03:12.00,1:03:14.28,English,,0,0,0,,And it avoids all then some of the nastiness
Dialogue: 0,1:03:12.00,1:03:14.28,Chinese,,0,0,0,,也变得更简单了
Dialogue: 0,1:03:19.16,1:03:26.46,English,,0,0,0,,And the way it works is what we've already seen it uses buffering to do the I/O
Dialogue: 0,1:03:19.16,1:03:26.46,Chinese,,0,0,0,,它用缓冲来进行 I/O 操作，工作原理我们之前已经讲过了
Dialogue: 0,1:03:27.60,1:03:30.80,English,,0,0,0,,So just it is an example
Dialogue: 0,1:03:27.60,1:03:30.80,Chinese,,0,0,0,,例如
Dialogue: 0,1:03:45.30,1:03:48.14,English,,0,0,0,,Here's some code that calls printf
Dialogue: 0,1:03:45.30,1:03:48.14,Chinese,,0,0,0,,这段代码调用 printf 函数
Dialogue: 0,1:03:48.74,1:03:51.82,English,,0,0,0,,One character at a time to print the word hello
Dialogue: 0,1:03:48.74,1:03:51.82,Chinese,,0,0,0,,打印单词 hello，一次打印一个字符
Dialogue: 0,1:03:54.22,1:03:57.20,English,,0,0,0,,But if I run that and I strace it
Dialogue: 0,1:03:54.22,1:03:57.20,Chinese,,0,0,0,,我现在运行它并执行 strace
Dialogue: 0,1:04:06.02,1:04:09.36,English,,0,0,0,,You see that there's only one system call to write
Dialogue: 0,1:04:06.02,1:04:09.36,Chinese,,0,0,0,,我们就会看到只有一个对 write 的系统调用
Dialogue: 0,1:04:09.76,1:04:12.16,English,,0,0,0,,And it works the same way you saw with the RIO code
Dialogue: 0,1:04:09.76,1:04:12.16,Chinese,,0,0,0,,它的运作方式和 RIO 代码相同
Dialogue: 0,1:04:12.72,1:04:17.70,English,,0,0,0,,It builds up a buffer and it's not until this call to fflush
Dialogue: 0,1:04:12.72,1:04:17.70,Chinese,,0,0,0,,它会创建一个缓冲区，先写到缓冲区，再调用 fflush
Dialogue: 0,1:04:18.96,1:04:23.56,English,,0,0,0,,That forces the output to actually be a printed output
Dialogue: 0,1:04:18.96,1:04:23.56,Chinese,,0,0,0,,把写的内容打印输出
Dialogue: 0,1:04:24.36,1:04:32.10,English,,0,0,0,,Usually that happens automatically actually if you printf a line feed it will flush it
Dialogue: 0,1:04:24.36,1:04:32.10,Chinese,,0,0,0,,通常如果 printf 换行符，它将自动 flush
Dialogue: 0,1:04:33.08,1:04:36.52,English,,0,0,0,,So but that I think that call to fflush is probably redundant here
Dialogue: 0,1:04:33.08,1:04:36.52,Chinese,,0,0,0,,所以我想在这里不调用 fflush 也可以
Dialogue: 0,1:04:44.16,1:04:53.10,English,,0,0,0,,So and so that's the benefit, so buffered I/O is much more efficient
Dialogue: 0,1:04:44.16,1:04:53.10,Chinese,,0,0,0,,综上所述，带缓冲的 I/O 因为有缓冲的缘故
Dialogue: 0,1:04:53.10,1:04:55.60,English,,0,0,0,,Because of the buffering
Dialogue: 0,1:04:53.10,1:04:55.60,Chinese,,0,0,0,,效率会更高
Dialogue: 0,1:05:00.76,1:05:07.12,English,,0,0,0,,So as a result we've now seen three different types of I/O
Dialogue: 0,1:05:00.76,1:05:07.12,Chinese,,0,0,0,,这节课我们一共学了三种不同类型的 I/O
Dialogue: 0,1:05:07.12,1:05:11.74,English,,0,0,0,,There's the low-level I/O called U...referred to as Unix I/O
Dialogue: 0,1:05:07.12,1:05:11.74,Chinese,,0,0,0,,一个是低级的 Unix I/O
Dialogue: 0,1:05:12.12,1:05:16.40,English,,0,0,0,,You saw this package that was written specifically for the book and for the course called RIO
Dialogue: 0,1:05:12.12,1:05:16.40,Chinese,,0,0,0,,另一个是专门为本书及本课程编写的 RIO 包
Dialogue: 0,1:05:16.80,1:05:18.74,English,,0,0,0,,And then there's a much larger
Dialogue: 0,1:05:16.80,1:05:18.74,Chinese,,0,0,0,,最后是由 Unix 标准库提供的标准 I/O 函数
Dialogue: 0,1:05:19.14,1:05:25.50,English,,0,0,0,,And in fact richer set of I/O functions provided by the Unix standard library
Dialogue: 0,1:05:19.14,1:05:25.50,Chinese,,0,0,0,,这种函数数量更多、类型也更丰富
Dialogue: 0,1:05:26.10,1:05:31.86,English,,0,0,0,,So you might ask a couple of questions one is why the heck did you write this when you've already got that
Dialogue: 0,1:05:26.10,1:05:31.86,Chinese,,0,0,0,,这里你们可能会有疑问，既然已经有了标准库提供的函数，为什么还要自己去写
Dialogue: 0,1:05:32.80,1:05:36.46,English,,0,0,0,,If Unix provides buffered I/O why did you do it yourself
Dialogue: 0,1:05:32.80,1:05:36.46,Chinese,,0,0,0,,既然 Unix 提供带缓冲的 I/O，为什么还要自己建
Dialogue: 0,1:05:36.98,1:05:40.98,English,,0,0,0,,And the reason is this stuff doesn't it works really well for
Dialogue: 0,1:05:36.98,1:05:40.98,Chinese,,0,0,0,,这是因为标准库提供的函数虽然非常适用于
Dialogue: 0,1:05:41.54,1:05:44.76,English,,0,0,0,,The I/O you do to a terminal or to files
Dialogue: 0,1:05:41.54,1:05:44.76,Chinese,,0,0,0,,对终端或文件执行 I/O 操作
Dialogue: 0,1:05:45.18,1:05:47.62,English,,0,0,0,,But it doesn't do very well with network connections
Dialogue: 0,1:05:45.18,1:05:47.62,Chinese,,0,0,0,,但不太适用于网络连接
Dialogue: 0,1:05:47.90,1:05:52.46,English,,0,0,0,,It wasn't really designed for that and so it gets really messed up
Dialogue: 0,1:05:47.90,1:05:52.46,Chinese,,0,0,0,,它不是为网络连接设计的，所以不好用
Dialogue: 0,1:05:52.86,1:05:57.96,English,,0,0,0,,And so the main reason you're going to find yourself using this is when you're starting to use network connections
Dialogue: 0,1:05:52.86,1:05:57.96,Chinese,,0,0,0,,因此 RIO 函数主要是用于网络连接
Dialogue: 0,1:05:59.04,1:06:05.62,English,,0,0,0,,The other thing is these do not coexist very well buffered I/O with a RIO I/O
Dialogue: 0,1:05:59.04,1:06:05.62,Chinese,,0,0,0,,此外，带缓冲的 I/O 与 RIO I/O 不能很好地共存
Dialogue: 0,1:06:05.62,1:06:09.60,English,,0,0,0,,Because they each maintain their own buffers and they don't know about each other
Dialogue: 0,1:06:05.62,1:06:09.60,Chinese,,0,0,0,,因为它们各自有自己的缓冲区，彼此之间互不了解
Dialogue: 0,1:06:09.96,1:06:11.40,English,,0,0,0,,And they get terribly confused
Dialogue: 0,1:06:09.96,1:06:11.40,Chinese,,0,0,0,,还会相互干扰
Dialogue: 0,1:06:11.88,1:06:16.88,English,,0,0,0,,So you kind of have to pick one or the other with respect to any particular I/O connection
Dialogue: 0,1:06:11.88,1:06:16.88,Chinese,,0,0,0,,所以在对某个 I/O 连接进行操作时，你只能二选一
Dialogue: 0,1:06:17.16,1:06:18.86,English,,0,0,0,,And don't try to mix and match them
Dialogue: 0,1:06:17.16,1:06:18.86,Chinese,,0,0,0,,切忌混用和匹配使用
Dialogue: 0,1:06:22.38,1:06:29.42,English,,0,0,0,,So like I said Unix I/O then the low-level stuff from an application perspective
Dialogue: 0,1:06:22.38,1:06:29.42,Chinese,,0,0,0,,接下来是每种 I/O 各自的优缺点。首先是低级的 I/O，从应用程序的角度
Dialogue: 0,1:06:29.42,1:06:33.92,English,,0,0,0,,It's like really painful to use especially with short counts and error codes
Dialogue: 0,1:06:29.42,1:06:33.92,Chinese,,0,0,0,,它不是很好用，存在不足值、出错代码等
Dialogue: 0,1:06:34.58,1:06:35.70,English,,0,0,0,,And all that stuff
Dialogue: 0,1:06:34.58,1:06:35.70,Chinese,,0,0,0,,诸多缺陷
Dialogue: 0,1:06:38.92,1:06:43.86,English,,0,0,0,,So in general you want to either write your own package or use some other package around it
Dialogue: 0,1:06:38.92,1:06:43.86,Chinese,,0,0,0,,所以一般来说需要自己编写程序包或者用其他程序包对它进行封装
Dialogue: 0,1:06:44.40,1:06:49.84,English,,0,0,0,,And so as I said standard I/O it gives you printf and scanf and all these nice features
Dialogue: 0,1:06:44.40,1:06:49.84,Chinese,,0,0,0,,然后是标准 I/O，它提供了 printf、scanf 等很多不错的函数
Dialogue: 0,1:06:50.10,1:06:52.84,English,,0,0,0,,It's uniform it exists on all systems
Dialogue: 0,1:06:50.10,1:06:52.84,Chinese,,0,0,0,,它是统一的，所有系统中都有
Dialogue: 0,1:06:53.34,1:06:55.10,English,,0,0,0,,It's reasonably standardized
Dialogue: 0,1:06:53.34,1:06:55.10,Chinese,,0,0,0,,而且很标准化
Dialogue: 0,1:07:01.02,1:07:06.34,English,,0,0,0,,So in general then use the standard I/O for most of your
Dialogue: 0,1:07:01.02,1:07:06.34,Chinese,,0,0,0,,所以标准 I/O 最常用于
Dialogue: 0,1:07:06.40,1:07:09.18,English,,0,0,0,,Day-to-day uses of files
Dialogue: 0,1:07:06.40,1:07:09.18,Chinese,,0,0,0,,日常文件的使用
Dialogue: 0,1:07:10.60,1:07:15.64,English,,0,0,0,,Use that raw I/O for low-level stuff like when you have to
Dialogue: 0,1:07:10.60,1:07:15.64,Chinese,,0,0,0,,Unix I/O 适合用来完成一些低级操作
Dialogue: 0,1:07:16.10,1:07:19.42,English,,0,0,0,,And partly it turns out signals are not
Dialogue: 0,1:07:16.10,1:07:19.42,Chinese,,0,0,0,,比如编写信号处理程序
Dialogue: 0,1:07:20.16,1:07:23.68,English,,0,0,0,,You shouldn't use standard I/O when you're writing signal handlers
Dialogue: 0,1:07:20.16,1:07:23.68,Chinese,,0,0,0,,此时不应该用标准 I/O
Dialogue: 0,1:07:24.32,1:07:29.00,English,,0,0,0,,And then the RIO you're going to find useful for in particular for doing networking
Dialogue: 0,1:07:24.32,1:07:29.00,Chinese,,0,0,0,,RIO 非常适用于网络操作
Dialogue: 0,1:07:29.92,1:07:38.28,English,,0,0,0,,One other thing that you should one bug that students do over and over again in this course
Dialogue: 0,1:07:29.92,1:07:38.28,Chinese,,0,0,0,,有一点大家需要注意
Dialogue: 0,1:07:38.84,1:07:44.50,English,,0,0,0,,Is they try to do a line oriented I/O on things that aren't lines
Dialogue: 0,1:07:38.84,1:07:44.50,Chinese,,0,0,0,,不能对没有行概念的文件进行基于行的 I/O 操作
Dialogue: 0,1:07:45.02,1:07:47.42,English,,0,0,0,,So like a jpeg image or something like that
Dialogue: 0,1:07:45.02,1:07:47.42,Chinese,,0,0,0,,比如 jpeg 格式的图片等
Dialogue: 0,1:07:47.84,1:07:50.56,English,,0,0,0,,And the reason that's important is that these functions
Dialogue: 0,1:07:47.84,1:07:50.56,Chinese,,0,0,0,,这主要是因为这些函数
Dialogue: 0,1:07:51.30,1:07:56.30,English,,0,0,0,,treat the end of line character 0xa as a very special character
Dialogue: 0,1:07:51.30,1:07:56.30,Chinese,,0,0,0,,在处理新行符 0xa 这个特殊字符时会停止读入
Dialogue: 0,1:07:56.42,1:08:02.06,English,,0,0,0,,They'll stop reading or something like that or if it's going between Windows and Unix
Dialogue: 0,1:07:56.42,1:08:02.06,Chinese,,0,0,0,,或者如果是在 Windows 操作系统下
Dialogue: 0,1:08:02.14,1:08:07.90,English,,0,0,0,,It will actually change one from line feed to carriage return line feed
Dialogue: 0,1:08:02.14,1:08:07.90,Chinese,,0,0,0,,在处理回车换行符时会停止读入
Dialogue: 0,1:08:08.42,1:08:12.82,English,,0,0,0,,Same way functions like strlen and strcpy will stop when they hit a null byte
Dialogue: 0,1:08:08.42,1:08:12.82,Chinese,,0,0,0,,同样地，strlen、strcpy 等函数在遇到空字节时会停止操作
Dialogue: 0,1:08:13.54,1:08:17.84,English,,0,0,0,,And that's not what you want to do when these are network packets you're trying to send out
Dialogue: 0,1:08:13.54,1:08:17.84,Chinese,,0,0,0,,在发送网络数据包时，这是一定要避免发生的情况
Dialogue: 0,1:08:19.38,1:08:24.73,English,,0,0,0,,So be careful some of the functions you've used a lot and you're very familiar with
Dialogue: 0,1:08:19.38,1:08:24.73,Chinese,,0,0,0,,所以要小心谨慎，有时候你经常使用而且非常熟悉的一些函数
Dialogue: 0,1:08:25.44,1:08:31.76,English,,0,0,0,,May be completely inappropriate for things where you're doing binary data
Dialogue: 0,1:08:25.44,1:08:31.76,Chinese,,0,0,0,,也许完全不适用于你当下的操作，比如二进制数据
Dialogue: 0,1:08:32.36,1:08:35.54,English,,0,0,0,,Or you're communicating over networks and things like that
Dialogue: 0,1:08:32.36,1:08:35.54,Chinese,,0,0,0,,或网络通讯等
Dialogue: 0,1:08:35.56,1:08:40.88,English,,0,0,0,,So be sure you understand what you're doing when you start to use these kind of functions
Dialogue: 0,1:08:35.56,1:08:40.88,Chinese,,0,0,0,,所以在使用这些函数前先想清楚要做什么
Dialogue: 0,1:08:43.60,1:08:46.42,English,,0,0,0,,So those of you really want to know this stuff
Dialogue: 0,1:08:43.60,1:08:46.42,Chinese,,0,0,0,,如果大家想更进一步了解相关内容
Dialogue: 0,1:08:47.20,1:08:50.10,English,,0,0,0,,There's a fellow named Richard Stevens who unfortunately died
Dialogue: 0,1:08:47.20,1:08:50.10,Chinese,,0,0,0,,向大家推荐理查德史蒂文斯写的一套书
Dialogue: 0,1:08:53.08,1:08:54.74,English,,0,0,0,,A while quite a while ago
Dialogue: 0,1:08:53.08,1:08:54.74,Chinese,,0,0,0,,史蒂文斯已经过世多年
Dialogue: 0,1:08:55.14,1:09:02.52,English,,0,0,0,,But his books live on and there's various people have signed up to become co-authors with him in his absence
Dialogue: 0,1:08:55.14,1:09:02.52,Chinese,,0,0,0,,在他过世后，又有很多人成为这套书的合著者
Dialogue: 0,1:09:04.56,1:09:10.70,English,,0,0,0,,And creating new editions of these books that used to date back way far
Dialogue: 0,1:09:04.56,1:09:10.70,Chinese,,0,0,0,,让这套经典著作得以延续至今，不断推出新版本
Dialogue: 0,1:09:11.26,1:09:15.84,English,,0,0,0,,So and if you really want to know how this stuff works you want to be the ace programmer
Dialogue: 0,1:09:11.26,1:09:15.84,Chinese,,0,0,0,,所以如果你很想知道具体的运作原理，想成为一名王牌程序员
Dialogue: 0,1:09:16.44,1:09:18.20,English,,0,0,0,,These books are the best you can get
Dialogue: 0,1:09:16.44,1:09:18.20,Chinese,,0,0,0,,这套书是你可以参考的最好资料
Dialogue: 0,1:09:18.22,1:09:24.52,English,,0,0,0,,But I'll also warn you your bookshelf will become very heavy laden because there's
Dialogue: 0,1:09:18.22,1:09:24.52,Chinese,,0,0,0,,但我必须告诉你们，这套书是个大部头
Dialogue: 0,1:09:25.06,1:09:30.16,English,,0,0,0,,There's the volumes one two and three and then there's networking books and
Dialogue: 0,1:09:25.06,1:09:30.16,Chinese,,0,0,0,,有一、二、三卷，还有几本讲网络的
Dialogue: 0,1:09:30.24,1:09:33.36,English,,0,0,0,,Stevens is like an encyclopedic reference
Dialogue: 0,1:09:30.24,1:09:33.36,Chinese,,0,0,0,,就像一套百科全书
Dialogue: 0,1:09:33.46,1:09:37.96,English,,0,0,0,,But they're excellent books if you really want to understand something  read Stevens
Dialogue: 0,1:09:33.46,1:09:37.96,Chinese,,0,0,0,,但这是一套优秀的书，如果你真的想深入研究，就去读史蒂文斯
Dialogue: 0,1:09:39.02,1:09:47.04,English,,0,0,0,,And there's another book that is just specific to Linux that's fairly nice and somewhat it's very detailed
Dialogue: 0,1:09:39.02,1:09:47.04,Chinese,,0,0,0,,还有另一本专门针对 Linux 的书，这本书也相当不错、非常详细
Dialogue: 0,1:09:47.64,1:09:54.98,English,,0,0,0,,But since it's only trying to deal with Linux it's a little bit less weird than trying to read Stevens
Dialogue: 0,1:09:47.64,1:09:54.98,Chinese,,0,0,0,,但因为它只针对 Linux，所以读起来比史蒂文斯的书更轻松
Dialogue: 0,1:09:55.02,1:10:01.46,English,,0,0,0,,Because Stevens will say in this version of Unix it works this way in this version it works that way and blah blah blah
Dialogue: 0,1:09:55.02,1:10:01.46,Chinese,,0,0,0,,在史蒂文斯的书中，它会讲到在这个版本的 Unix 中是这样，在另一个版本中又是那样等
Dialogue: 0,1:10:01.50,1:10:03.48,English,,0,0,0,,And it's all different and it will drive you crazy
Dialogue: 0,1:10:01.50,1:10:03.48,Chinese,,0,0,0,,读起来让人抓狂
Dialogue: 0,1:10:04.44,1:10:07.22,English,,0,0,0,,But Stevens is still it's an outstanding set of books
Dialogue: 0,1:10:04.44,1:10:07.22,Chinese,,0,0,0,,但这不失为一套出色的书籍
Dialogue: 0,1:10:08.10,1:10:10.54,English,,0,0,0,,Ok so...
Dialogue: 0,1:10:08.10,1:10:10.54,Chinese,,0,0,0,,好......
Dialogue: 0,1:10:11.60,1:10:13.90,English,,0,0,0,,This is an example and I'm not going to go through it
Dialogue: 0,1:10:11.60,1:10:13.90,Chinese,,0,0,0,,这只是一个例子，我不打算讲它
Dialogue: 0,1:10:13.90,1:10:17.78,English,,0,0,0,,But these are the kind of things that we use to torture students that you
Dialogue: 0,1:10:13.90,1:10:17.78,Chinese,,0,0,0,,这是我们用来折腾学生的一个题目
Dialogue: 0,1:10:18.30,1:10:22.42,English,,0,0,0,,Open some file descriptors and you do some dups and you do
Dialogue: 0,1:10:18.30,1:10:22.42,Chinese,,0,0,0,,打开一些文件描述符，然后做一些 dup
Dialogue: 0,1:10:23.10,1:10:29.50,English,,0,0,0,,Some forks and so you end up with a real spaghetti for all the pointers
Dialogue: 0,1:10:23.10,1:10:29.50,Chinese,,0,0,0,,一些 fork，最后得到各种指针
Dialogue: 0,1:10:29.50,1:10:33.42,English,,0,0,0,,What's shared and what's not shared and then you ask what will this print
Dialogue: 0,1:10:29.50,1:10:33.42,Chinese,,0,0,0,,有些共享，有些不共享，最后问打印的结果是什么
Dialogue: 0,1:10:33.86,1:10:38.28,English,,0,0,0,,And of course you'll have to trace through in great detail what's really going on
Dialogue: 0,1:10:33.86,1:10:38.28,Chinese,,0,0,0,,当然，你必须仔细捋一捋才能知道到底发生了什么
Dialogue: 0,1:10:39.10,1:10:43.62,English,,0,0,0,,So those are in the book and I recommend you work on some of those
Dialogue: 0,1:10:39.10,1:10:43.62,Chinese,,0,0,0,,这些题目在书里都有，我建议你们去研究其中的一些
Dialogue: 0,1:10:44.40,1:10:45.82,English,,0,0,0,,Ok that'll do us for today then
Dialogue: 0,1:10:44.40,1:10:45.82,Chinese,,0,0,0,,这节课就到此结束
