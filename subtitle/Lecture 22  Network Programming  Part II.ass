[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Audio File: ../../../../workspace/translationCSAPP/subtitle/../../../Desktop/csapp/Lecture 22  Network Programming  Part II.mp4
Video File: ../../../../workspace/translationCSAPP/subtitle/../../../Desktop/csapp/Lecture 22  Network Programming  Part II.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 1.000000
Scroll Position: 850
Active Line: 861
Video Position: 139969

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: newcsapp,Source Han Sans CN,34,&H00D6DA3A,&H00FFFFFF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: csapp,Source Han Sans CN,34,&H00FFFFFF,&H00FFFFFF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.72,0:00:06.36,csapp,,0,0,0,,so today's the second lecture about network programming  we got started last time
Dialogue: 0,0:00:07.04,0:00:15.18,csapp,,0,0,0,,and as you probably saw last time there the API is for this are really big and hairy and messy and
Dialogue: 0,0:00:15.54,0:00:19.06,csapp,,0,0,0,,it takes just a lot of time in my own personal experience of
Dialogue: 0,0:00:19.64,0:00:24.74,csapp,,0,0,0,,rereading we looking at code looking at examples rereading documentation
Dialogue: 0,0:00:25.26,0:00:28.00,csapp,,0,0,0,, going back and forth over that a dozen or so times
Dialogue: 0,0:00:28.56,0:00:30.02,csapp,,0,0,0,, before it all really sinks in
Dialogue: 0,0:00:30.20,0:00:34.70,csapp,,0,0,0,,and it's one where it really helps a lot to look at example code
Dialogue: 0,0:00:34.70,0:00:40.90,csapp,,0,0,0,,and there's example code in the book in that CSAPP c file
Dialogue: 0,0:00:40.90,0:00:43.34,csapp,,0,0,0,, that you've seen versions of in various forms
Dialogue: 0,0:00:44.58,0:00:50.16,csapp,,0,0,0,,so I can lecture for days and weeks
Dialogue: 0,0:00:50.30,0:00:54.24,csapp,,0,0,0,,but this really would all settle in until you've spent time studying yourself
Dialogue: 0,0:00:54.86,0:00:59.90,csapp,,0,0,0,,anyways I want to repeat  and go back over a little bit of ground before
Dialogue: 0,0:00:59.92,0:01:05.98,csapp,,0,0,0,,but last time we talked about the idea of translating from a domain name
Dialogue: 0,0:01:05.98,0:01:12.32,csapp,,0,0,0,,which is something like www.cmu.edu to IP address
Dialogue: 0,0:01:12.32,0:01:21.00,csapp,,0,0,0,,
Dialogue: 0,0:01:17.88,0:01:20.28,csapp,,0,0,0,,it's usually written in dotted decimal
Dialogue: 0,0:01:20.28,0:01:24.11,csapp,,0,0,0,,form and I showed you a program last
Dialogue: 0,0:01:24.11,0:01:26.81,csapp,,0,0,0,,time called host info that you could
Dialogue: 0,0:01:26.81,0:01:33.36,csapp,,0,0,0,,that will look actually at the code for
Dialogue: 0,0:01:34.14,0:01:40.62,csapp,,0,0,0,,and I just wanted to show you today I just did one very small tweak to that program and I'll describe it today
Dialogue: 0,0:01:41.34,0:01:48.88,csapp,,0,0,0,,and the interesting thing is it lets you look at both ipv4 and ipv6
Dialogue: 0,0:01:49.52,0:01:52.36,csapp,,0,0,0,, and it's one of the interesting features the code in the book
Dialogue: 0,0:01:52.36,0:01:55.76,csapp,,0,0,0,,and it's new to the third edition is it uses a new API
Dialogue: 0,0:01:56.38,0:02:03.28,csapp,,0,0,0,,that lets you pretty easily write code that will work under either of these two versions of the Internet Protocol
Dialogue: 0,0:02:04.62,0:02:06.26,csapp,,0,0,0,,so for example
Dialogue: 0,0:02:08.44,0:02:10.58,csapp,,0,0,0,,with this slightly modified program
Dialogue: 0,0:02:11.54,0:02:14.92,csapp,,0,0,0,, if I now look up the IP address for Facebook
Dialogue: 0,0:02:16.80,0:02:19.02,csapp,,0,0,0,,you'll see it comes back with two different ones
Dialogue: 0,0:02:21.16,0:02:22.02,csapp,,0,0,0,,and the
Dialogue: 0,0:02:25.26,0:02:31.46,csapp,,0,0,0,,the first one is the familiar dotted decimal form where each recall that each of these digits
Dialogue: 0,0:02:31.46,0:02:35.08,csapp,,0,0,0,,it's a decimal representation of of a single byte
Dialogue: 0,0:02:35.22,0:02:37.66,csapp,,0,0,0,,so it's a number between 0 and 255
Dialogue: 0,0:02:38.32,0:02:46.06,csapp,,0,0,0,,this is a ipv6 address which is I told you is 128 bits long
Dialogue: 0,0:02:46.18,0:02:53.18,csapp,,0,0,0,,so that's to the seventh takeaway 3 to the fifth 32 bytes right
Dialogue: 0,0:02:54.20,0:02:56.52,csapp,,0,0,0,,and it's usually written in this hex format
Dialogue: 0,0:02:58.06,0:03:01.84,csapp,,0,0,0,,with colons be after every pair of bytes
Dialogue: 0,0:03:02.68,0:03:05.74,csapp,,0,0,0,, and I think the colon colon just means that's a zero there
Dialogue: 0,0:03:06.24,0:03:16.38,csapp,,0,0,0,,when the cute things Facebook did was embed fac ii as a hex code inside of their ipv6 address
Dialogue: 0,0:03:23.84,0:03:24.72,csapp,,0,0,0,,and
Dialogue: 0,0:03:28.32,0:03:30.20,csapp,,0,0,0,,that's really different I get very different results
Dialogue: 0,0:03:30.88,0:03:32.96,csapp,,0,0,0,,running this at home and then I do here
Dialogue: 0,0:03:33.26,0:03:39.62,csapp,,0,0,0,,and as I mentioned you'll get different results running a DNS server depending on where in the country are
Dialogue: 0,0:03:40.74,0:03:42.72,csapp,,0,0,0,, uh if you repeat the same thing over and over again
Dialogue: 0,0:03:42.72,0:03:50.52,csapp,,0,0,0,,you'll get different results and that's because these very large companies are providing servers  that are stationed all over the world
Dialogue: 0,0:03:51.02,0:03:56.54,csapp,,0,0,0,,and as a way to sort of balance out the load of the traffic they also have multiple server addresses
Dialogue: 0,0:03:57.12,0:04:02.56,csapp,,0,0,0,, that then they kind of rotate through to give you so that different people will get served by different machines
Dialogue: 0,0:04:03.70,0:04:11.72,csapp,,0,0,0,,so you see for example Twitter our Google just gave me two addresses in ipv4 and ipv6 address
Dialogue: 0,0:04:12.34,0:04:15.12,csapp,,0,0,0,,Twitter gave me a for different ipv4 addresses
Dialogue: 0,0:04:18.16,0:04:21.36,csapp,,0,0,0,,so let's look then at the code
Dialogue: 0,0:04:22.08,0:04:25.38,csapp,,0,0,0,,I'll go back through some of what we talked about last time
Dialogue: 0,0:04:26.00,0:04:28.92,csapp,,0,0,0,, I quite honestly I spent a fair amount of time looking at it
Dialogue: 0,0:04:29.08,0:04:31.56,csapp,,0,0,0,,so I can really understand it better
Dialogue: 0,0:04:32.10,0:04:34.22,csapp,,0,0,0,,because it's pretty it's not simple stuff
Dialogue: 0,0:04:35.48,0:04:36.70,csapp,,0,0,0,,but as I mentioned that
Dialogue: 0,0:04:37.36,0:04:38.80,csapp,,0,0,0,,as we went over last time
Dialogue: 0,0:04:39.54,0:04:42.52,csapp,,0,0,0,,this is sort of this giant block diagram that shows
Dialogue: 0,0:04:43.06,0:04:47.86,csapp,,0,0,0,,all the activity involved in setting up and running both a server and a client
Dialogue: 0,0:04:49.98,0:04:50.06,csapp,,0,0,0,,and just to repeat
Dialogue: 0,0:04:50.74,0:04:54.60,csapp,,0,0,0,,the idea is you need to the server needs to fire up
Dialogue: 0,0:04:54.82,0:04:58.78,csapp,,0,0,0,,you can't contact a server until that server exists
Dialogue: 0,0:04:59.04,0:05:02.12,csapp,,0,0,0,,so it's the server is the thing that has to exist first
Dialogue: 0,0:05:02.70,0:05:09.30,csapp,,0,0,0,,and all these steps are what are required for a server to begin on a machine
Dialogue: 0,0:05:09.30,0:05:12.60,csapp,,0,0,0,,and then to accept a connection request from a client
Dialogue: 0,0:05:14.52,0:05:18.88,csapp,,0,0,0,,similarly once the server is set then the client can begin
Dialogue: 0,0:05:19.32,0:05:22.52,csapp,,0,0,0,, and it's like placing a call to the server
Dialogue: 0,0:05:23.04,0:05:25.02,csapp,,0,0,0,,and it makes a connection request
Dialogue: 0,0:05:25.60,0:05:27.48,csapp,,0,0,0,,and that's accepted by the server
Dialogue: 0,0:05:27.96,0:05:32.22,csapp,,0,0,0,,and then what's called a session begins meaning an ability for these two
Dialogue: 0,0:05:32.78,0:05:37.87,csapp,,0,0,0,,machines to talk back and for worth over an internet connection
Dialogue: 0,0:05:38.54,0:05:42.70,csapp,,0,0,0,,and they'll do it this example I'll show is done by reading and writing
Dialogue: 0,0:05:43.22,0:05:49.08,csapp,,0,0,0,,as if they were filed a file each end looks like it's reading and writing a file
Dialogue: 0,0:05:52.08,0:05:57.92,csapp,,0,0,0,,and then once the client is done with whatever it it's trying to get
Dialogue: 0,0:05:58.60,0:06:01.30,csapp,,0,0,0,, it will disconnect
Dialogue: 0,0:06:02.28,0:06:03.68,csapp,,0,0,0,,since we hang up its phone
Dialogue: 0,0:06:04.76,0:06:10.74,csapp,,0,0,0,,and then the listening the server will detect this by receiving an end of file
Dialogue: 0,0:06:10.74,0:06:13.02,csapp,,0,0,0,,when it attempts to read from the client
Dialogue: 0,0:06:13.74,0:06:19.70,csapp,,0,0,0,,and then it will close that connection but and this I didn't have stated quite properly last time
Dialogue: 0,0:06:20.42,0:06:24.60,csapp,,0,0,0,,this it's not going to actually shut down at that point it's just going to return back
Dialogue: 0,0:06:25.42,0:06:27.12,csapp,,0,0,0,,and accept a new connection request
Dialogue: 0,0:06:27.66,0:06:32.42,csapp,,0,0,0,,and this is what's known as an iterative server it can only handle a single client at a time
Dialogue: 0,0:06:32.96,0:06:39.72,csapp,,0,0,0,,later in the course we'll talk about how to do a multi-threaded server that can handle multiple connections at one time
Dialogue: 0,0:06:40.66,0:06:42.58,csapp,,0,0,0,,so this is a pretty basic version
Dialogue: 0,0:06:44.98,0:06:57.02,csapp,,0,0,0,, so the first step on either the client or the server side is this very hairy messy relatively new API  called getaddrinfo
Dialogue: 0,0:06:57.52,0:07:03.02,csapp,,0,0,0,,and the idea of getaddrinfo is it's a sort of kitchen sink  our Swiss Army knife for you
Dialogue: 0,0:07:03.04,0:07:07.80,csapp,,0,0,0,, all those expressions of it has a zillion features
Dialogue: 0,0:07:08.26,0:07:13.42,csapp,,0,0,0,,to that sort of subsume a lot of other sort of individual protocols
Dialogue: 0,0:07:13.52,0:07:17.90,csapp,,0,0,0,,so for example it's pretty much the same whether it's ipv4 ipv6
Dialogue: 0,0:07:18.64,0:07:27.68,csapp,,0,0,0,,it lets you sort of go forward from and a domain name to an IP address
Dialogue: 0,0:07:27.82,0:07:31.34,csapp,,0,0,0,,lets you go backward from an IP address back to a domain name
Dialogue: 0,0:07:31.69,0:07:39.08,csapp,,0,0,0,,it supports all of those things it will let you look up what is the port number associated with an HTTP server
Dialogue: 0,0:07:39.20,0:07:41.70,csapp,,0,0,0,,so it will let you do all kinds of different things
Dialogue: 0,0:07:43.22,0:07:51.50,csapp,,0,0,0,,and as a result it's a big and messy API with a zillion zillions features and parameters and and so forth
Dialogue: 0,0:07:55.26,0:07:57.60,csapp,,0,0,0,,so you recall from last time that the
Dialogue: 0,0:07:59.12,0:08:05.44,csapp,,0,0,0,,the the data structures we use to refer to a connection
Dialogue: 0,0:08:06.40,0:08:11.42,csapp,,0,0,0,,whether it's an ipv4 or an ipv6 connection is called a sock outer
Dialogue: 0,0:08:12.16,0:08:15.90,csapp,,0,0,0,,and as I mentioned this is sort of the C version of subtyping
Dialogue: 0,0:08:15.96,0:08:18.78,csapp,,0,0,0,,if you know a language with a type inheritance
Dialogue: 0,0:08:19.30,0:08:22.20,csapp,,0,0,0,,this is how it's done in C it's done by casting
Dialogue: 0,0:08:22.88,0:08:26.40,csapp,,0,0,0,,and so in particular the sort of generic socket address
Dialogue: 0,0:08:26.44,0:08:32.06,csapp,,0,0,0,,all it needs to know is a two byte field at the front that specifies what kind of socket is this
Dialogue: 0,0:08:33.20,0:08:34.46,csapp,,0,0,0,,and then in particular
Dialogue: 0,0:08:35.78,0:08:38.46,csapp,,0,0,0,,we'll be looking at what's called a sockaddr_in
Dialogue: 0,0:08:39.02,0:08:43.26,csapp,,0,0,0,,which is an ipv4 version of of a socket
Dialogue: 0,0:08:43.44,0:08:52.02,csapp,,0,0,0,,and so what it needs to know is a port number which is a two byte integer and a IP address
Dialogue: 0,0:08:52.12,0:08:56.58,csapp,,0,0,0,,which is a four byte address for ipv4
Dialogue: 0,0:08:59.02,0:09:02.44,csapp,,0,0,0,,both of those are actually stored in this structure as I mentioned in in
Dialogue: 0,0:09:02.82,0:09:06.56,csapp,,0,0,0,,in big-endian order even if you're running it on a little endian machine
Dialogue: 0,0:09:07.32,0:09:09.78,csapp,,0,0,0,,and one of the interesting features of that
Dialogue: 0,0:09:10.32,0:09:12.36,csapp,,0,0,0,,this API this get adder info is
Dialogue: 0,0:09:13.06,0:09:18.78,csapp,,0,0,0,,it's largely removed the need for you as a programmer to worry about byte ordering
Dialogue: 0,0:09:19.04,0:09:20.56,csapp,,0,0,0,,and that's a nice feature
Dialogue: 0,0:09:21.18,0:09:25.96,csapp,,0,0,0,,so in general for example and getaddrinfo if I want to pass an ax port number
Dialogue: 0,0:09:26.44,0:09:28.46,csapp,,0,0,0,, I'll pass it as a character string
Dialogue: 0,0:09:29.24,0:09:33.56,csapp,,0,0,0,,a string representation of a decimal number in other words
Dialogue: 0,0:09:34.20,0:09:43.52,csapp,,0,0,0,,and then the the code here within this API will automatically turn that into a 16-bit integer and  put it in the proper byte order
Dialogue: 0,0:09:44.16,0:09:49.50,csapp,,0,0,0,,and same with how it takes use of this 32 bit  IP address
Dialogue: 0,0:09:50.16,0:09:53.80,csapp,,0,0,0,,and you want to get it into dotted decimal form it will do that for you
Dialogue: 0,0:09:54.26,0:09:57.88,csapp,,0,0,0,,without you having to worry about byte order so it's kind of a nice thing
Dialogue: 0,0:10:06.54,0:10:10.02,csapp,,0,0,0,,so get editor info has a whole bunch of arguments
Dialogue: 0,0:10:10.48,0:10:12.92,csapp,,0,0,0,,and some of them are essentially outputs
Dialogue: 0,0:10:13.52,0:10:16.86,csapp,,0,0,0,,some of them are inputs  things you're passing into the function
Dialogue: 0,0:10:17.18,0:10:20.94,csapp,,0,0,0,, and others are really more like outputs how it gets information back to you
Dialogue: 0,0:10:21.68,0:10:22.64,csapp,,0,0,0,,so in particular
Dialogue: 0,0:10:23.62,0:10:28.52,csapp,,0,0,0,, the first one is just the name of the host and that can be either a domain name
Dialogue: 0,0:10:29.18,0:10:38.10,csapp,,0,0,0,,or a dotted decimal name or one of those funky looking things with the Cohens that you solve for ipv6
Dialogue: 0,0:10:39.12,0:10:43.98,csapp,,0,0,0,,the service is usually if you're looking up so if we're using this to look up
Dialogue: 0,0:10:44.62,0:10:46.44,csapp,,0,0,0,, that'll actually be a null pointer
Dialogue: 0,0:10:47.10,0:10:54.96,csapp,,0,0,0,,and basically what typically you'll have is one of those two will be  a string  and the other will be a null pointer
Dialogue: 0,0:10:55.02,0:11:00.50,csapp,,0,0,0,,and the reason for that is the same function can be used either to look up a service like
Dialogue: 0,0:11:00.94,0:11:03.88,csapp,,0,0,0,,what is the port number associated with HTTP
Dialogue: 0,0:11:04.68,0:11:10.22,csapp,,0,0,0,,or it can be what is the IP address of www.cmu.edu
Dialogue: 0,0:11:11.44,0:11:14.40,csapp,,0,0,0,,the hints is something that you're passing in
Dialogue: 0,0:11:15.06,0:11:22.00,csapp,,0,0,0,,and it's basically as you fill in a small amount of a fairly large body of information
Dialogue: 0,0:11:22.02,0:11:28.04,csapp,,0,0,0,,about what specifically are you looking for in this request are you looking for an ipv6
Dialogue: 0,0:11:28.74,0:11:32.50,csapp,,0,0,0,,  information are you looking for ipv4  and so forth
Dialogue: 0,0:11:34.34,0:11:36.76,csapp,,0,0,0,,and then what it returns back
Dialogue: 0,0:11:37.32,0:11:40.02,csapp,,0,0,0,,that's why you pass a star star
Dialogue: 0,0:11:40.76,0:11:46.84,csapp,,0,0,0,,is it will return back a linked list that it's generated of results
Dialogue: 0,0:11:47.86,0:11:50.38,csapp,,0,0,0,,and the reason for that as I mentioned is
Dialogue: 0,0:11:51.14,0:11:57.36,csapp,,0,0,0,,that IP addresses are sort of many to many mapping potentially there as you saw
Dialogue: 0,0:11:57.80,0:12:01.58,csapp,,0,0,0,,it's possible for a single domain name to have multiple IP addresses
Dialogue: 0,0:12:02.18,0:12:05.44,csapp,,0,0,0,,it's possible for a single IP address to have multiple domain names
Dialogue: 0,0:12:05.96,0:12:11.60,csapp,,0,0,0,, and so this is how they handle that sort of fact that they return a whole list of results
Dialogue: 0,0:12:13.40,0:12:20.42,csapp,,0,0,0,,and associated with that once that result gets used once you done with it you're supposed to call a function called free adder info
Dialogue: 0,0:12:20.88,0:12:26.06,csapp,,0,0,0,, that will basically dispose of all the elements of that linked list you don't have to do it yourself with free
Dialogue: 0,0:12:26.86,0:12:31.26,csapp,,0,0,0,, and then there's a another helper function called gai_strerror
Dialogue: 0,0:12:31.90,0:12:34.90,csapp,,0,0,0,, that you use if there's an error code to help you interpret that error
Dialogue: 0,0:12:36.80,0:12:38.06,csapp,,0,0,0,,and it returns an error code
Dialogue: 0,0:12:40.26,0:12:44.50,csapp,,0,0,0,,so as I mentioned it returns up a link twist
Dialogue: 0,0:12:45.12,0:12:51.40,csapp,,0,0,0,,  that result is a linked list of these a get of adders Struck's header info struck
Dialogue: 0,0:12:53.14,0:12:56.08,csapp,,0,0,0,, and the adder info struct has iliyan fields
Dialogue: 0,0:12:56.94,0:12:59.34,csapp,,0,0,0,,some of which you'll use and some which you won't
Dialogue: 0,0:13:01.94,0:13:05.26,csapp,,0,0,0,, this is for example when you're passing in hints
Dialogue: 0,0:13:06.78,0:13:11.40,csapp,,0,0,0,,hints is sort of that what you're passing in the information you know some conditions about
Dialogue: 0,0:13:11.70,0:13:13.68,csapp,,0,0,0,,what you're looking for in this request
Dialogue: 0,0:13:17.24,0:13:21.20,csapp,,0,0,0,,and then what some of these you pass in and some of it returns
Dialogue: 0,0:13:21.78,0:13:24.76,csapp,,0,0,0,,and so some of these fields are ones that then you can use
Dialogue: 0,0:13:25.16,0:13:28.62,csapp,,0,0,0,,when you're making calls to other socket functions
Dialogue: 0,0:13:28.92,0:13:30.88,csapp,,0,0,0,,functions in the socket library
Dialogue: 0,0:13:31.32,0:13:34.04,csapp,,0,0,0,,it'll fill in instead of you having to worry about
Dialogue: 0,0:13:34.26,0:13:40.60,csapp,,0,0,0,,what's the structure the format of a sock adder in and how do I convert into network order and stuff
Dialogue: 0,0:13:41.20,0:13:42.84,csapp,,0,0,0,, it will do all that for you
Dialogue: 0,0:13:46.88,0:13:50.94,csapp,,0,0,0,, so it's a little confusing to use though because sometimes the stuff you're providing
Dialogue: 0,0:13:51.46,0:13:55.36,csapp,,0,0,0,,is stuff you're giving it and sometimes it's stuff that it's returning back to you
Dialogue: 0,0:13:59.72,0:14:01.64,csapp,,0,0,0,,and then there's an inverse function
Dialogue: 0,0:14:01.76,0:14:04.90,csapp,,0,0,0,,that so get editor info is given a
Dialogue: 0,0:14:09.06,0:14:14.32,csapp,,0,0,0,,it's actually give me the address information about some name
Dialogue: 0,0:14:15.50,0:14:19.34,csapp,,0,0,0,,and get name info is I give you an address
Dialogue: 0,0:14:19.88,0:14:24.88,csapp,,0,0,0,,and you give me back some documentation about it including potentially a domain name
Dialogue: 0,0:14:25.74,0:14:31.38,csapp,,0,0,0,,so there you pass in as a the first argument is a sock adder struct
Dialogue: 0,0:14:32.08,0:14:35.86,csapp,,0,0,0,,remember for this lecture and I think in the book in a few places
Dialogue: 0,0:14:35.86,0:14:39.86,csapp,,0,0,0,,we've sort of created a type def to alias
Dialogue: 0,0:14:40.52,0:14:45.02,csapp,,0,0,0,,so we don't have to say struct sock adder all over the place but that's what the SA is
Dialogue: 0,0:14:46.96,0:14:54.70,csapp,,0,0,0,, and it will provide back information about that that address
Dialogue: 0,0:14:54.92,0:14:57.84,csapp,,0,0,0,, so if you passing in a 32 bit IP address
Dialogue: 0,0:14:58.40,0:15:04.84,csapp,,0,0,0,,you can get it to return either a dotted decimal version of that or to do the DNS lookup
Dialogue: 0,0:15:05.32,0:15:07.42,csapp,,0,0,0,,and have it come back with the domain name for that
Dialogue: 0,0:15:11.16,0:15:17.60,csapp,,0,0,0,,so this is that program that I just demoed to you this one called host info
Dialogue: 0,0:15:17.70,0:15:24.46,csapp,,0,0,0,,so all it's really going to do is use these features to all on the command line give a domain name you say
Dialogue: 0,0:15:25.00,0:15:28.50,csapp,,0,0,0,,and it will just come back with a list of IP addresses
Dialogue: 0,0:15:30.04,0:15:30.88,csapp,,0,0,0,,so
Dialogue: 0,0:15:32.22,0:15:37.80,csapp,,0,0,0,,and this is pretty much the way you write code for this get adder info API
Dialogue: 0,0:15:39.02,0:15:45.04,csapp,,0,0,0,,that you typically so hints is the information I'm passing about what it is I'm looking for here
Dialogue: 0,0:15:46.62,0:15:51.98,csapp,,0,0,0,,and so you start typically by zeroing out that entire field
Dialogue: 0,0:15:53.68,0:15:56.56,csapp,,0,0,0,,and then setting the particular things you want
Dialogue: 0,0:15:56.74,0:15:59.08,csapp,,0,0,0,,so in particular
Dialogue: 0,0:16:00.36,0:16:05.58,csapp,,0,0,0,, in this code that's it that's in the slides and the one I demo to you last time
Dialogue: 0,0:16:05.64,0:16:08.70,csapp,,0,0,0,,I'm only going to be looking for ipv4 connections
Dialogue: 0,0:16:09.30,0:16:14.20,csapp,,0,0,0,,and so I use the constant called AF I net which is defined in the sockets interface
Dialogue: 0,0:16:14.94,0:16:20.00,csapp,,0,0,0,,and also I'll say that I want a TCP connection out what's called a socket stream
Dialogue: 0,0:16:20.54,0:16:28.84,csapp,,0,0,0,,which if you recall is the sort of protocol that 99% of the the IP traffic in the world is carrying is on TCP
Dialogue: 0,0:16:29.34,0:16:32.40,csapp,,0,0,0,,meaning it provides a somewhat higher level abstraction of
Dialogue: 0,0:16:32.94,0:16:35.78,csapp,,0,0,0,,of what's going on of sending packets back and forth
Dialogue: 0,0:16:37.26,0:16:40.04,csapp,,0,0,0,,so that's as much hint as I'm giving it here
Dialogue: 0,0:16:41.24,0:16:46.02,csapp,,0,0,0,,and now I'm I'm making a call to get adder info and this argument is the name
Dialogue: 0,0:16:46.44,0:16:49.18,csapp,,0,0,0,,which is I'm getting it right off of the command line here
Dialogue: 0,0:16:49.26,0:16:55.54,csapp,,0,0,0,,so in my demo it was always the commit up  a domain name
Dialogue: 0,0:16:55.92,0:17:04.02,csapp,,0,0,0,, I'm passing it null for the service as I mentioned this call you typically have one of the two are is null  but not both
Dialogue: 0,0:17:05.34,0:17:08.98,csapp,,0,0,0,, hints is what I'm passing in is this is the kind of information I want
Dialogue: 0,0:17:09.86,0:17:17.58,csapp,,0,0,0,,and list P is a will now become a pointer to the results that get returned by get adder info
Dialogue: 0,0:17:21.24,0:17:24.76,csapp,,0,0,0,,so that's the calling all of its quarry
Dialogue: 0,0:17:29.18,0:17:32.62,csapp,,0,0,0,,okay and now I want to go back so I got one of those linked lists
Dialogue: 0,0:17:32.78,0:17:37.30,csapp,,0,0,0,,and that will have a whole bunch of IP address of potentially multiple IP addresses in it
Dialogue: 0,0:17:37.80,0:17:39.56,csapp,,0,0,0,,maybe just one maybe none
Dialogue: 0,0:17:40.38,0:17:42.44,csapp,,0,0,0,, but some number of them in a link twist
Dialogue: 0,0:17:43.08,0:17:47.84,csapp,,0,0,0,,and I want to walk through that list and get back the dotted decimal version of all those names
Dialogue: 0,0:17:48.36,0:17:53.98,csapp,,0,0,0,,or the colon eyes of those ipv6 addresses I don't know how you refer to those by the way
Dialogue: 0,0:17:54.86,0:17:58.60,csapp,,0,0,0,,I know relatively little about IB v6 I have to confess
Dialogue: 0,0:18:00.10,0:18:05.42,csapp,,0,0,0,,so then there's a function called get name info which usually you use to take
Dialogue: 0,0:18:05.60,0:18:09.66,csapp,,0,0,0,,a socket address IP address and go backward and get a domain name
Dialogue: 0,0:18:10.24,0:18:11.16,csapp,,0,0,0,,but if I tell it
Dialogue: 0,0:18:12.08,0:18:16.74,csapp,,0,0,0,,by a flag one of the the final argument to it is a flag argument
Dialogue: 0,0:18:17.20,0:18:22.44,csapp,,0,0,0,,and say what I want back from this is not a donut main name I wanted in this numeric format
Dialogue: 0,0:18:22.82,0:18:27.42,csapp,,0,0,0,,either dotted decimal or the Cohen's between hex digits
Dialogue: 0,0:18:28.80,0:18:31.20,csapp,,0,0,0,, so by passing that to get name info
Dialogue: 0,0:18:31.84,0:18:36.92,csapp,,0,0,0,,what it's going to return and I'm passing in a buffer meaning of a care star
Dialogue: 0,0:18:37.68,0:18:43.82,csapp,,0,0,0,,and some size of that buffer and it's going to fill that in with the string representation of it
Dialogue: 0,0:18:44.38,0:18:46.90,csapp,,0,0,0,,so you see this is a way I'm going from the
Dialogue: 0,0:18:47.20,0:18:52.98,csapp,,0,0,0,, if you look at this is the actual sock adder of each of the wist elements
Dialogue: 0,0:18:55.26,0:18:59.88,csapp,,0,0,0,,I'm giving it it's going from that sock adder which embedded within it
Dialogue: 0,0:19:00.30,0:19:03.82,csapp,,0,0,0,,as you know is the four byte IP address
Dialogue: 0,0:19:04.44,0:19:06.78,csapp,,0,0,0,,and what it's doing is it's taking that
Dialogue: 0,0:19:07.28,0:19:11.20,csapp,,0,0,0,, flipping the bytes well and converting it to the dotted decimal form so
Dialogue: 0,0:19:12.06,0:19:17.06,csapp,,0,0,0,, this function can do a lot of different things and I'm using it for that particular feature here
Dialogue: 0,0:19:17.20,0:19:21.00,csapp,,0,0,0,,question
Dialogue: 0,0:19:21.22,0:19:23.84,csapp,,0,0,0,,if he is no then I will go very far
Dialogue: 0,0:19:28.02,0:19:30.60,csapp,,0,0,0,,yes because you know it's a null-terminated whist so
Dialogue: 0,0:19:31.42,0:19:32.24,csapp,,0,0,0,,other questions
Dialogue: 0,0:19:32.64,0:19:33.40,csapp,,0,0,0,,good questions
Dialogue: 0,0:19:34.10,0:19:36.32,csapp,,0,0,0,,but that's exactly the code you saw running
Dialogue: 0,0:19:36.90,0:19:42.16,csapp,,0,0,0,, and all I did to generalize it to include ipv6 addresses
Dialogue: 0,0:19:42.60,0:19:44.66,csapp,,0,0,0,,was I commented out this one
Dialogue: 0,0:19:45.94,0:19:53.26,csapp,,0,0,0,,say I don't I don't demand that it be a IP AFI net is a shorthand for ipv4
Dialogue: 0,0:19:53.32,0:20:01.72,csapp,,0,0,0,,so by commenting that out  it said okay I'll get whatever TCP connections this domain will support
Dialogue: 0,0:20:01.94,0:20:04.16,csapp,,0,0,0,,and that will include ipv6 addresses
Dialogue: 0,0:20:07.98,0:20:09.66,csapp,,0,0,0,,so I thought it's pretty neat
Dialogue: 0,0:20:10.42,0:20:14.90,csapp,,0,0,0,, and you have to be a pretty nerdy but I am pretty nerdy  to think this kind of thing is neat
Dialogue: 0,0:20:14.90,0:20:16.46,csapp,,0,0,0,,but that you could write code
Dialogue: 0,0:20:17.10,0:20:21.60,csapp,,0,0,0,, in this way that whether you're doing your different versions of the Internet Protocol
Dialogue: 0,0:20:22.96,0:20:25.30,csapp,,0,0,0,,well it's all one common body of code
Dialogue: 0,0:20:27.78,0:20:29.30,csapp,,0,0,0,,so we've seen demo of this
Dialogue: 0,0:20:30.16,0:20:37.60,csapp,,0,0,0,,okay so now let's jump into that shows you sort of a little bit of this  get adder info API
Dialogue: 0,0:20:37.76,0:20:42.04,csapp,,0,0,0,,now let's jump into the the full-blown web server part
Dialogue: 0,0:20:42.80,0:20:48.12,csapp,,0,0,0,,and as I mentioned in chronological order you actually want to set up the server first
Dialogue: 0,0:20:48.92,0:20:51.52,csapp,,0,0,0,,but it's easiest to understand the code for the client
Dialogue: 0,0:20:51.80,0:20:56.20,csapp,,0,0,0,,because as you see it has a couple fewer calls to make
Dialogue: 0,0:20:56.68,0:20:59.24,csapp,,0,0,0,,so let's go for through the client and just imagine
Dialogue: 0,0:20:59.66,0:21:03.28,csapp,,0,0,0,,that somewhere out there there's a server that's waiting for us to connect to
Dialogue: 0,0:21:06.72,0:21:09.10,csapp,,0,0,0,,so this now doesn't perhaps
Dialogue: 0,0:21:09.56,0:21:13.18,csapp,,0,0,0,,when you break it down maybe this picture looks a little less daunting
Dialogue: 0,0:21:13.52,0:21:22.92,csapp,,0,0,0,,we already saw get a tour info is the way I'm going to get an IP address  out of whatever I'm where my server is
Dialogue: 0,0:21:23.50,0:21:26.88,csapp,,0,0,0,,socket I mentioned this yesterday or last time
Dialogue: 0,0:21:27.40,0:21:33.90,csapp,,0,0,0,, it's just a local call that's used to allocate some data structures for this particular connection
Dialogue: 0,0:21:34.48,0:21:37.10,csapp,,0,0,0,,and then connect is like placing a call
Dialogue: 0,0:21:37.78,0:21:42.52,csapp,,0,0,0,, it's an API it's actually sending over the Internet to the server
Dialogue: 0,0:21:43.04,0:21:45.66,csapp,,0,0,0,,some information saying hey I'd like to connect you
Dialogue: 0,0:21:47.10,0:21:53.78,csapp,,0,0,0,,and then once the server risk that once that connection is accepted then I can begin my session
Dialogue: 0,0:21:55.02,0:21:56.06,csapp,,0,0,0,,so let's look at that
Dialogue: 0,0:21:58.94,0:22:03.44,csapp,,0,0,0,,so first of all I have to go through all this rigmarole with get adder info
Dialogue: 0,0:22:04.10,0:22:06.90,csapp,,0,0,0,,but it will look pretty similar to what you've seen before
Dialogue: 0,0:22:07.30,0:22:10.80,csapp,,0,0,0,,except I'm going to give a little more information because I want this to be
Dialogue: 0,0:22:14.26,0:22:18.56,csapp,,0,0,0,, I'm filling in a few more details here
Dialogue: 0,0:22:18.56,0:22:21.48,csapp,,0,0,0,,because I want to specify more features of this connection
Dialogue: 0,0:22:22.10,0:22:26.16,csapp,,0,0,0,,so I'm saying that it's a TCP connection that's a sock stream
Dialogue: 0,0:22:27.42,0:22:31.30,csapp,,0,0,0,,  I'm saying that I'm going to give it a port number in a numeric form
Dialogue: 0,0:22:31.38,0:22:41.02,csapp,,0,0,0,,you could also say as I mentioned of the certain ports have standard names HTTP SSH and so forth
Dialogue: 0,0:22:41.02,0:22:44.28,csapp,,0,0,0,,you can actually pass in the string representation of those
Dialogue: 0,0:22:44.86,0:22:49.54,csapp,,0,0,0,,but I'm using this in a sort of idiosyncratic way here
Dialogue: 0,0:22:50.46,0:22:57.52,csapp,,0,0,0,,and then this feature get adder config is a parameter that's described in the book
Dialogue: 0,0:22:57.56,0:22:59.68,csapp,,0,0,0,,and it they say it's a good idea to use it
Dialogue: 0,0:23:00.14,0:23:03.56,csapp,,0,0,0,,and then I'm making a call to my friend get adder info
Dialogue: 0,0:23:04.38,0:23:13.04,csapp,,0,0,0,,with these hints and it's going to return back this linked list of representing the the results of this request
Dialogue: 0,0:23:13.64,0:23:16.02,csapp,,0,0,0,,so basically a linked list of IP addresses
Dialogue: 0,0:23:18.30,0:23:21.84,csapp,,0,0,0,,and now just like you saw before I'm going to walk that list with a
Dialogue: 0,0:23:23.44,0:23:26.92,csapp,,0,0,0,,except now what I'm going to try and do is for each of those say
Dialogue: 0,0:23:27.34,0:23:30.40,csapp,,0,0,0,,well here's a number let me give that a try and if that fails
Dialogue: 0,0:23:30.42,0:23:34.90,csapp,,0,0,0,,here's another address let me give that a try so I'm going to just sequentially try
Dialogue: 0,0:23:35.54,0:23:37.30,csapp,,0,0,0,,all the different addresses you saw
Dialogue: 0,0:23:37.74,0:23:41.14,csapp,,0,0,0,, for example for potential addresses for Twitter
Dialogue: 0,0:23:41.70,0:23:43.24,csapp,,0,0,0,,I'll walk through all of those
Dialogue: 0,0:23:44.72,0:23:47.46,csapp,,0,0,0,,and on each one I'm going to call for a socket
Dialogue: 0,0:23:48.36,0:23:50.48,csapp,,0,0,0,,and the socket is the one that
Dialogue: 0,0:23:52.86,0:23:55.72,csapp,,0,0,0,,as I said it allocates some data structures
Dialogue: 0,0:23:55.88,0:23:59.50,csapp,,0,0,0,,I talked about this last time that's why I'm rushing through is pretty fast
Dialogue: 0,0:24:00.04,0:24:07.90,csapp,,0,0,0,,but you'll notice that the fields that you're filling in are actually all been generated for us by the
Dialogue: 0,0:24:09.32,0:24:10.76,csapp,,0,0,0,,get adder info call
Dialogue: 0,0:24:11.28,0:24:15.22,csapp,,0,0,0,,so whereas the East have to remember oh this is a number and it should be a shortened
Dialogue: 0,0:24:15.24,0:24:18.00,csapp,,0,0,0,,network order and yada da
Dialogue: 0,0:24:18.40,0:24:25.96,csapp,,0,0,0,,pretty much nowadays you can just say here I'm just going to pass you this information that
Dialogue: 0,0:24:32.12,0:24:34.56,csapp,,0,0,0,,was returned by a function call
Dialogue: 0,0:24:35.46,0:24:39.04,csapp,,0,0,0,,oh and then as I mentioned also last time
Dialogue: 0,0:24:39.24,0:24:41.14,csapp,,0,0,0,,  I know I went through a pretty fast last time
Dialogue: 0,0:24:41.68,0:24:45.32,csapp,,0,0,0,,socket actually returns back to you a file descriptor
Dialogue: 0,0:24:45.70,0:24:51.54,csapp,,0,0,0,,and you recall a file descriptor is just a small integer starts with 0 1 & 2
Dialogue: 0,0:24:52.20,0:24:53.72,csapp,,0,0,0,,and then it goes up from there
Dialogue: 0,0:24:54.94,0:25:00.50,csapp,,0,0,0,, and so I'm going to interface with this network code as if I'm talking through files
Dialogue: 0,0:25:02.16,0:25:06.18,csapp,,0,0,0,, but it doesn't socket doesn't actually do anything as far as the internet goes
Dialogue: 0,0:25:06.18,0:25:08.56,csapp,,0,0,0,,there's nothing going there's not even
Dialogue: 0,0:25:09.26,0:25:14.06,csapp,,0,0,0,, the you know serious effort within the operating system nothing goes over the network here
Dialogue: 0,0:25:15.76,0:25:22.04,csapp,,0,0,0,, so the real work here is but it also allocates some some local data structures
Dialogue: 0,0:25:23.96,0:25:28.16,csapp,,0,0,0,,and then what I'll do is I'll attempt to connect to the server
Dialogue: 0,0:25:28.62,0:25:32.73,csapp,,0,0,0,,and again you'll see the various arguments I have to pass to the connect command
Dialogue: 0,0:25:33.24,0:25:38.24,csapp,,0,0,0,, I get provided for me out of this call I made to get a tour info
Dialogue: 0,0:25:39.40,0:25:41.46,csapp,,0,0,0,,and that's either going to work  or it's not going to work
Dialogue: 0,0:25:41.94,0:25:44.92,csapp,,0,0,0,,similarly the socket call is either going to work or not work
Dialogue: 0,0:25:45.44,0:25:48.06,csapp,,0,0,0,,be very unusual for a call to socket to fail
Dialogue: 0,0:25:48.72,0:25:54.74,csapp,,0,0,0,,but connect for example will fail if the server's not available  or doesn't like you for some reason
Dialogue: 0,0:25:56.28,0:26:02.48,csapp,,0,0,0,,and so if that succeeds I'm going to break out of this loop
Dialogue: 0,0:26:03.16,0:26:11.10,csapp,,0,0,0,, I'm going to then free this data structure  and return the client the file descriptor
Dialogue: 0,0:26:11.98,0:26:19.76,csapp,,0,0,0,,for the  this particular function its job is to open a connection to a client and return a file descriptor for it
Dialogue: 0,0:26:20.34,0:26:24.88,csapp,,0,0,0,, and this is just what happens if you fall out of the loop not having made any connections
Dialogue: 0,0:26:30.94,0:26:35.54,csapp,,0,0,0,, ok so I know this is I'm marching this fast
Dialogue: 0,0:26:36.76,0:26:41.82,csapp,,0,0,0,,and as I said I know from my own personal experience I can attest this stuff
Dialogue: 0,0:26:42.32,0:26:46.08,csapp,,0,0,0,, just takes time to understand because there's so many different features here
Dialogue: 0,0:26:47.04,0:26:50.48,csapp,,0,0,0,, ok but that's the idea is we're going to
Dialogue: 0,0:26:51.88,0:26:56.60,csapp,,0,0,0,,now on this server side which as I mentioned is that actually what you do beforehand
Dialogue: 0,0:26:56.60,0:27:00.46,csapp,,0,0,0,,because you can't really have a client connect to a server that doesn't exist
Dialogue: 0,0:27:01.16,0:27:04.00,csapp,,0,0,0,,  but it's just a little bit trickier to understand what's going on
Dialogue: 0,0:27:05.00,0:27:07.84,csapp,,0,0,0,,but you'll see it the first two steps are the same I need a socket
Dialogue: 0,0:27:08.54,0:27:13.22,csapp,,0,0,0,,but then remember what I want to do is essentially set up a server
Dialogue: 0,0:27:13.22,0:27:18.54,csapp,,0,0,0,, that's listening on a particular port for clients to request on it
Dialogue: 0,0:27:18.98,0:27:21.62,csapp,,0,0,0,,and that's the function of the bind and the listen functions
Dialogue: 0,0:27:22.68,0:27:26.44,csapp,,0,0,0,, and then the accept is when I'm saying ok the server is ready
Dialogue: 0,0:27:27.04,0:27:28.50,csapp,,0,0,0,,I'm ready to accept requests
Dialogue: 0,0:27:29.00,0:27:32.02,csapp,,0,0,0,,and it will fire that up
Dialogue: 0,0:27:33.04,0:27:39.06,csapp,,0,0,0,,in particular the accept will just stop and hang up and wait
Dialogue: 0,0:27:39.34,0:27:43.02,csapp,,0,0,0,,indefinitely until some connection request comes in
Dialogue: 0,0:27:43.86,0:27:47.38,csapp,,0,0,0,,so if the server has no customers if there are no clients
Dialogue: 0,0:27:48.02,0:27:54.00,csapp,,0,0,0,,it will just be waiting potentially forever with the call to accept
Dialogue: 0,0:27:55.64,0:27:57.82,csapp,,0,0,0,,ok everything else goes through boom boom boom
Dialogue: 0,0:27:57.92,0:28:02.18,csapp,,0,0,0,,but that one is where the actual waiting occurs for client connections
Dialogue: 0,0:28:07.00,0:28:08.74,csapp,,0,0,0,,some way I should mention the connect
Dialogue: 0,0:28:10.42,0:28:13.86,csapp,,0,0,0,,will also hang up and wait until the connection is formed
Dialogue: 0,0:28:14.36,0:28:19.10,csapp,,0,0,0,, but typically it's built in with a time out so that it will fail if it takes too long
Dialogue: 0,0:28:19.42,0:28:24.06,csapp,,0,0,0,,  and there's you can adjust the parameters on both of these how long you wait for whether your weight or not
Dialogue: 0,0:28:26.28,0:28:28.00,csapp,,0,0,0,, but I'm talking the typical case
Dialogue: 0,0:28:28.54,0:28:30.20,csapp,,0,0,0,,so anyways
Dialogue: 0,0:28:30.80,0:28:34.30,csapp,,0,0,0,,that again what will look a little those functions then
Dialogue: 0,0:28:37.04,0:28:40.72,csapp,,0,0,0,, okay so this again we have to make a call to get editor info
Dialogue: 0,0:28:41.34,0:28:45.64,csapp,,0,0,0,, and this time it's not because I need any IP addresses I already have an IP address
Dialogue: 0,0:28:45.64,0:28:52.64,csapp,,0,0,0,,I'm a local server I don't actually need to know the IP addresses of my of the clients
Dialogue: 0,0:28:52.74,0:28:53.94,csapp,,0,0,0,,I usually won't know them
Dialogue: 0,0:28:54.96,0:28:59.68,csapp,,0,0,0,,  but I need to fill in all those nasty little data structures and so
Dialogue: 0,0:29:00.00,0:29:02.76,csapp,,0,0,0,, that's what I'm going to use get adder info here for here
Dialogue: 0,0:29:03.72,0:29:08.06,csapp,,0,0,0,,so I'm going to say this time again I want a TCP connection a sock stream
Dialogue: 0,0:29:09.16,0:29:19.24,csapp,,0,0,0,,I want it to be a listening for any IP address connection coming in
Dialogue: 0,0:29:21.00,0:29:25.02,csapp,,0,0,0,,so it's passive meaning it's not actively reaching out
Dialogue: 0,0:29:25.18,0:29:27.74,csapp,,0,0,0,,its passively waiting for connection requests
Dialogue: 0,0:29:29.52,0:29:32.18,csapp,,0,0,0,,I'll say that I'm going to tell you a port number
Dialogue: 0,0:29:32.70,0:29:36.52,csapp,,0,0,0,,that I'm going to actually use as my servers port number
Dialogue: 0,0:29:37.46,0:29:43.54,csapp,,0,0,0,,and then I'm going to make a call and this time you see that
Dialogue: 0,0:29:44.02,0:29:47.66,csapp,,0,0,0,, I'm not giving any information about the host because I am the host
Dialogue: 0,0:29:48.40,0:29:53.58,csapp,,0,0,0,,but I'm giving the information of the port number that I'm using for this server
Dialogue: 0,0:29:54.34,0:29:56.92,csapp,,0,0,0,,and the other hints that I've just filled in
Dialogue: 0,0:29:57.34,0:29:59.40,csapp,,0,0,0,,and then it will return a wispy yes
Dialogue: 0,0:29:59.40,0:30:02.06,csapp,,0,0,0,,[student speaking]
Dialogue: 0,0:30:02.08,0:30:05.70,csapp,,0,0,0,,memset is the standard way that you set
Dialogue: 0,0:30:06.18,0:30:11.56,csapp,,0,0,0,,all the bytes in in some number of bytes to a fixed value
Dialogue: 0,0:30:12.20,0:30:15.84,csapp,,0,0,0,,it's the same as if you've use B 0 before or B
Dialogue: 0,0:30:16.94,0:30:20.82,csapp,,0,0,0,, it was is the way you often would zero out a bunch of bytes
Dialogue: 0,0:30:21.72,0:30:27.76,csapp,,0,0,0,,and if you look at the web page and I don't know why they say use memset don't use b 0 anymore so
Dialogue: 0,0:30:30.98,0:30:34.28,csapp,,0,0,0,,cal equal to 0 it out but I'm not actually
Dialogue: 0,0:30:34.80,0:30:39.12,csapp,,0,0,0,,eleking anything see the hints is a struct here
Dialogue: 0,0:30:41.30,0:30:44.72,csapp,,0,0,0,,and remember is struct is just a bunch of bytes
Dialogue: 0,0:30:44.80,0:30:50.00,csapp,,0,0,0,,and so if I make that particular call to memset it will set every byte in that structure to 0
Dialogue: 0,0:30:50.04,0:30:54.54,csapp,,0,0,0,,and this is sort of the official standard way you're supposed to do that kind of
Dialogue: 0,0:30:55.20,0:30:56.82,csapp,,0,0,0,,thing it's a good question so question
Dialogue: 0,0:30:56.96,0:31:01.20,csapp,,0,0,0,,
Dialogue: 0,0:31:01.20,0:31:03.76,csapp,,0,0,0,,hey I passive is that it's a
Dialogue: 0,0:31:05.04,0:31:09.44,csapp,,0,0,0,, it's a listening connection it's going to be a listening connection
Dialogue: 0,0:31:10.26,0:31:15.88,csapp,,0,0,0,,and a I adder config was  some other argument
Dialogue: 0,0:31:17.44,0:31:23.60,csapp,,0,0,0,,and quite honestly I don't remember but you saw I gave it before  with the get host name
Dialogue: 0,0:31:24.19,0:31:29.18,csapp,,0,0,0,,so I don't remember it's it's a slot somewhat obscure per parameter
Dialogue: 0,0:31:29.18,0:31:31.18,csapp,,0,0,0,,that's not even a required parameter
Dialogue: 0,0:31:31.90,0:31:33.52,csapp,,0,0,0,, it's in the book I'm sorry
Dialogue: 0,0:31:34.92,0:31:36.46,csapp,,0,0,0,,or you could Google it right now
Dialogue: 0,0:31:41.98,0:31:46.82,csapp,,0,0,0,,one interesting thing is I didn't say that on this code on either side that it's a Fi net
Dialogue: 0,0:31:46.82,0:31:49.52,csapp,,0,0,0,,I didn't force this to be ipv4 code
Dialogue: 0,0:31:49.76,0:31:53.28,csapp,,0,0,0,, this will work for ipv4 or six the exact same code
Dialogue: 0,0:31:54.56,0:32:01.78,csapp,,0,0,0,, okay so again whispy comes back with a list of stuff typically that list will be of length one
Dialogue: 0,0:32:04.24,0:32:06.54,csapp,,0,0,0,,in fact I don't know why it would be anything else
Dialogue: 0,0:32:07.32,0:32:10.46,csapp,,0,0,0,, but it has the same general look to it
Dialogue: 0,0:32:11.44,0:32:15.12,csapp,,0,0,0,,so again I'm going to make a call to socket
Dialogue: 0,0:32:16.04,0:32:19.88,csapp,,0,0,0,,to create a file descriptor that I'm going to use this will be the one that
Dialogue: 0,0:32:19.98,0:32:23.10,csapp,,0,0,0,, it's missed the server listens on of your connection requests
Dialogue: 0,0:32:25.08,0:32:31.24,csapp,,0,0,0,,and then there's another kind of obscure thing you have to do of setting some options on that socket
Dialogue: 0,0:32:31.78,0:32:39.22,csapp,,0,0,0,,  that will get it to free it up more quickly if there's a failure
Dialogue: 0,0:32:40.48,0:32:45.60,csapp,,0,0,0,, if this is gone this one I dunno and it's kind of obscure and it's in the book
Dialogue: 0,0:32:45.60,0:32:47.36,csapp,,0,0,0,,so I won't spend a lot of time talking about it
Dialogue: 0,0:32:48.08,0:32:54.52,csapp,,0,0,0,,okay but now what here's the real work is the bind call i s the one that says
Dialogue: 0,0:32:55.64,0:33:01.82,csapp,,0,0,0,, I want this file descriptor  to be associated with
Dialogue: 0,0:33:03.20,0:33:07.78,csapp,,0,0,0,,this information which in particular specifies the port number
Dialogue: 0,0:33:07.94,0:33:13.86,csapp,,0,0,0,,so that's where the binding occurs for this machine remember port numbers are
Dialogue: 0,0:33:14.34,0:33:19.28,csapp,,0,0,0,,a resource that all the different applications on a single machine are sort of sharing
Dialogue: 0,0:33:19.72,0:33:21.32,csapp,,0,0,0,,where are competing for
Dialogue: 0,0:33:21.88,0:33:26.48,csapp,,0,0,0,,and so this is requesting I want to use this particular port number
Dialogue: 0,0:33:26.96,0:33:30.00,csapp,,0,0,0,, in doing this in setting up a server
Dialogue: 0,0:33:30.48,0:33:33.00,csapp,,0,0,0,, and that may fail if the ports already in use
Dialogue: 0,0:33:33.56,0:33:36.26,csapp,,0,0,0,,or if you're trying to set up a service on a port
Dialogue: 0,0:33:36.28,0:33:45.18,csapp,,0,0,0,,that you're not allowed to do like you're not allowed to set up a service on port 80 unless you have root access
Dialogue: 0,0:33:50.02,0:33:50.72,csapp,,0,0,0,,so and
Dialogue: 0,0:33:51.96,0:33:58.14,csapp,,0,0,0,,then again it passes in the information that was filled in by the call to get a tour info
Dialogue: 0,0:34:04.96,0:34:06.28,csapp,,0,0,0,,so we're not quite done yet
Dialogue: 0,0:34:07.00,0:34:12.96,csapp,,0,0,0,,but we if this succeeds then what we've done is we bound a port number
Dialogue: 0,0:34:13.34,0:34:17.42,csapp,,0,0,0,, and a file descriptor together  and a socket
Dialogue: 0,0:34:23.28,0:34:29.44,csapp,,0,0,0,,but it all that's done is that's again just within the machine saying okay
Dialogue: 0,0:34:30.10,0:34:36.18,csapp,,0,0,0,, I agree you you you particularly this particular process gets to be listening on a particular port
Dialogue: 0,0:34:36.90,0:34:38.50,csapp,,0,0,0,,but it's not actually listening yet
Dialogue: 0,0:34:39.68,0:34:41.99,csapp,,0,0,0,,and I don't know why they split it into two but they do
Dialogue: 0,0:34:42.66,0:34:46.64,csapp,,0,0,0,,and now I actually have to explicitly make a call to listen saying okay
Dialogue: 0,0:34:47.06,0:34:50.00,csapp,,0,0,0,,now I really am ready to receive connection requests
Dialogue: 0,0:34:51.24,0:34:53.20,csapp,,0,0,0,,and you can give as a parameter of a
Dialogue: 0,0:34:55.16,0:35:03.36,csapp,,0,0,0,, number that says how many a request connection requests are you allowed to queue up
Dialogue: 0,0:35:05.10,0:35:09.28,csapp,,0,0,0,,before they start getting refused and this is a performance parameter
Dialogue: 0,0:35:09.78,0:35:11.62,csapp,,0,0,0,,  that if you set it too low then
Dialogue: 0,0:35:12.08,0:35:17.10,csapp,,0,0,0,,unless you have a really fast server people will get failures in their connection requests
Dialogue: 0,0:35:18.20,0:35:25.86,csapp,,0,0,0,,but if it's too big then you can you're vulnerable to certain types of sort of  denial of service attacks
Dialogue: 0,0:35:27.82,0:35:30.24,csapp,,0,0,0,,so again a little bit of an obscure feature
Dialogue: 0,0:35:31.40,0:35:33.44,csapp,,0,0,0,, but the result of this is now
Dialogue: 0,0:35:33.86,0:35:35.10,csapp,,0,0,0,,I'm returning out of this
Dialogue: 0,0:35:35.70,0:35:40.62,csapp,,0,0,0,,a file descriptor that the server can use to listen to pick up connection requests
Dialogue: 0,0:35:44.54,0:35:49.54,csapp,,0,0,0,,okay so let's do a little example of how we might actually do something
Dialogue: 0,0:35:49.84,0:35:55.24,csapp,,0,0,0,,and I'm going to use as an example a rather mundane application
Dialogue: 0,0:35:57.30,0:35:59.10,csapp,,0,0,0,,which is an echo server
Dialogue: 0,0:35:59.80,0:36:06.06,csapp,,0,0,0,,an echo server is just one that responds back whatever it just received
Dialogue: 0,0:36:08.22,0:36:11.74,csapp,,0,0,0,, and the code for it saw in the book on the slides
Dialogue: 0,0:36:12.40,0:36:13.20,csapp,,0,0,0,, we're studying
Dialogue: 0,0:36:17.58,0:36:20.38,csapp,,0,0,0,,so let me set up this amazing demonstration
Dialogue: 0,0:36:32.16,0:36:38.88,csapp,,0,0,0,,so it's called the echo server I I meaning iterative it can only do one connection request at a time
Dialogue: 0,0:36:40.18,0:36:44.14,csapp,,0,0,0,,and I'm going to set it up on my laptop here
Dialogue: 0,0:36:45.40,0:36:46.26,csapp,,0,0,0,,and
Dialogue: 0,0:36:49.68,0:36:51.10,csapp,,0,0,0,,I'll connect to that
Dialogue: 0,0:37:00.24,0:37:06.30,csapp,,0,0,0,, so you'll see that I told the server use port 15 to 13 which is just a random number I picked out
Dialogue: 0,0:37:07.02,0:37:08.24,csapp,,0,0,0,,as the port number
Dialogue: 0,0:37:09.44,0:37:11.78,csapp,,0,0,0,,in general if you want to do your own stuff
Dialogue: 0,0:37:11.92,0:37:19.36,csapp,,0,0,0,,you pick port numbers that are a thousand or greater and they're limited to be unsigned 16-bit n
Dialogue: 0,0:37:19.50,0:37:22.62,csapp,,0,0,0,,so 64 or 65 thousand something some maximum
Dialogue: 0,0:37:24.14,0:37:26.64,csapp,,0,0,0,,and as long as and by the way
Dialogue: 0,0:37:27.38,0:37:32.80,csapp,,0,0,0,, if you're you live in a corporate world your ports will all be locked down and they will not let you do this
Dialogue: 0,0:37:32.92,0:37:37.38,csapp,,0,0,0,, but in the CMU environment has a pretty permissive policy
Dialogue: 0,0:37:37.76,0:37:44.12,csapp,,0,0,0,, and actually I'm just doing this on localhost but you're allowed to at CMU  open up ports like you want
Dialogue: 0,0:37:47.94,0:37:50.79,csapp,,0,0,0,,so anyways I'm going to run this client and
Dialogue: 0,0:37:51.48,0:37:53.04,csapp,,0,0,0,,you'll see that
Dialogue: 0,0:37:54.54,0:38:01.98,csapp,,0,0,0,, the server just said I've received a connection from the localhost  not very exciting
Dialogue: 0,0:38:02.52,0:38:06.12,csapp,,0,0,0,,and I've received it from port 55457
Dialogue: 0,0:38:06.26,0:38:08.86,csapp,,0,0,0,,so this is the part that got assigned to the client
Dialogue: 0,0:38:09.72,0:38:14.46,csapp,,0,0,0,, in making the connection the server is using port 15 to 13
Dialogue: 0,0:38:14.80,0:38:21.80,csapp,,0,0,0,,and you recall we talked about last time that a link   is defined by the host and port names on either end
Dialogue: 0,0:38:22.46,0:38:26.54,csapp,,0,0,0,, and that the client side is usually assigned what they call a ephemeral port
Dialogue: 0,0:38:26.76,0:38:31.74,csapp,,0,0,0,,it's meaning it's just assigned a trip for this particular session that I'm going to run
Dialogue: 0,0:38:32.58,0:38:37.40,csapp,,0,0,0,,and now here's the amazing feature of an echo  server is that you can type in stuff
Dialogue: 0,0:38:38.84,0:38:39.98,csapp,,0,0,0,,and it will come back to you
Dialogue: 0,0:38:43.58,0:38:46.00,csapp,,0,0,0,,because echoing so what's happening is
Dialogue: 0,0:38:46.58,0:38:50.50,csapp,,0,0,0,,I'm sending those meaningful messages to the server
Dialogue: 0,0:38:51.30,0:38:52.46,csapp,,0,0,0,,it's reading them
Dialogue: 0,0:38:52.94,0:38:56.68,csapp,,0,0,0,,and it's just sending them right back
Dialogue: 0,0:38:56.92,0:39:00.10,csapp,,0,0,0,,and then the clients reading that and printing it on the screen
Dialogue: 0,0:39:00.44,0:39:03.10,csapp,,0,0,0,,
Dialogue: 0,0:39:03.66,0:39:06.20,csapp,,0,0,0,,can see that the server is telling you
Dialogue: 0,0:39:06.60,0:39:12.04,csapp,,0,0,0,,oh by the way I just received so many bytes so many bytes so many bytes so you can see that it's actually doing something
Dialogue: 0,0:39:14.24,0:39:18.22,csapp,,0,0,0,, and then if I send it into file which is just to control D
Dialogue: 0,0:39:19.76,0:39:25.24,csapp,,0,0,0,,the client will exit and the server will
Dialogue: 0,0:39:25.24,0:39:27.62,csapp,,0,0,0,,drop that connection but doesn't show
Dialogue: 0,0:39:27.62,0:39:31.78,csapp,,0,0,0,,you anything and if I wanted to I could start it again and
Dialogue: 0,0:39:32.30,0:39:37.32,csapp,,0,0,0,, you see this time it signed a different ephemeral port to the client
Dialogue: 0,0:39:39.50,0:39:44.34,csapp,,0,0,0,,but I can only do one at a time if I tried to now do another connection
Dialogue: 0,0:39:44.12,0:39:49.48,csapp,,0,0,0,,I will try and do it if I tried to do it
Dialogue: 0,0:39:51.70,0:39:56.30,csapp,,0,0,0,,I wouldn't I it would just hang up the the client would hang up it would not be able to get a connection
Dialogue: 0,0:39:56.34,0:40:01.44,csapp,,0,0,0,,because the server is only able to handle one client at a time
Dialogue: 0,0:40:02.70,0:40:04.72,csapp,,0,0,0,,okay so that's the
Dialogue: 0,0:40:06.12,0:40:09.84,csapp,,0,0,0,,what the application does and now let's see how its implemented
Dialogue: 0,0:40:13.98,0:40:18.26,csapp,,0,0,0,,it's pretty simple the the nastiness was those functions we've already seen
Dialogue: 0,0:40:19.34,0:40:20.66,csapp,,0,0,0,,so here's the client side of it
Dialogue: 0,0:40:21.18,0:40:25.48,csapp,,0,0,0,,it calls that function I went through called open the client file descriptor
Dialogue: 0,0:40:25.52,0:40:29.40,csapp,,0,0,0,,where you gave the name of the host and the name of the port
Dialogue: 0,0:40:30.28,0:40:32.52,csapp,,0,0,0,,that you're the server's operating on
Dialogue: 0,0:40:32.60,0:40:36.18,csapp,,0,0,0,,so I said here localhost 15 to 13
Dialogue: 0,0:40:37.00,0:40:38.76,csapp,,0,0,0,,and I'm going to initialize a buffer
Dialogue: 0,0:40:39.26,0:40:44.98,csapp,,0,0,0,, that will be used for communication back and forth for this network communication
Dialogue: 0,0:40:46.00,0:40:52.64,csapp,,0,0,0,, so now echoing means I from a client perspective it will just read in what I've typed 
Dialogue: 0,0:40:53.44,0:41:00.28,csapp,,0,0,0,,so using gets or F gets to read in what's been typed on the standard input 
Dialogue: 0,0:41:01.50,0:41:05.50,csapp,,0,0,0,,and as long as that's not null meaning I don't have a end of file 
Dialogue: 0,0:41:06.60,0:41:09.50,csapp,,0,0,0,,then I will write it to the client file descriptors 
Dialogue: 0,0:41:09.58,0:41:11.38,csapp,,0,0,0,,so that's how I actually send it over the network
Dialogue: 0,0:41:11.50,0:41:19.08,csapp,,0,0,0,,as I do a write to that a socket that that file descriptor represents 
Dialogue: 0,0:41:19.68,0:41:23.76,csapp,,0,0,0,,and then to get something back from the server its response I'll do a read 
Dialogue: 0,0:41:26.58,0:41:29.08,csapp,,0,0,0,,and riyo as you call has embedded within it 
Dialogue: 0,0:41:33.64,0:41:37.18,csapp,,0,0,0,,now what file descriptor that read is using 
Dialogue: 0,0:41:39.22,0:41:45.32,csapp,,0,0,0,,so I'll say read from that particular file descriptor fill the results back into this buffer 
Dialogue: 0,0:41:46.06,0:41:49.58,csapp,,0,0,0,,so I'm using buff both as a sending buffer and a receiving buffer
Dialogue: 0,0:41:50.62,0:41:55.98,csapp,,0,0,0,, and then just print that out onto the on to the terminal 
Dialogue: 0,0:41:56.60,0:42:01.24,csapp,,0,0,0,, and this is by the way the new lines being included in this not just the 
Dialogue: 0,0:42:01.94,0:42:04.44,csapp,,0,0,0,, in all of this and that's how it's working 
Dialogue: 0,0:42:05.02,0:42:05.98,csapp,,0,0,0,,so that's all that happens
Dialogue: 0,0:42:05.98,0:42:13.06,csapp,,0,0,0,,so the main point you see here is that I'm using this a socket like a file to both send and receive
Dialogue: 0,0:42:17.44,0:42:23.56,csapp,,0,0,0,,the server code is just a shade more nasty than that to support some of those amazing features it has
Dialogue: 0,0:42:24.50,0:42:25.56,csapp,,0,0,0,, so in particular
Dialogue: 0,0:42:26.76,0:42:29.80,csapp,,0,0,0,,there's a weird struct called a socket or storage 
Dialogue: 0,0:42:30.56,0:42:34.74,csapp,,0,0,0,,that is just again part of this generic API
Dialogue: 0,0:42:34.82,0:42:39.16,csapp,,0,0,0,, that gives you a buffer of some kind that's big enough to store
Dialogue: 0,0:42:39.78,0:42:46.70,csapp,,0,0,0,,a name of a host is what I'm going to use it for you 
Dialogue: 0,0:42:50.02,0:42:55.68,csapp,,0,0,0,,and so I'm going to accept a connection 
Dialogue: 0,0:42:59.14,0:43:02.14,csapp,,0,0,0,,so except recall you recall is the way 
Dialogue: 0,0:43:02.34,0:43:09.30,csapp,,0,0,0,,it it says okay I'm going to wait here until a client contacts this server 
Dialogue: 0,0:43:10.48,0:43:14.92,csapp,,0,0,0,,so that you make a call to accept and it will just hang until that contact occurs 
Dialogue: 0,0:43:16.04,0:43:23.32,csapp,,0,0,0,,and then what it will return from you is a new file descriptor  that we call a connection file descriptor here 
Dialogue: 0,0:43:23.92,0:43:26.92,csapp,,0,0,0,,which is different from the listening file descriptor 
Dialogue: 0,0:43:26.92,0:43:31.18,csapp,,0,0,0,,and the reason is doesn't really show up in this code  where I'm doing iteratively
Dialogue: 0,0:43:31.62,0:43:36.58,csapp,,0,0,0,,but you can imagine if I had a server and I wanted to be able to maintain a thousand connections at once 
Dialogue: 0,0:43:37.26,0:43:40.84,csapp,,0,0,0,,there'll be one of those file descriptors that I pick up new requests on 
Dialogue: 0,0:43:41.34,0:43:45.96,csapp,,0,0,0,,and then all the other ones are the various other clients that I'm communicating with right now 
Dialogue: 0,0:43:48.88,0:43:52.80,csapp,,0,0,0,,oh and then what accept fills in here into this information 
Dialogue: 0,0:43:52.88,0:44:00.48,csapp,,0,0,0,,it's a sock adder struct is about information about the client the IP address of the client
Dialogue: 0,0:44:04.70,0:44:05.62,csapp,,0,0,0,,and
Dialogue: 0,0:44:06.66,0:44:11.70,csapp,,0,0,0,, I'll use this call called get name info which is again at one of these kitchen sink features 
Dialogue: 0,0:44:11.70,0:44:15.30,csapp,,0,0,0,,that I'll pass in this client address 
Dialogue: 0,0:44:18.00,0:44:19.64,csapp,,0,0,0,,and
Dialogue: 0,0:44:20.76,0:44:25.52,csapp,,0,0,0,, it will come back with the I the domain name of the client 
Dialogue: 0,0:44:27.04,0:44:33.08,csapp,,0,0,0,,and that's what you saw how it printed out when the connection was formed where that connection was coming from 
Dialogue: 0,0:44:34.06,0:44:39.84,csapp,,0,0,0,,so this all this business here is used to support that feature of being able to print out 
Dialogue: 0,0:44:40.52,0:44:45.32,csapp,,0,0,0,, what's the host number name and what port am I using 
Dialogue: 0,0:44:45.54,0:44:49.68,csapp,,0,0,0,,and this thing by the way  client port is 
Dialogue: 0,0:44:52.98,0:44:59.80,csapp,,0,0,0,,a client host name and client port are both buffers 
Dialogue: 0,0:45:01.52,0:45:05.78,csapp,,0,0,0,,yes host name and port are both buffers 
Dialogue: 0,0:45:05.92,0:45:07.98,csapp,,0,0,0,,and I'm passing a pointer those buffers 
Dialogue: 0,0:45:08.54,0:45:12.02,csapp,,0,0,0,,and I'm passing their length max line 
Dialogue: 0,0:45:12.46,0:45:19.22,csapp,,0,0,0,,and then the call to get name info is filling those in with a string representations of the host name in the port
Dialogue: 0,0:45:22.74,0:45:27.20,csapp,,0,0,0,,and now it just makes a call to the echo function which I'll show you momentarily
Dialogue: 0,0:45:27.62,0:45:32.32,csapp,,0,0,0,,and then it closes that connection 
Dialogue: 0,0:45:32.90,0:45:36.90,csapp,,0,0,0,,and then this continues you see the while one this is in a loop forever
Dialogue: 0,0:45:37.26,0:45:40.30,csapp,,0,0,0,, and you actually have to control C on this program to get it to quit 
Dialogue: 0,0:45:42.08,0:45:42.32,csapp,,0,0,0,,okay 
Dialogue: 0,0:45:43.46,0:45:45.08,csapp,,0,0,0,,so let me just look one more 
Dialogue: 0,0:45:46.10,0:45:50.86,csapp,,0,0,0,,so the func this now is the echo function that the server uses and it's pretty straightforward 
Dialogue: 0,0:45:51.60,0:45:56.58,csapp,,0,0,0,,in fact it looks kind of like what you just saw except it flips around the reading and the writing
Dialogue: 0,0:45:57.42,0:46:06.08,csapp,,0,0,0,, it will read some number of bytes over the connection file descriptor 
Dialogue: 0,0:46:07.96,0:46:10.72,csapp,,0,0,0,,and if that's a nonzero number 
Dialogue: 0,0:46:11.58,0:46:14.52,csapp,,0,0,0,,then it will echo that back by writing it 
Dialogue: 0,0:46:15.36,0:46:18.32,csapp,,0,0,0,,if it's a zero that means it's detected and into file 
Dialogue: 0,0:46:18.40,0:46:21.90,csapp,,0,0,0,,and it will just exit from that little loop 
Dialogue: 0,0:46:22.46,0:46:26.30,csapp,,0,0,0,,but remember echo is within a bigger loop of accepting new connection requests 
Dialogue: 0,0:46:27.82,0:46:33.08,csapp,,0,0,0,,okay but again just see that it reads is way of accepting information from the client
Dialogue: 0,0:46:33.62,0:46:35.98,csapp,,0,0,0,,and then it writes to send information back to the coin 
Dialogue: 0,0:46:38.24,0:46:38.62,csapp,,0,0,0,,good 
Dialogue: 0,0:46:41.38,0:46:45.40,csapp,,0,0,0,,so one interesting feature is if you want to test some programs 
Dialogue: 0,0:46:45.40,0:46:52.30,csapp,,0,0,0,,you can use a program called telnet which it used to be the old-fashioned way you use before SSH
Dialogue: 0,0:46:52.56,0:46:55.20,csapp,,0,0,0,,this is how you communicated with other machines 
Dialogue: 0,0:46:55.84,0:46:58.08,csapp,,0,0,0,, and it's absolutely completely insecure 
Dialogue: 0,0:46:58.54,0:47:02.64,csapp,,0,0,0,,so don't ever use it to actually and most most places 
Dialogue: 0,0:47:02.68,0:47:05.80,csapp,,0,0,0,, you can't even make a connection to another machine using telnet 
Dialogue: 0,0:47:08.22,0:47:11.70,csapp,,0,0,0,,it's amazing how simple life used to be 
Dialogue: 0,0:47:13.52,0:47:15.02,csapp,,0,0,0,,but for example
Dialogue: 0,0:47:20.44,0:47:23.52,csapp,,0,0,0,,if I tell net to myself on that port
Dialogue: 0,0:47:27.88,0:47:30.16,csapp,,0,0,0,,  it will begin a session 
Dialogue: 0,0:47:30.76,0:47:35.04,csapp,,0,0,0,,and it will in fact look a lot like an echo client because
Dialogue: 0,0:47:36.14,0:47:39.88,csapp,,0,0,0,,because telnet just sends information to the server 
Dialogue: 0,0:47:40.62,0:47:44.80,csapp,,0,0,0,,and the server is designed to echo it back and so it will print the response 
Dialogue: 0,0:47:45.02,0:47:49.32,csapp,,0,0,0,,and so if effectively telnet is behaving like an echo client for me 
Dialogue: 0,0:47:50.50,0:47:52.36,csapp,,0,0,0,, and I'll demo that because it's useful I mean
Dialogue: 0,0:47:52.90,0:47:56.80,csapp,,0,0,0,, this is a pretty trivial program but there's actually times you can use telnet
Dialogue: 0,0:47:57.22,0:48:01.10,csapp,,0,0,0,, if there's the server somewhere out there and you want to give it a poke and see what's going on
Dialogue: 0,0:48:01.84,0:48:03.50,csapp,,0,0,0,, as a tool you can use telnet
Dialogue: 0,0:48:05.68,0:48:08.92,csapp,,0,0,0,, let's see you have to escape with a control right bracket quick 
Dialogue: 0,0:48:10.18,0:48:10.44,csapp,,0,0,0,,okay 
Dialogue: 0,0:48:12.82,0:48:13.08,csapp,,0,0,0,,so 
Dialogue: 0,0:48:14.76,0:48:18.60,csapp,,0,0,0,,now let's move on to http
Dialogue: 0,0:48:22.94,0:48:24.86,csapp,,0,0,0,,I try to get rid of all the animations in this 
Dialogue: 0,0:48:26.62,0:48:34.92,csapp,,0,0,0,,okay so that's sort of the basics of the low-level socket programming that you need to create client-server applications 
Dialogue: 0,0:48:35.80,0:48:40.68,csapp,,0,0,0,,so the best example out there of a client-server application is the world wide web 
Dialogue: 0,0:48:41.62,0:48:46.08,csapp,,0,0,0,,and you know the idea web servers  and your browser is a client 
Dialogue: 0,0:48:47.16,0:48:55.20,csapp,,0,0,0,,so but all of that sits on top of the protocols for that sit on top of the other internet protocols 
Dialogue: 0,0:48:55.90,0:49:01.80,csapp,,0,0,0,,so we talked about TCP is sort of sits on top of the lowest level the packet protocol 
Dialogue: 0,0:49:02.34,0:49:12.14,csapp,,0,0,0,,and then HTTP sits on top of that and uses TCP connections to send and receive data over the World Wide Web 
Dialogue: 0,0:49:14.82,0:49:21.34,csapp,,0,0,0,,and that's all according to a protocol that was developed starting in the early 90s 
Dialogue: 0,0:49:21.92,0:49:28.05,csapp,,0,0,0,,but and that's what Tim Berners Tim berners-lee did initially
Dialogue: 0,0:49:29.38,0:49:31.72,csapp,,0,0,0,,and it's gone through a couple revisions
Dialogue: 0,0:49:32.24,0:49:38.20,csapp,,0,0,0,,but the latest one is still dates back to 1999 HTTP version
Dialogue: 0,0:49:38.72,0:49:39.76,csapp,,0,0,0,,excuse me 1.1 
Dialogue: 0,0:49:41.54,0:49:47.36,csapp,,0,0,0,,so just as a some terminology and you've sort of heard this at various different ways is 
Dialogue: 0,0:49:47.94,0:49:56.50,csapp,,0,0,0,,It’s you can one of the clever things about HTTP is it lets you set set handles different formats 
Dialogue: 0,0:49:56.60,0:50:03.44,csapp,,0,0,0,,you can send a JPEG image you can send a a text and so forth 
Dialogue: 0,0:50:03.46,0:50:07.66,csapp,,0,0,0,,and those are all encoded in a format called mime
Dialogue: 0,0:50:08.92,0:50:17.64,csapp,,0,0,0,,which is actually just a way to take a binary values and convert them into hex formatted strings
Dialogue: 0,0:50:20.16,0:50:21.88,csapp,,0,0,0,,oh and 
Dialogue: 0,0:50:22.80,0:50:28.14,csapp,,0,0,0,,and then sort of a standard for how you encode it at one end how you decode it the other 
Dialogue: 0,0:50:33.96,0:50:40.12,csapp,,0,0,0,,and so you get to specify when you're sending stuff you specify what 
Dialogue: 0,0:50:40.92,0:50:42.82,csapp,,0,0,0,, what type of information it s 
Dialogue: 0,0:50:44.66,0:50:47.60,csapp,,0,0,0,,and then the other thing you've probably experienced 
Dialogue: 0,0:50:47.84,0:50:52.34,csapp,,0,0,0,, and now we're talking a little bit ancient history and I'll update  it momentarily
Dialogue: 0,0:50:52.74,0:50:57.86,csapp,,0,0,0,, but classically you either use static content meaning a fixed web page 
Dialogue: 0,0:50:58.46,0:51:02.72,csapp,,0,0,0,, that was written in HTML format and was designed 
Dialogue: 0,0:51:02.72,0:51:06.70,csapp,,0,0,0,,to just give you information that was the same every time you looked at it 
Dialogue: 0,0:51:07.18,0:51:12.38,csapp,,0,0,0,,or dynamic content where you will change so 
Dialogue: 0,0:51:12.40,0:51:17.52,csapp,,0,0,0,, for example a application a server application that's giving you the weather
Dialogue: 0,0:51:17.60,0:51:24.32,csapp,,0,0,0,, it's not the same page every time and so it will format it in dynamic content  if you make a request 
Dialogue: 0,0:51:24.76,0:51:27.40,csapp,,0,0,0,,nowadays it's gotten a lot more complicated 
Dialogue: 0,0:51:27.40,0:51:32.96,csapp,,0,0,0,,because of JavaScript and all these other sort of client-side programming languages
Dialogue: 0,0:51:33.00,0:51:38.54,csapp,,0,0,0,, that actually execute code on your client and communicates back and forth to get results 
Dialogue: 0,0:51:39.22,0:51:43.72,csapp,,0,0,0,,so I'm a little bit dated here talking about this sort of old-style way of working
Dialogue: 0,0:51:44.50,0:51:50.58,csapp,,0,0,0,, but in all cases what actually comes across the wires are some type of a file
Dialogue: 0,0:51:54.80,0:52:00.10,csapp,,0,0,0,,and then you've heard the term URL meaning Universal resource locator
Dialogue: 0,0:52:00.54,0:52:03.72,csapp,,0,0,0,, is a combination of a couple things one is it tells you 
Dialogue: 0,0:52:04.14,0:52:10.26,csapp,,0,0,0,,where is that information in terms of a domain name and potentially with a port number 
Dialogue: 0,0:52:10.88,0:52:13.74,csapp,,0,0,0,,and then also on that particular host 
Dialogue: 0,0:52:16.66,0:52:20.14,csapp,,0,0,0,,where where within the host is that information to be found
Dialogue: 0,0:52:20.54,0:52:26.04,csapp,,0,0,0,,and there's defaults like if you don't give anything it defaults to index.html for example 
Dialogue: 0,0:52:26.72,0:52:30.32,csapp,,0,0,0,,but a URL in principle gives you 
Dialogue: 0,0:52:30.66,0:52:33.70,csapp,,0,0,0,,where to locate something on a remote machine 
Dialogue: 0,0:52:34.96,0:52:40.20,csapp,,0,0,0,,and now we've seen examples of the tricks that DNS plays 
Dialogue: 0,0:52:40.30,0:52:43.44,csapp,,0,0,0,,so that even though you're giving a hostname a domain name
Dialogue: 0,0:52:43.88,0:52:48.16,csapp,,0,0,0,, it could be any of a number of different servers but the the concept still the same
Dialogue: 0,0:52:53.10,0:52:55.60,csapp,,0,0,0,,so when I make a request then 
Dialogue: 0,0:52:55.60,0:52:59.66,csapp,,0,0,0,,when I running my browser and I want to see a webpage
Dialogue: 0,0:53:00.12,0:53:08.68,csapp,,0,0,0,, what it does is it sends an HTTP request out to the server to do something and to return back a webpage 
Dialogue: 0,0:53:09.16,0:53:13.42,csapp,,0,0,0,,and there's a couple of different standard services the most common the one that
Dialogue: 0,0:53:14.02,0:53:18.84,csapp,,0,0,0,, it's used ninety 90 some percent of the time is get  get me a page 
Dialogue: 0,0:53:20.24,0:53:21.96,csapp,,0,0,0,,and there's other stuff too
Dialogue: 0,0:53:29.08,0:53:31.54,csapp,,0,0,0,,and and then it will respond back 
Dialogue: 0,0:53:32.04,0:53:38.54,csapp,,0,0,0,,with what's called the response line and embedded within that response will be the thing you're asking for 
Dialogue: 0,0:53:38.54,0:53:40.30,csapp,,0,0,0,,but in front of it all is a header
Dialogue: 0,0:53:40.64,0:53:48.50,csapp,,0,0,0,, that contains other stuff that is of of some range of interest of whether you really care 
Dialogue: 0,0:53:49.22,0:53:54.54,csapp,,0,0,0,,not it can also come back with a response that says there's an error code
Dialogue: 0,0:53:54.62,0:53:58.16,csapp,,0,0,0,,as you know the infamous 404 error code
Dialogue: 0,0:54:01.96,0:54:03.64,csapp,,0,0,0,,so let me give you a demo 
Dialogue: 0,0:54:05.38,0:54:11.16,csapp,,0,0,0,,of this just so we're talking a little abstract 
Dialogue: 0,0:54:13.60,0:54:15.66,csapp,,0,0,0,,and this is a little tricky to make it work
Dialogue: 0,0:54:18.28,0:54:21.44,csapp,,0,0,0,,and I'll use auto telnet as a way to probe a webserver
Dialogue: 0,0:54:29.22,0:54:36.34,csapp,,0,0,0,,so I'll make a telnet connection to the computer science departments a web server
Dialogue: 0,0:54:36.96,0:54:39.38,csapp,,0,0,0,, and now I need to make a get request
Dialogue: 0,0:54:40.94,0:54:45.86,csapp,,0,0,0,, this remember it all it is is now I'm basically providing the exact bytes
Dialogue: 0,0:54:46.00,0:54:49.06,csapp,,0,0,0,, that will be seen by the web server so if I say get 
Dialogue: 0,0:54:52.44,0:54:54.88,csapp,,0,0,0,,slash tilde bryant 
Dialogue: 0,0:54:56.10,0:54:59.08,csapp,,0,0,0,,test on HTML see if this really works
Dialogue: 0,0:55:12.62,0:55:13.42,csapp,,0,0,0,,hot worked
Dialogue: 0,0:55:16.96,0:55:19.52,csapp,,0,0,0,,I'm always surprised when things actually work
Dialogue: 0,0:55:21.56,0:55:24.14,csapp,,0,0,0,, ah so anyways let's just look at what happened 
Dialogue: 0,0:55:26.48,0:55:28.66,csapp,,0,0,0,,so at the top is what I typed in 
Dialogue: 0,0:55:29.28,0:55:35.02,csapp,,0,0,0,,it's getting and this I'm giving some the name of a particular web page that
Dialogue: 0,0:55:35.18,0:55:39.16,csapp,,0,0,0,, I made up just for this purpose a fairly simple web page 
Dialogue: 0,0:55:39.54,0:55:46.18,csapp,,0,0,0,,and I'm telling it I want the response in the HTTP 1.1 format 
Dialogue: 0,0:55:46.64,0:55:50.96,csapp,,0,0,0,,and then I have to also give a hostname explicitly and the reason for this is 
Dialogue: 0,0:55:51.34,0:55:56.64,csapp,,0,0,0,,I given machine can actually be a serve multiple hosts 
Dialogue: 0,0:55:57.50,0:56:06.64,csapp,,0,0,0,,like if you know I want to pay for a hosting of some domain name  of say 2 godaddy.com 
Dialogue: 0,0:56:07.36,0:56:11.00,csapp,,0,0,0,,but it's serving hundreds or thousands of different domain names 
Dialogue: 0,0:56:11.00,0:56:15.60,csapp,,0,0,0,,and so it actually used that host information to figure out oh which particular web 
Dialogue: 0,0:56:16.34,0:56:18.54,csapp,,0,0,0,,you know customer am i supporting here 
Dialogue: 0,0:56:19.44,0:56:21.70,csapp,,0,0,0,,ok and now it came back with its response
Dialogue: 0,0:56:22.38,0:56:28.28,csapp,,0,0,0,,and it said the code 200 means that was accepted which it tells you ok 
Dialogue: 0,0:56:28.76,0:56:31.88,csapp,,0,0,0,,and now it comes back with this is the header information that says 
Dialogue: 0,0:56:32.30,0:56:37.20,csapp,,0,0,0,,here's the date here the server here's some cookie information
Dialogue: 0,0:56:38.66,0:56:43.52,csapp,,0,0,0,, it's a the overall content is exactly 479 bytes 
Dialogue: 0,0:56:44.24,0:56:46.74,csapp,,0,0,0,,and it's a text HTML format 
Dialogue: 0,0:56:47.46,0:56:51.16,csapp,,0,0,0,,and then it will return back the raw HTML
Dialogue: 0,0:56:52.14,0:56:55.70,csapp,,0,0,0,, that this web page had
Dialogue: 0,0:56:56.24,0:57:00.94,csapp,,0,0,0,,which is what I actually you know I type that I did this by hand 
Dialogue: 0,0:57:00.94,0:57:04.12,csapp,,0,0,0,,but you can imagine other types of things 
Dialogue: 0,0:57:04.92,0:57:07.46,csapp,,0,0,0,,and then it just closes the connection 
Dialogue: 0,0:57:08.04,0:57:11.64,csapp,,0,0,0,,so you can see that this return both the header information 
Dialogue: 0,0:57:12.28,0:57:16.04,csapp,,0,0,0,,and the actual content information as well 
Dialogue: 0,0:57:16.94,0:57:21.32,csapp,,0,0,0,,and so that's the general idea of what an HTTP transaction looks like 
Dialogue: 0,0:57:22.40,0:57:25.28,csapp,,0,0,0,,and the slides go through a different version of it 
Dialogue: 0,0:57:25.92,0:57:27.46,csapp,,0,0,0,,but it's the same general idea
Dialogue: 0,0:57:32.70,0:57:36.10,csapp,,0,0,0,,so the text has a really interesting code that I 
Dialogue: 0,0:57:36.78,0:57:40.18,csapp,,0,0,0,,highly recommend you read and study called tiny 
Dialogue: 0,0:57:40.18,0:57:45.10,csapp,,0,0,0,,which is the world's smallest functioning webserver
Dialogue: 0,0:57:45.84,0:57:50.50,csapp,,0,0,0,, and what it's really only a couple pages of code
Dialogue: 0,0:57:50.92,0:57:55.78,csapp,,0,0,0,, it serves it says some very basic handling of static and dynamic content
Dialogue: 0,0:57:58.24,0:58:03.04,csapp,,0,0,0,, it's something you can sit down and read and study 239 lines of code 
Dialogue: 0,0:58:03.82,0:58:08.36,csapp,,0,0,0,,now it lacks a lot of features it does very bad job of handling errors
Dialogue: 0,0:58:09.22,0:58:13.28,csapp,,0,0,0,, it doesn't have a lot of the functionality you'd come to expect on a server 
Dialogue: 0,0:58:13.34,0:58:18.49,csapp,,0,0,0,,so it's been stripped down to the sort of Barriss bones to demonstrate the the concepts
Dialogue: 0,0:58:19.46,0:58:22.58,csapp,,0,0,0,,but it's pretty cool that it works and I can say this because I didn't write it
Dialogue: 0,0:58:22.82,0:58:23.14,csapp,,0,0,0,,so 
Dialogue: 0,0:58:26.18,0:58:29.84,csapp,,0,0,0,,so the overall idea then is on the cert it's a server 
Dialogue: 0,0:58:29.98,0:58:33.20,csapp,,0,0,0,,so it's receiving requests from clients from browsers
Dialogue: 0,0:58:33.78,0:58:42.44,csapp,,0,0,0,, saying I want this web page or I want to execute this particular dynamic program to get dynamic content
Dialogue: 0,0:58:43.18,0:58:47.08,csapp,,0,0,0,,  so it comes in with a request get requests like you just saw 
Dialogue: 0,0:58:47.52,0:58:52.98,csapp,,0,0,0,,and it splits that it picks out  the what's called the URI 
Dialogue: 0,0:58:53.52,0:58:58.70,csapp,,0,0,0,,the argument to the get request a URI is a universal resource indicator 
Dialogue: 0,0:58:59.66,0:59:06.74,csapp,,0,0,0,,which is not a complete potential URIs are a super set of URLs 
Dialogue: 0,0:59:06.76,0:59:12.18,csapp,,0,0,0,,URL has to include the hostname and all the information to get from anywhere to anywhere
Dialogue: 0,0:59:13.20,0:59:16.54,csapp,,0,0,0,, but a URI can just be a portion of that information 
Dialogue: 0,0:59:17.93,0:59:23.64,csapp,,0,0,0,,and then it it will determine is this a request for static or dynamic content
Dialogue: 0,0:59:23.92,0:59:26.08,csapp,,0,0,0,,I'll show you both of them hopefully 
Dialogue: 0,0:59:27.00,0:59:31.74,csapp,,0,0,0,,and if it's a static content all it has to do is retrieve a file on its own machine
Dialogue: 0,0:59:32.70,0:59:35.10,csapp,,0,0,0,,send that back in that format that I just showed you 
Dialogue: 0,0:59:36.00,0:59:36.78,csapp,,0,0,0,,so let's take a look 
Dialogue: 0,0:59:38.03,0:59:42.34,csapp,,0,0,0,,so this is sort of the guts of the static server
Dialogue: 0,0:59:43.74,0:59:46.38,csapp,,0,0,0,,so what it's done is its received a request 
Dialogue: 0,0:59:46.96,0:59:50.74,csapp,,0,0,0,,this is you know a function a helper function of of this code 
Dialogue: 0,0:59:50.76,0:59:52.48,csapp,,0,0,0,,so I'm kind of buried down in the middle 
Dialogue: 0,0:59:53.06,1:00:02.90,csapp,,0,0,0,,but what it's picked out is the server has received a request for a particular file name from the URI 
Dialogue: 0,1:00:03.64,1:00:08.72,csapp,,0,0,0,,and it's also done a look up through the OS cal
Dialogue: 0,1:00:09.10,1:00:12.26,csapp,,0,0,0,,l to figure out how big is that file how many bytes long is that file 
Dialogue: 0,1:00:12.86,1:00:15.90,csapp,,0,0,0,,and it's also given the file descriptor that 
Dialogue: 0,1:00:16.56,1:00:20.10,csapp,,0,0,0,,is the connect it the file descriptor for this particular connection 
Dialogue: 0,1:00:21.18,1:00:26.00,csapp,,0,0,0,, so all it's doing here you'll notice is it's doing a bunch of Spirit ups into a buffer 
Dialogue: 0,1:00:26.78,1:00:31.18,csapp,,0,0,0,,and what it's doing there is its formatting the header information 
Dialogue: 0,1:00:31.54,1:00:37.98,csapp,,0,0,0,,as a byte is just a big long string including the returns in it
Dialogue: 0,1:00:38.48,1:00:46.36,csapp,,0,0,0,, and one of the features which don't ask me why the great wisdom of of Tim Berners Lee
Dialogue: 0,1:00:46.38,1:00:54.08,csapp,,0,0,0,,we did or whoever figured this out but every line has to finish with both a carriage return and a new line
Dialogue: 0,1:00:54.08,1:00:57.36,csapp,,0,0,0,,instead of the usual Linux thing of just new lines 
Dialogue: 0,1:00:58.02,1:01:00.56,csapp,,0,0,0,, so that's what the backslash R backslash n 
Dialogue: 0,1:01:01.12,1:01:05.34,csapp,,0,0,0,,means but you'll see it's going to respond back  to with an okay
Dialogue: 0,1:01:05.92,1:01:09.56,csapp,,0,0,0,,and some of this kind of information that's not very exciting 
Dialogue: 0,1:01:10.18,1:01:18.94,csapp,,0,0,0,,but the ones that really matter are are the lengths the in bytes that has to be given 
Dialogue: 0,1:01:19.76,1:01:23.56,csapp,,0,0,0,,and the type ones beginning this file type
Dialogue: 0,1:01:24.22,1:01:27.92,csapp,,0,0,0,,oh there's another function oh I remember why 
Dialogue: 0,1:01:29.24,1:01:37.42,csapp,,0,0,0,,there's a another helper function here that because this supports not just text but also gif and JPEG images 
Dialogue: 0,1:01:38.20,1:01:43.86,csapp,,0,0,0,,so get file type is another function somewhere else that's telling
Dialogue: 0,1:01:44.38,1:01:49.08,csapp,,0,0,0,,which which a mime type is this particular file 
Dialogue: 0,1:01:50.42,1:01:52.46,csapp,,0,0,0,,and and so it's putting that together
Dialogue: 0,1:01:53.90,1:01:57.30,csapp,,0,0,0,, and it's and now write set out 
Dialogue: 0,1:01:58.16,1:02:07.70,csapp,,0,0,0,,so it writes the header information out to the client 
Dialogue: 0,1:02:08.64,1:02:10.70,csapp,,0,0,0,,so it's sending back to the client 
Dialogue: 0,1:02:11.56,1:02:18.42,csapp,,0,0,0,,and then it's going through a few gyrations here to get the file open it up 
Dialogue: 0,1:02:18.96,1:02:20.86,csapp,,0,0,0,,and then there's a function called MF 
Dialogue: 0,1:02:21.34,1:02:22.64,csapp,,0,0,0,,if you guys covered them up 
Dialogue: 0,1:02:23.68,1:02:29.18,csapp,,0,0,0,,yet know which is just a tricky way to avoid having to actually read the file into the machine
Dialogue: 0,1:02:30.02,1:02:40.54,csapp,,0,0,0,,but basically be able to pass off a pointer directly to or into the read it
Dialogue: 0,1:02:40.54,1:02:46.08,csapp,,0,0,0,,through explicit read commands into yet another buffer just avoids one step of buffering 
Dialogue: 0,1:02:46.64,1:02:54.44,csapp,,0,0,0,,so all it does is map then of from the operating system where this particular file is located 
Dialogue: 0,1:02:56.16,1:03:01.56,csapp,,0,0,0,,  and then writes that so now it's sending it off to the client 
Dialogue: 0,1:03:02.66,1:03:06.12,csapp,,0,0,0,,and so this could be done with a regular read in a 
Dialogue: 0,1:03:06.78,1:03:09.86,csapp,,0,0,0,,but this is a little bit more elegant way to handle it
Dialogue: 0,1:03:10.56,1:03:17.40,csapp,,0,0,0,, and you'll notice by the way that the content length here is the length of the file 
Dialogue: 0,1:03:17.66,1:03:22.46,csapp,,0,0,0,,the and not does not include the the number of bytes in the header so the header comes first
Dialogue: 0,1:03:23.30,1:03:27.66,csapp,,0,0,0,,there's no length associated with it that so sent back 
Dialogue: 0,1:03:28.10,1:03:33.20,csapp,,0,0,0,,but now the only way that the client knows exactly how many bytes
Dialogue: 0,1:03:33.86,1:03:44.88,csapp,,0,0,0,, that response is going to be is by picking out this number in the header and reading that many bytes from it
Dialogue: 0,1:03:45.54,1:03:47.68,csapp,,0,0,0,,we'll see that in a minute but anyways this is the way a file gets sent 
Dialogue: 0,1:03:50.44,1:03:53.04,csapp,,0,0,0,,so now let's just real quickly look at dynamic content 
Dialogue: 0,1:03:53.20,1:03:58.86,csapp,,0,0,0,,so the idea of dynamic content is it lets you pass in parameters to a program 
Dialogue: 0,1:03:59.68,1:04:02.84,csapp,,0,0,0,,that then gets executed and the purpose that 
Dialogue: 0,1:04:03.30,1:04:09.58,csapp,,0,0,0,,what that program then has to do is compose a web page  and send that web page back you 
Dialogue: 0,1:04:10.22,1:04:14.08,csapp,,0,0,0,,so I'm going to demo this with a feature built into here
Dialogue: 0,1:04:31.04,1:04:32.78,csapp,,0,0,0,,so in particular 
Dialogue: 0,1:04:34.76,1:04:40.82,csapp,,0,0,0,,you probably can't you can barely see them I don't have a good way to blow up the thing 
Dialogue: 0,1:04:41.44,1:04:46.42,csapp,,0,0,0,,but the um you can also see what kind of things I look at but anyways 
Dialogue: 0,1:04:47.94,1:04:54.96,csapp,,0,0,0,,if I just say local host : 15 to 13 that means port number 15 to 13 on my local machine 
Dialogue: 0,1:04:55.48,1:04:57.72,csapp,,0,0,0,,which is currently running the tiny web server 
Dialogue: 0,1:04:58.56,1:05:04.86,csapp,,0,0,0,,and the only webpage available for it is this rather stunning figure here 
Dialogue: 0,1:05:05.38,1:05:10.74,csapp,,0,0,0,,but it shows that it can handle both gif content and text HTML 
Dialogue: 0,1:05:15.28,1:05:16.98,csapp,,0,0,0,,but it also supports 
Dialogue: 0,1:05:18.22,1:05:23.22,csapp,,0,0,0,,another interesting feature which is a program that can add two numbers
Dialogue: 0,1:05:24.80,1:05:26.84,csapp,,0,0,0,, called add com
Dialogue: 0,1:05:27.20,1:05:30.88,csapp,,0,0,0,,so our idea for a startup company that didn't quite make it so 
Dialogue: 0,1:05:32.72,1:05:34.00,csapp,,0,0,0,,so in particular
Dialogue: 0,1:05:37.02,1:05:42.18,csapp,,0,0,0,,that the idea of this is it's a CGI program it's a dynamic content 
Dialogue: 0,1:05:42.40,1:05:44.50,csapp,,0,0,0,,so that I passing two numbers 
Dialogue: 0,1:05:45.24,1:05:47.80,csapp,,0,0,0,, embedded within the URL my request 
Dialogue: 0,1:05:48.70,1:05:53.72,csapp,,0,0,0,,and it comes back with a web page that is beautifully formatted like this one 
Dialogue: 0,1:05:54.72,1:06:00.34,csapp,,0,0,0,,so you can't see very well maybe but if you look up there the teeny tiny print at the top
Dialogue: 0,1:06:02.44,1:06:07.00,csapp,,0,0,0,, Yosi localhost colon 15-213 that's the web server 
Dialogue: 0,1:06:07.44,1:06:09.58,csapp,,0,0,0,,and slash cgi - bin that's 
Dialogue: 0,1:06:10.30,1:06:15.22,csapp,,0,0,0,,what this particular server and what most servers do for interpreting dynamic content 
Dialogue: 0,1:06:16.00,1:06:19.54,csapp,,0,0,0,,and then a program it's an executable file called adder 
Dialogue: 0,1:06:20.52,1:06:25.88,csapp,,0,0,0,,and then the argument string that you embed in this kind of curious way the question mark 
Dialogue: 0,1:06:26.34,1:06:29.42,csapp,,0,0,0,,and then use ampersands to separate out the different fields 
Dialogue: 0,1:06:30.96,1:06:35.48,csapp,,0,0,0,,so that's all pretty a standard way of handling dynamic content
Dialogue: 0,1:06:36.04,1:06:39.32,csapp,,0,0,0,,and as I said nowadays there's a lot fancier ways of doing it 
Dialogue: 0,1:06:39.32,1:06:41.68,csapp,,0,0,0,,but that's sort of the basic way 
Dialogue: 0,1:06:41.68,1:06:43.46,csapp,,0,0,0,,and you'll see it's still getting used today 
Dialogue: 0,1:06:46.22,1:06:51.74,csapp,,0,0,0,,so imagine that this time it's a get request
Dialogue: 0,1:06:51.82,1:06:58.66,csapp,,0,0,0,, but instead of the adder function at some other Perl program that is sitting on the server somewhere called Eng 
Dialogue: 0,1:06:59.26,1:07:03.36,csapp,,0,0,0,,and we won't worry about what that program does we'll just show you the idea behind it 
Dialogue: 0,1:07:04.02,1:07:08.34,csapp,,0,0,0,,so in particular there's a get request comes in and it says cgi-bin
Dialogue: 0,1:07:09.10,1:07:13.48,csapp,,0,0,0,,and then the next argument is interpreted as the name of a file 
Dialogue: 0,1:07:15.56,1:07:20.98,csapp,,0,0,0,,and what will happen then is that the server will spawn off a process
Dialogue: 0,1:07:32.10,1:07:34.06,csapp,,0,0,0,,using our friends fork and exec 
Dialogue: 0,1:07:35.14,1:07:36.70,csapp,,0,0,0,,which you know so well now 
Dialogue: 0,1:07:37.98,1:07:40.24,csapp,,0,0,0,,doing the shell web so 
Dialogue: 0,1:07:40.86,1:07:46.06,csapp,,0,0,0,,and that that program will execute of will execute 
Dialogue: 0,1:07:47.00,1:07:56.16,csapp,,0,0,0,,and it will its job then is to generate a file in HTML format 
Dialogue: 0,1:07:56.92,1:08:00.00,csapp,,0,0,0,,and then the server will send the result back to the client 
Dialogue: 0,1:08:05.60,1:08:09.42,csapp,,0,0,0,,so there's a few details we got to figure out to make this work
Dialogue: 0,1:08:10.42,1:08:17.62,csapp,,0,0,0,,one is how will I actually pass arguments how will nvl know what's being passed to it as arguments 
Dialogue: 0,1:08:18.60,1:08:25.62,csapp,,0,0,0,,how npl get whatever page HTML it creates back to the server 
Dialogue: 0,1:08:25.70,1:08:27.66,csapp,,0,0,0,,so that the server can send it to the client
Dialogue: 0,1:08:27.80,1:08:32.14,csapp,,0,0,0,, those are all the sort of details of the CGI 
Dialogue: 0,1:08:32.60,1:08:36.06,csapp,,0,0,0,,specification CGI stands for common gateway interface
Dialogue: 0,1:08:43.82,1:08:47.98,csapp,,0,0,0,,so you just saw a demo of edcom 
Dialogue: 0,1:08:50.70,1:08:54.40,csapp,,0,0,0,,and so let's just look at how this works 
Dialogue: 0,1:08:56.78,1:09:03.72,csapp,,0,0,0,,so as I mentioned the way things get passed is within the URL you include the program name
Dialogue: 0,1:09:04.14,1:09:09.34,csapp,,0,0,0,, and then the question mark is what is like the Terminator for the program name 
Dialogue: 0,1:09:09.82,1:09:13.66,csapp,,0,0,0,,and then all the other arguments with ampersands between them
Dialogue: 0,1:09:13.94,1:09:17.58,csapp,,0,0,0,,and you can't have any blanks in here so they put 20%
Dialogue: 0,1:09:18.08,1:09:22.90,csapp,,0,0,0,,and as you probably see in various other those are called escape codes 
Dialogue: 0,1:09:23.34,1:09:26.62,csapp,,0,0,0,,when you can't use a particular character how do you encode it in some other way
Dialogue: 0,1:09:36.28,1:09:41.30,csapp,,0,0,0,,so the first thing is how does the server then pass the argument to the program that gets executed 
Dialogue: 0,1:09:42.82,1:09:48.94,csapp,,0,0,0,,well it's really weird the way it does it is by creating an environment variable for your machine
Dialogue: 0,1:09:50.38,1:09:51.96,csapp,,0,0,0,,that's called query string 
Dialogue: 0,1:09:53.36,1:09:58.48,csapp,,0,0,0,,and so the server defines that environment variable
Dialogue: 0,1:10:01.10,1:10:06.46,csapp,,0,0,0,,and then the job on the CGI side of the script 
Dialogue: 0,1:10:06.88,1:10:12.04,csapp,,0,0,0,,is to then retrieve that environment variable is a way of getting the string 
Dialogue: 0,1:10:12.62,1:10:17.34,csapp,,0,0,0,,you can already see hey wait a minute what if you were running multiple servers at once 
Dialogue: 0,1:10:17.66,1:10:19.44,csapp,,0,0,0,,you can see you've got a problem here but 
Dialogue: 0,1:10:20.52,1:10:24.36,csapp,,0,0,0,,actually no environments are specific to particular processes so this will work
Dialogue: 0,1:10:25.30,1:10:34.82,csapp,,0,0,0,,so it's creating for the application program that we'll be able to sort of retrieve from the operating system essentially 
Dialogue: 0,1:10:35.14,1:10:41.20,csapp,,0,0,0,,what arguments were passed to the are being passed to it
Dialogue: 0,1:10:46.54,1:10:49.84,csapp,,0,0,0,,and so this is what the code looks like for the dynamic server 
Dialogue: 0,1:10:50.58,1:10:52.20,csapp,,0,0,0,,again it's going to write back
Dialogue: 0,1:10:59.58,1:11:07.64,csapp,,0,0,0,,some information back to the the client
Dialogue: 0,1:11:11.40,1:11:13.26,csapp,,0,0,0,,and let's look at this
Dialogue: 0,1:11:14.38,1:11:20.80,csapp,,0,0,0,, and now it's going to set up this CGI a query string environment variable 
Dialogue: 0,1:11:21.38,1:11:24.16,csapp,,0,0,0,,and then use our friends dupe and exec
Dialogue: 0,1:11:24.74,1:11:33.94,csapp,,0,0,0,, basically to redirect the standard output to its client 
Dialogue: 0,1:11:39.48,1:11:40.30,csapp,,0,0,0,,oh I'm sorry
Dialogue: 0,1:11:41.16,1:11:44.26,csapp,,0,0,0,,the file descriptor is the the clients file descriptor 
Dialogue: 0,1:11:44.70,1:11:49.28,csapp,,0,0,0,,so it will tell it's going to 
Dialogue: 0,1:11:50.20,1:11:51.84,csapp,,0,0,0,, go and we're enough work I'm sorry 
Dialogue: 0,1:11:52.28,1:11:54.18,csapp,,0,0,0,, so now we're in the child process okay 
Dialogue: 0,1:11:54.74,1:11:58.62,csapp,,0,0,0,,let me read all the code and within the child process it's going to rename
Dialogue: 0,1:11:59.16,1:12:03.54,csapp,,0,0,0,,the it's standard output so that it's writing directly to the client 
Dialogue: 0,1:12:05.20,1:12:07.58,csapp,,0,0,0,,and and then call exec
Dialogue: 0,1:12:08.38,1:12:13.20,csapp,,0,0,0,, which as you know it's the way you take this program which is just given by a file name 
Dialogue: 0,1:12:14.00,1:12:18.68,csapp,,0,0,0,,and fire it up and get it going with that defined environment value
Dialogue: 0,1:12:20.88,1:12:24.62,csapp,,0,0,0,, and then this is the parent we'll just wait until the child completes 
Dialogue: 0,1:12:28.06,1:12:30.52,csapp,,0,0,0,,okay so now we're almost done
Dialogue: 0,1:12:35.46,1:12:42.36,csapp,,0,0,0,,so the now this is what the actual program the adder program does the one that the CGI program 
Dialogue: 0,1:12:43.58,1:12:45.98,csapp,,0,0,0,, the one that's been forked off and exempt 
Dialogue: 0,1:12:47.10,1:12:49.94,csapp,,0,0,0,,so it creates them the HTML 
Dialogue: 0,1:12:53.32,1:12:59.32,csapp,,0,0,0,,that you want to send back and here it's pretty mundane
Dialogue: 0,1:12:59.50,1:13:04.50,csapp,,0,0,0,,  the only actual HTML and here are the peas meaning paragraph markers
Dialogue: 0,1:13:05.08,1:13:15.34,csapp,,0,0,0,, so this is literally generating HTTP  HTML content  and storing them all in a string called content 
Dialogue: 0,1:13:17.88,1:13:21.34,csapp,,0,0,0,,and now it wants to send that content back
Dialogue: 0,1:13:22.16,1:13:27.94,csapp,,0,0,0,,and you saw before that the server already filled in the top-level stuff
Dialogue: 0,1:13:27.94,1:13:32.58,csapp,,0,0,0,, but I have to tell what is the type and how many bytes it is 
Dialogue: 0,1:13:33.26,1:13:36.58,csapp,,0,0,0,,so I'll use sterling to figure out how many bytes I'm sending back 
Dialogue: 0,1:13:37.72,1:13:38.98,csapp,,0,0,0,,and the content type
Dialogue: 0,1:13:39.62,1:13:43.72,csapp,,0,0,0,,and then I will and I'm pretty effing this 
Dialogue: 0,1:13:44.62,1:13:50.22,csapp,,0,0,0,, which as you recall ivory mapped a standard output now is talking directly to the client 
Dialogue: 0,1:13:51.38,1:13:55.70,csapp,,0,0,0,,and just to be sure it all goes out I'll flush that out of there at the end 
Dialogue: 0,1:13:56.22,1:14:07.96,csapp,,0,0,0,,so what's happening here then is that it's the job of the the CGI program to write the HTML and to send it back to the the client
Dialogue: 0,1:14:19.82,1:14:23.84,csapp,,0,0,0,,so again let's just do a real quick demo here got just enough time
Dialogue: 0,1:14:33.62,1:14:34.04,csapp,,0,0,0,,Oh
Dialogue: 0,1:14:46.53,1:14:53.32,csapp,,0,0,0,,so I've got the tiny web server running down at the bottom and I'm using telnet to reach it 
Dialogue: 0,1:14:53.36,1:14:55.52,csapp,,0,0,0,,and so now I want to say
Dialogue: 0,1:15:01.80,1:15:04.06,csapp,,0,0,0,,I have to take time
Dialogue: 0,1:15:07.90,1:15:17.86,csapp,,0,0,0,,slash CGI - bin slash adder quest what numbers do you want to add 17 and 13
Dialogue: 0,1:15:24.26,1:15:28.12,csapp,,0,0,0,,so you don't get many shots at it so I like to double check I'm doing
Dialogue: 0,1:15:44.20,1:15:44.80,csapp,,0,0,0,,we worked 
Dialogue: 0,1:15:46.98,1:15:52.40,csapp,,0,0,0,,always amazed so it shouldn't surprise you what comes back because you just saw the code that did it but 
Dialogue: 0,1:15:53.20,1:16:00.44,csapp,,0,0,0,,what you see then is that this first three lines got generated by the the server code 
Dialogue: 0,1:16:01.50,1:16:05.18,csapp,,0,0,0,, that comes back with the ok information about the server 
Dialogue: 0,1:16:06.14,1:16:11.48,csapp,,0,0,0,,and then the content length was generated by the CGI program adder 
Dialogue: 0,1:16:12.14,1:16:17.36,csapp,,0,0,0,,and the content type and then this is the HTML that you saw being generated 
Dialogue: 0,1:16:18.14,1:16:25.58,csapp,,0,0,0,,so it's actually what people say about this early world wide web 
Dialogue: 0,1:16:25.70,1:16:27.28,csapp,,0,0,0,,and it's gotten a lot more complicated 
Dialogue: 0,1:16:27.78,1:16:32.16,csapp,,0,0,0,,is the best thing Tim berners-lee was to figure out how simple it could be 
Dialogue: 0,1:16:32.46,1:16:43.18,csapp,,0,0,0,,because other people were working much more exotic ways to get different agents to talk to each other over the Internet 
Dialogue: 0,1:16:44.04,1:16:50.62,csapp,,0,0,0,,and what berners-lee figured out is we can just kind of cobble together standard ideas of sockets interface 
Dialogue: 0,1:16:51.20,1:16:54.20,csapp,,0,0,0,,have some protocol pretty straightforward protocol 
Dialogue: 0,1:16:54.80,1:17:02.68,csapp,,0,0,0,,handle different content type of set up these dynamic things by forking off a process every time 
Dialogue: 0,1:17:02.68,1:17:10.38,csapp,,0,0,0,, which is extraordinarily inefficient way to do it  like to add two numbers by forking off a whole process
Dialogue: 0,1:17:10.42,1:17:14.44,csapp,,0,0,0,, and doing it is totally absurd but then so is addcom
Dialogue: 0,1:17:14.82,1:17:24.22,csapp,,0,0,0,,  but you know it's not it in some ways it he took a bunch of ideas that existed and figured out how to put it together 
Dialogue: 0,1:17:24.58,1:17:30.30,csapp,,0,0,0,, and I'll recognize that the value people would obtain from that and it took the internet from being something that
Dialogue: 0,1:17:30.80,1:17:34.05,csapp,,0,0,0,, was certainly used by nerdy people to talk to each other 
Dialogue: 0,1:17:34.36,1:17:38.42,csapp,,0,0,0,,and opened it up to all the things that we know of today
Dialogue: 0,1:17:38.50,1:17:44.76,csapp,,0,0,0,, so it was a huge step forward I give them full credit even if from a technical point of view is actually fairly straightforward 
Dialogue: 0,1:17:45.62,1:17:49.67,csapp,,0,0,0,,ok so that will do us for today
