[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Audio File: ../../../Desktop/csapp/Lecture 21  Network Programming  Part 1.mp4
Video File: ../../../Desktop/csapp/Lecture 21  Network Programming  Part 1.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 1.000000
Scroll Position: 872
Active Line: 882
Video Position: 138293

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: newcsapp,Source Han Sans CN,34,&H00D6DA3A,&H00FFFFFF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: csapp,Source Han Sans CN,34,&H00FFFFFF,&H00FFFFFF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.80,0:00:02.02,csapp,,0,0,0,,good afternoon everyone 
Dialogue: 0,0:00:04.12,0:00:07.60,csapp,,0,0,0,,so today we're going to transition into a topic that 
Dialogue: 0,0:00:08.10,0:00:15.56,csapp,,0,0,0,,to me is sort of the reward for having slugged through all the low-level stuff
Dialogue: 0,0:00:15.56,0:00:17.24,csapp,,0,0,0,,you've done up to this point 
Dialogue: 0,0:00:17.68,0:00:23.54,csapp,,0,0,0,,to be able to really understand and become adept at programming network software 
Dialogue: 0,0:00:24.12,0:00:27.20,csapp,,0,0,0,,not there's a lot to networking that we're not going to cover
Dialogue: 0,0:00:27.20,0:00:29.86,csapp,,0,0,0,, but at least to have some familiarity with it 
Dialogue: 0,0:00:30.46,0:00:34.88,csapp,,0,0,0,,so I know that a lot of you are sort of in the midst of trying to figure out 
Dialogue: 0,0:00:34.88,0:00:37.12,csapp,,0,0,0,,how to make Melek run and make it run fast 
Dialogue: 0,0:00:37.92,0:00:43.52,csapp,,0,0,0,,and so this this uh topic is really more pointing toward the future 
Dialogue: 0,0:00:43.52,0:00:46.70,csapp,,0,0,0,,but it's very relevant to the final web you'll do for the course 
Dialogue: 0,0:00:47.58,0:00:50.32,csapp,,0,0,0,,and so we're starting to to get ready for that
Dialogue: 0,0:00:56.90,0:01:00.58,csapp,,0,0,0,,so like I said this course is not really a full course in networking 
Dialogue: 0,0:01:00.58,0:01:03.38,csapp,,0,0,0,,there's many other courses at the university that are
Dialogue: 0,0:01:03.80,0:01:07.28,csapp,,0,0,0,,and so what we're going to try and do is give you just a little flavor of it 
Dialogue: 0,0:01:07.28,0:01:10.86,csapp,,0,0,0,,and particularly as everything in the course of programmers perspective 
Dialogue: 0,0:01:11.04,0:01:20.80,csapp,,0,0,0,,so how you as a software developer would make use of the c-level api's that are relevant to network programming 
Dialogue: 0,0:01:24.44,0:01:26.74,csapp,,0,0,0,,and why isn't this working
Dialogue: 0,0:01:31.68,0:01:32.70,csapp,,0,0,0,,okay so 
Dialogue: 0,0:01:33.68,0:01:39.92,csapp,,0,0,0,,the idea behind most networking systems  is what's called  the client-server model 
Dialogue: 0,0:01:40.44,0:01:44.38,csapp,,0,0,0,,and the idea is that there's a service out there that you want access to 
Dialogue: 0,0:01:44.88,0:01:49.58,csapp,,0,0,0,,and you as a customer or a client are making a request to that server 
Dialogue: 0,0:01:49.72,0:01:54.14,csapp,,0,0,0,,so an example would be when you order something on Amazon 
Dialogue: 0,0:01:54.20,0:01:56.34,csapp,,0,0,0,,Amazon has a bunch of servers
Dialogue: 0,0:01:57.10,0:02:04.12,csapp,,0,0,0,, and you go to your web browser and canta it contacts the Amazon a web server 
Dialogue: 0,0:02:04.50,0:02:08.90,csapp,,0,0,0,,and you make transactions you request something you provide information 
Dialogue: 0,0:02:09.32,0:02:14.56,csapp,,0,0,0,,and it gives you back pretty pictures of things you might want to buy
Dialogue: 0,0:02:14.84,0:02:17.06,csapp,,0,0,0,,it acknowledges your credit card transactions 
Dialogue: 0,0:02:17.42,0:02:21.20,csapp,,0,0,0,,those are all very classic client-server types of interactions 
Dialogue: 0,0:02:21.64,0:02:24.36,csapp,,0,0,0,,you as the client,Amazon is the server
Dialogue: 0,0:02:24.84,0:02:27.36,csapp,,0,0,0,,another interesting example is a telephone 
Dialogue: 0,0:02:28.14,0:02:32.40,csapp,,0,0,0,,so if you think about it a telephone is both a client and a server in that 
Dialogue: 0,0:02:33.18,0:02:36.62,csapp,,0,0,0,,when I'm making a placing a call to somebody else 
Dialogue: 0,0:02:37.08,0:02:41.46,csapp,,0,0,0,,I'm the client and that person's phone is the server right 
Dialogue: 0,0:02:41.96,0:02:45.92,csapp,,0,0,0,,it's sitting there waiting for calls to come in 
Dialogue: 0,0:02:46.44,0:02:49.42,csapp,,0,0,0,,and when that call comes in it makes a connection 
Dialogue: 0,0:02:49.90,0:02:54.86,csapp,,0,0,0,,we talk over the phone and then I hang up  either side hangs up 
Dialogue: 0,0:02:54.94,0:02:59.68,csapp,,0,0,0,,so there's a lot of instances out there of of some variation of client and server
Dialogue: 0,0:02:59.70,0:03:06.76,csapp,,0,0,0,,and it's a much richer idea in that you can often switch back and forth  the roles of those two parties
Dialogue: 0,0:03:06.88,0:03:15.18,csapp,,0,0,0,, but it's a pretty universal and a ubiquitous way of thinking about how to set up a network system 
Dialogue: 0,0:03:16.30,0:03:21.82,csapp,,0,0,0,,so in general then the idea is that there's a system working 
Dialogue: 0,0:03:23.44,0:03:26.90,csapp,,0,0,0,,the client is making some requests to the server
Dialogue: 0,0:03:27.70,0:03:30.96,csapp,,0,0,0,,the server does something locally to deal with it 
Dialogue: 0,0:03:31.04,0:03:37.28,csapp,,0,0,0,,it receive it gets information that retrieves from its database  the things you might want to buy 
Dialogue: 0,0:03:38.34,0:03:44.38,csapp,,0,0,0,,and then it sends back information say a nicely formatted a web page with all kinds of shopping suggestions 
Dialogue: 0,0:03:45.28,0:03:47.34,csapp,,0,0,0,,and then the client decides what to do next 
Dialogue: 0,0:03:49.22,0:03:51.66,csapp,,0,0,0,,so from a hardware perspective the
Dialogue: 0,0:03:52.28,0:03:56.75,csapp,,0,0,0,,interface to a between the network and
Dialogue: 0,0:03:57.44,0:04:02.92,csapp,,0,0,0,,your computer is called the NIC or network interface card even though it's not always on a card 
Dialogue: 0,0:04:03.66,0:04:08.90,csapp,,0,0,0,,and we really won't talk about hardware at all 
Dialogue: 0,0:04:08.90,0:04:13.16,csapp,,0,0,0,,but what's most interesting from it is that 
Dialogue: 0,0:04:14.44,0:04:18.36,csapp,,0,0,0,,it looks to your computer like an i/o device 
Dialogue: 0,0:04:19.00,0:04:23.92,csapp,,0,0,0,,and in fact the UNIX of API for dealing with networks 
Dialogue: 0,0:04:24.38,0:04:25.68,csapp,,0,0,0,,makes it look like a file 
Dialogue: 0,0:04:26.38,0:04:30.66,csapp,,0,0,0,,so in particular just as a disk sits off of a bus 
Dialogue: 0,0:04:31.42,0:04:34.46,csapp,,0,0,0,,and you write data to a disk 
Dialogue: 0,0:04:35.08,0:04:36.60,csapp,,0,0,0,,or you read it from a disk 
Dialogue: 0,0:04:37.12,0:04:40.74,csapp,,0,0,0,,similarly the network sits off of a similar bus 
Dialogue: 0,0:04:41.18,0:04:44.44,csapp,,0,0,0,,and when you want to send a message you actually do it by writing
Dialogue: 0,0:04:44.92,0:04:47.92,csapp,,0,0,0,, to a sort of virtual  file that's called the network 
Dialogue: 0,0:04:48.72,0:04:52.14,csapp,,0,0,0,,and if you want when you're receiving data you do it by reading 
Dialogue: 0,0:04:52.28,0:04:56.48,csapp,,0,0,0,,so just as several weeks ago I gave the lecture on Io
Dialogue: 0,0:04:57.18,0:05:00.56,csapp,,0,0,0,,it turns out that it's extremely relevant to network programming 
Dialogue: 0,0:05:00.56,0:05:08.48,csapp,,0,0,0,,that's the basic model that that was created by the early developers of the sort of standard UNIX 
Dialogue: 0,0:05:08.98,0:05:14.02,csapp,,0,0,0,,and now that's carried over not just to UNIX but it's the same model for Windows and other operating systems 
Dialogue: 0,0:05:15.50,0:05:16.74,csapp,,0,0,0,,so 
Dialogue: 0,0:05:19.90,0:05:24.24,csapp,,0,0,0,,and now let's just talk a little about what computer networking means 
Dialogue: 0,0:05:24.70,0:05:31.16,csapp,,0,0,0,,the idea of a network is it's a collection of systems  that are referred to as hosts 
Dialogue: 0,0:05:32.08,0:05:40.18,csapp,,0,0,0,,that are able to communicate with each other over some kind of communication fabric let's call
Dialogue: 0,0:05:40.68,0:05:41.94,csapp,,0,0,0,,it communications system 
Dialogue: 0,0:05:42.36,0:05:44.60,csapp,,0,0,0,,and they're sort of partitioned into 
Dialogue: 0,0:05:45.36,0:05:48.56,csapp,,0,0,0,,mostly referred to as lands or local area networks
Dialogue: 0,0:05:48.74,0:05:51.90,csapp,,0,0,0,, that you establish within a small region 
Dialogue: 0,0:05:52.42,0:05:55.22,csapp,,0,0,0,,and then a wide area network which would be over
Dialogue: 0,0:05:55.66,0:05:58.68,csapp,,0,0,0,, or something the size of a city or perhaps more 
Dialogue: 0,0:06:00.10,0:06:05.18,csapp,,0,0,0,,and over a enterprise such as CMU it's a very complex 
Dialogue: 0,0:06:05.40,0:06:10.32,csapp,,0,0,0,,set of for example there's wireless base stations
Dialogue: 0,0:06:10.78,0:06:16.92,csapp,,0,0,0,,that right in this room that you're interacting with when you're using a wireless system or your your phone 
Dialogue: 0,0:06:17.49,0:06:21.56,csapp,,0,0,0,,and then there's a whole networking infrastructure within the university
Dialogue: 0,0:06:21.92,0:06:24.42,csapp,,0,0,0,, the then goes to some commercial providers
Dialogue: 0,0:06:25.06,0:06:31.32,csapp,,0,0,0,,AT&T in particular that give it access to the the commercial Internet 
Dialogue: 0,0:06:31.66,0:06:36.40,csapp,,0,0,0,,and then there's another set of network connections hosted by the supercomputing Center
Dialogue: 0,0:06:36.70,0:06:43.28,csapp,,0,0,0,, that give you access to what's called Internet 2 which is the resource that's used for communicating among universities 
Dialogue: 0,0:06:43.98,0:06:48.61,csapp,,0,0,0,,so underneath you know when you're doing your networking stuff
Dialogue: 0,0:06:48.61,0:06:52.06,csapp,,0,0,0,,there's this amazingly complex combination of things going on
Dialogue: 0,0:06:53.02,0:06:57.78,csapp,,0,0,0,, the idea of an internet is supposed is refers to the idea
Dialogue: 0,0:06:58.24,0:07:01.34,csapp,,0,0,0,, the general idea of a network of networks 
Dialogue: 0,0:07:01.62,0:07:06.46,csapp,,0,0,0,,taking for example the local area network that this base station provides 
Dialogue: 0,0:07:06.94,0:07:10.57,csapp,,0,0,0,,and connecting it up to other networks on campus and across the world
Dialogue: 0,0:07:11.28,0:07:14.36,csapp,,0,0,0,,and when we refer to the capital I internet 
Dialogue: 0,0:07:15.22,0:07:20.32,csapp,,0,0,0,,that refers to the one instance the the most significant instance of an Internet
Dialogue: 0,0:07:20.32,0:07:25.68,csapp,,0,0,0,,so lowercase I means the sort of general idea of creating a network of networks
Dialogue: 0,0:07:26.22,0:07:31.74,csapp,,0,0,0,,uppercase I is the specific example that we all know and use all the time
Dialogue: 0,0:07:32.14,0:07:37.42,csapp,,0,0,0,,that's organized by a certain set of principles that uses a particular set of protocols and so forth 
Dialogue: 0,0:07:37.98,0:07:41.20,csapp,,0,0,0,,and of course we tend to just talk the internet 
Dialogue: 0,0:07:41.40,0:07:49.54,csapp,,0,0,0,,and most people know that what that really implies is the sort of existing network structure that there is 
Dialogue: 0,0:07:51.44,0:07:53.84,csapp,,0,0,0,,and that's good enough for the purpose of this course 
Dialogue: 0,0:07:53.84,0:07:57.56,csapp,,0,0,0,,we're not going to talk much about other possible designs one might have for a network 
Dialogue: 0,0:07:58.60,0:08:04.76,csapp,,0,0,0,,so most of the low level networking is supported by something called Ethernet 
Dialogue: 0,0:08:05.22,0:08:08.76,csapp,,0,0,0,,and the term Ethernet actually has evolved tremendously over time
Dialogue: 0,0:08:09.24,0:08:13.84,csapp,,0,0,0,,so that it's almost more like a brand name that it is in specific technology
Dialogue: 0,0:08:14.32,0:08:18.50,csapp,,0,0,0,,and the version you're familiar with the wired version of it 
Dialogue: 0,0:08:18.50,0:08:23.98,csapp,,0,0,0,,you have a wire to some sort of a box 
Dialogue: 0,0:08:24.70,0:08:28.24,csapp,,0,0,0,,like that you plug the your ethernet jacks into 
Dialogue: 0,0:08:28.68,0:08:30.58,csapp,,0,0,0,,and historically those were called hubs 
Dialogue: 0,0:08:31.08,0:08:36.88,csapp,,0,0,0,,and the idea of a hub was it was just a repeater that whatever came into it from one computer
Dialogue: 0,0:08:36.88,0:08:39.04,csapp,,0,0,0,, it would broadcast to all the connected machines 
Dialogue: 0,0:08:39.70,0:08:43.86,csapp,,0,0,0,,and so you only want to do this for maybe a a dozen or
Dialogue: 0,0:08:43.86,0:08:49.80,csapp,,0,0,0,,so machines that it's like a party-line they're all hearing what everybody else is saying 
Dialogue: 0,0:08:50.40,0:08:59.38,csapp,,0,0,0,,and in fact the original first version the ethernet did that by everyone interacting over a single cable
Dialogue: 0,0:08:59.70,0:09:02.00,csapp,,0,0,0,,carrying essentially radio signals and
Dialogue: 0,0:09:02.44,0:09:06.10,csapp,,0,0,0,,and  similarly when you're in this room using a wireless internet 
Dialogue: 0,0:09:06.98,0:09:09.60,csapp,,0,0,0,,a wireless internet is sort of like a hub and that 
Dialogue: 0,0:09:10.30,0:09:15.88,csapp,,0,0,0,,all the packets that you're sending all across the room 
Dialogue: 0,0:09:15.88,0:09:21.30,csapp,,0,0,0,,they're all sort of making use of the same radio frequencies the same communication channel 
Dialogue: 0,0:09:21.64,0:09:28.80,csapp,,0,0,0,,and there's a protocol for how they detect when two messages get set at the same time and therefore interfere with each other
Dialogue: 0,0:09:29.44,0:09:34.38,csapp,,0,0,0,, so that can only sort of scale up to maybe at most a hundred different 
Dialogue: 0,0:09:36.68,0:09:41.02,csapp,,0,0,0,,hosts communicating because they're all sharing a single communication channel
Dialogue: 0,0:09:41.78,0:09:46.68,csapp,,0,0,0,,now in the wired world what's evolved is usually when you buy a box 
Dialogue: 0,0:09:47.48,0:09:49.32,csapp,,0,0,0,,or you get one from your cable company
Dialogue: 0,0:09:49.94,0:09:52.54,csapp,,0,0,0,, with all those ports in it it's actually called a router 
Dialogue: 0,0:09:52.98,0:09:56.48,csapp,,0,0,0,,or sometimes a switch  in that 
Dialogue: 0,0:09:59.16,0:10:01.68,csapp,,0,0,0,,it it doesn't broadcast to everyone
Dialogue: 0,0:10:01.70,0:10:04.38,csapp,,0,0,0,, it it selectively tries to guess 
Dialogue: 0,0:10:05.12,0:10:08.74,csapp,,0,0,0,,is this particular message bound for this particular host 
Dialogue: 0,0:10:09.48,0:10:11.94,csapp,,0,0,0,,and only send to that one 
Dialogue: 0,0:10:12.34,0:10:14.86,csapp,,0,0,0,,and as you know you can take these and wire up 
Dialogue: 0,0:10:15.36,0:10:18.82,csapp,,0,0,0,,I think about up to six levels deep in and hops 
Dialogue: 0,0:10:19.48,0:10:24.66,csapp,,0,0,0,,and basically create a network of wired connections 
Dialogue: 0,0:10:25.18,0:10:27.60,csapp,,0,0,0,,and they'll all get from one to the other somehow 
Dialogue: 0,0:10:28.82,0:10:35.23,csapp,,0,0,0,,and then after that it gets more complicated you can add more sophisticated types of switching on top of it
Dialogue: 0,0:10:35.90,0:10:40.52,csapp,,0,0,0,,but so the general idea of even an Ethernet is actually a fairly complex thing 
Dialogue: 0,0:10:41.28,0:10:44.92,csapp,,0,0,0,,but it's some sort of conceptual level we can just think of it as a bunch of hosts 
Dialogue: 0,0:10:45.48,0:10:47.26,csapp,,0,0,0,,that can talk directly to one another 
Dialogue: 0,0:10:49.42,0:10:56.14,csapp,,0,0,0,,and then an internet then refers to the idea of taking those local area networks and connecting them together
Dialogue: 0,0:10:56.74,0:11:02.46,csapp,,0,0,0,,via routers and routers obey a particular protocol based on the address
Dialogue: 0,0:11:02.70,0:11:04.42,csapp,,0,0,0,,that you're trying to send data to 
Dialogue: 0,0:11:05.34,0:11:06.18,csapp,,0,0,0,,and 
Dialogue: 0,0:11:08.78,0:11:16.72,csapp,,0,0,0,,and so what you end up with conceptually is a whole bunch of hosts spread potentially all across the world 
Dialogue: 0,0:11:17.26,0:11:20.02,csapp,,0,0,0,,and then some magical system of routers 
Dialogue: 0,0:11:20.42,0:11:22.96,csapp,,0,0,0,,that will get a message from one place to the other 
Dialogue: 0,0:11:23.24,0:11:29.08,csapp,,0,0,0,,based on a mode of addressing where there's some known address of the hosts 
Dialogue: 0,0:11:29.08,0:11:30.50,csapp,,0,0,0,,that you're trying to send to 
Dialogue: 0,0:11:30.96,0:11:36.90,csapp,,0,0,0,,and it will hop through multiple routers to get from one place to the other 
Dialogue: 0,0:11:36.92,0:11:38.90,csapp,,0,0,0,,and that's true whether it's on campus 
Dialogue: 0,0:11:40.88,0:11:44.35,csapp,,0,0,0,,or whether it's hopping all the way around the world
Dialogue: 0,0:11:45.04,0:11:50.82,csapp,,0,0,0,,and so again there's this huge body of information and knowledge about how that routing works
Dialogue: 0,0:11:50.94,0:11:52.62,csapp,,0,0,0,, and how its reliable and all that 
Dialogue: 0,0:11:53.16,0:11:56.64,csapp,,0,0,0,,but we're going to just assume that somebody else has figured that out
Dialogue: 0,0:11:57.02,0:12:01.86,csapp,,0,0,0,,and our job as programmers is just to be able to communicate from one host to another
Dialogue: 0,0:12:06.42,0:12:10.42,csapp,,0,0,0,,and so how could you design a system where all these diverse systems 
Dialogue: 0,0:12:10.42,0:12:22.00,csapp,,0,0,0,,made by computers made by different manufacturers operating under different countries with different telecommunications bodies governing bodies and so forth 
Dialogue: 0,0:12:22.00,0:12:23.80,csapp,,0,0,0,,how can they all work with each other 
Dialogue: 0,0:12:24.38,0:12:29.34,csapp,,0,0,0,,and the requirement is you have to have a protocol you have to have some common set of conventions
Dialogue: 0,0:12:30.02,0:12:33.18,csapp,,0,0,0,,for what messages look like how they get sent 
Dialogue: 0,0:12:33.66,0:12:39.48,csapp,,0,0,0,,what happens if one of them doesn't make it how do you recover from that and so forth 
Dialogue: 0,0:12:44.14,0:12:49.46,csapp,,0,0,0,,and so what does a protocol include well it has to include some way of naming things so that
Dialogue: 0,0:12:49.94,0:12:53.08,csapp,,0,0,0,, if I want to send to some host I have some way of designating 
Dialogue: 0,0:12:53.52,0:12:54.80,csapp,,0,0,0,,who that host is 
Dialogue: 0,0:12:55.32,0:13:01.82,csapp,,0,0,0,,and then there's the routing system has to have some reliable way of getting my data to that named host 
Dialogue: 0,0:13:03.02,0:13:04.66,csapp,,0,0,0,,and that's the delivery mechanism 
Dialogue: 0,0:13:05.54,0:13:11.70,csapp,,0,0,0,,and that's usually done and one of the things that we now accept  as universal 
Dialogue: 0,0:13:11.70,0:13:17.46,csapp,,0,0,0,,but it really wasn't when it first came out was idea of you take all your data and you divide it into packets 
Dialogue: 0,0:13:17.48,0:13:21.38,csapp,,0,0,0,,and packets are typically about a thousand to two thousand bytes 
Dialogue: 0,0:13:22.36,0:13:27.72,csapp,,0,0,0,,and so if you have a longer message it chops it up into individual packets and sends it across `
Dialogue: 0,0:13:28.24,0:13:30.52,csapp,,0,0,0,,and all the communication occurs at the packet level 
Dialogue: 0,0:13:31.16,0:13:33.76,csapp,,0,0,0,,that's different than the historic phone system
Dialogue: 0,0:13:35.22,0:13:37.36,csapp,,0,0,0,, I was a connection based system meaning that
Dialogue: 0,0:13:37.76,0:13:45.30,csapp,,0,0,0,, if I was calling somebody there is a dedicated wire set of wires maintained by the phone company
Dialogue: 0,0:13:45.78,0:13:49.16,csapp,,0,0,0,, that would be reserved and locked down for our own use
Dialogue: 0,0:13:49.56,0:13:51.38,csapp,,0,0,0,,during the entire duration of that phone call
Dialogue: 0,0:13:56.62,0:13:57.56,csapp,,0,0,0,,so 
Dialogue: 0,0:13:58.94,0:14:03.42,csapp,,0,0,0,,to get them from one host say a to B 
Dialogue: 0,0:14:03.80,0:14:05.86,csapp,,0,0,0,,what happens is we want to send a packet 
Dialogue: 0,0:14:06.66,0:14:09.30,csapp,,0,0,0,,and that packet will contain some amount of data 
Dialogue: 0,0:14:10.32,0:14:15.04,csapp,,0,0,0,,and the idea of a packet communication then is you put little headers on 
Dialogue: 0,0:14:15.34,0:14:20.80,csapp,,0,0,0,,that contain certain routing information  see on the front of an envelope of a letter perhaps 
Dialogue: 0,0:14:21.72,0:14:24.42,csapp,,0,0,0,,and so and at different points in the way 
Dialogue: 0,0:14:24.42,0:14:30.82,csapp,,0,0,0,,they'll have different numbers of headers and different protocols or formats for what those headers look like 
Dialogue: 0,0:14:31.58,0:14:33.74,csapp,,0,0,0,,so in particular within 
Dialogue: 0,0:14:34.92,0:14:37.10,csapp,,0,0,0,,I want to send a message and I'll
Dialogue: 0,0:14:37.76,0:14:42.32,csapp,,0,0,0,,I'll do that and then the software that runs on my machine that handles this
Dialogue: 0,0:14:42.76,0:14:50.06,csapp,,0,0,0,,will put a header in front of that that describes the internet routing 
Dialogue: 0,0:14:50.44,0:14:55.62,csapp,,0,0,0,,and then it will tack a header in front of that that talks about the local area network routing that gets used 
Dialogue: 0,0:14:56.42,0:15:02.06,csapp,,0,0,0,,and that's what's referred to as the a P hat H the packet header for the Internet Protocol 
Dialogue: 0,0:15:02.74,0:15:08.30,csapp,,0,0,0,,and f h1 the frame header for this particular message being sent within this local network 
Dialogue: 0,0:15:10.90,0:15:15.24,csapp,,0,0,0,,and then the network interface card or the adapter here 
Dialogue: 0,0:15:16.10,0:15:23.48,csapp,,0,0,0,,is then responsible for putting that out over this local communication of capability
Dialogue: 0,0:15:23.78,0:15:31.44,csapp,,0,0,0,,and then that gets received at the other end by the network adapter at the receivers direction 
Dialogue: 0,0:15:32.14,0:15:40.00,csapp,,0,0,0,,it will put up its own frame header on it to pass it in 
Dialogue: 0,0:15:40.94,0:15:42.94,csapp,,0,0,0,,and that then gets tripped off
Dialogue: 0,0:15:43.80,0:15:48.58,csapp,,0,0,0,, so that all hosts be set sees is the the data that gets sent
Dialogue: 0,0:15:49.18,0:15:55.44,csapp,,0,0,0,, but this idea of putting headers in front and at times sort of what they call encapsulation that 
Dialogue: 0,0:15:55.93,0:16:02.50,csapp,,0,0,0,,I'll take this big packet and I'll just tack some more information on top to the front of it header information 
Dialogue: 0,0:16:02.94,0:16:06.24,csapp,,0,0,0,,and I'll send through the rest of it just as a set of bytes
Dialogue: 0,0:16:14.24,0:16:18.92,csapp,,0,0,0,,so the internet that we know and love the capital I internet 
Dialogue: 0,0:16:18.94,0:16:23.10,csapp,,0,0,0,,then has a particular set of protocols that are you've probably heard the terms 
Dialogue: 0,0:16:23.94,0:16:26.54,csapp,,0,0,0,,one is called the IP the Internet Protocol
Dialogue: 0,0:16:26.92,0:16:28.70,csapp,,0,0,0,,which is the one that defines 
Dialogue: 0,0:16:29.02,0:16:33.16,csapp,,0,0,0,,ideas about how do you get how do you name hosts on the Internet 
Dialogue: 0,0:16:33.94,0:16:36.02,csapp,,0,0,0,,and how do you send packets
Dialogue: 0,0:16:36.64,0:16:40.76,csapp,,0,0,0,, and they're referred to sometimes is datagrams 
Dialogue: 0,0:16:41.04,0:16:46.86,csapp,,0,0,0,,meaning that a packet is just a single entity that gets sent from point A to point B 
Dialogue: 0,0:16:48.80,0:16:53.36,csapp,,0,0,0,,and the underlying IP doesn't guarantee delivery so
Dialogue: 0,0:16:54.14,0:16:57.28,csapp,,0,0,0,,so it's based on what they call best
Dialogue: 0,0:16:58.04,0:17:01.60,csapp,,0,0,0,,effort communication meaning that at each step along the way
Dialogue: 0,0:17:02.34,0:17:06.94,csapp,,0,0,0,,if for example things are good then it will just send this packet along
Dialogue: 0,0:17:06.94,0:17:08.82,csapp,,0,0,0,, if there's too much congestion 
Dialogue: 0,0:17:09.34,0:17:13.46,csapp,,0,0,0,,there's been a you know somebody's turned on their microwave oven and
Dialogue: 0,0:17:14.06,0:17:16.66,csapp,,0,0,0,, it's set up some radiofrequency interface interference
Dialogue: 0,0:17:17.24,0:17:22.06,csapp,,0,0,0,,then at the IP level it just drops that packet and says whoops
Dialogue: 0,0:17:22.88,0:17:26.48,csapp,,0,0,0,, I screwed up sorry it doesn't even say sorry it just does it silently
Dialogue: 0,0:17:28.60,0:17:32.38,csapp,,0,0,0,,and then you can as a programmer make use of that very global level 
Dialogue: 0,0:17:32.42,0:17:36.76,csapp,,0,0,0,,so normally as a programmer you don't really want to program at that level
Dialogue: 0,0:17:36.90,0:17:39.56,csapp,,0,0,0,,because you'll send packets and they will get there
Dialogue: 0,0:17:40.14,0:17:44.78,csapp,,0,0,0,, but you can if you want to and it's called UDP  a protocol 
Dialogue: 0,0:17:44.86,0:17:47.76,csapp,,0,0,0,,it's just a small software layer over IP 
Dialogue: 0,0:17:47.76,0:17:49.16,csapp,,0,0,0,,and there's some applications  
Dialogue: 0,0:17:49.70,0:17:53.16,csapp,,0,0,0,,that you'll see for example in the computer game world where you want to send 
Dialogue: 0,0:17:54.46,0:17:58.48,csapp,,0,0,0,,information really fast and if some information gets dropped it's not a big deal
Dialogue: 0,0:17:58.78,0:18:00.56,csapp,,0,0,0,, that people actually program at that level 
Dialogue: 0,0:18:01.12,0:18:02.54,csapp,,0,0,0,,we won't really talk about that
Dialogue: 0,0:18:02.54,0:18:10.18,csapp,,0,0,0,, the more common protocol that gets used and carries 99% of Internet traffic is what's called TCP 
Dialogue: 0,0:18:10.18,0:18:11.78,csapp,,0,0,0,,or transmission control protocol 
Dialogue: 0,0:18:12.34,0:18:17.68,csapp,,0,0,0,,and that provides a reliable the equivalent of telephone connection 
Dialogue: 0,0:18:18.12,0:18:22.94,csapp,,0,0,0,,that I can reliably send data from point A to point B
Dialogue: 0,0:18:24.18,0:18:25.46,csapp,,0,0,0,,as many bytes as I like
Dialogue: 0,0:18:26.40,0:18:28.24,csapp,,0,0,0,, it's a guaranteed
Dialogue: 0,0:18:28.92,0:18:32.36,csapp,,0,0,0,,every it's sometimes fast and sometimes not but it's there 
Dialogue: 0,0:18:32.86,0:18:36.96,csapp,,0,0,0,,and it's built on top of the IPO of this datagram 
Dialogue: 0,0:18:37.18,0:18:41.50,csapp,,0,0,0,,meaning that it has to take whatever you're sending and slice it up into these single packets 
Dialogue: 0,0:18:42.24,0:18:46.30,csapp,,0,0,0,,if one of them doesn't get sent it will resend it  until it gets there
Dialogue: 0,0:18:46.84,0:18:49.32,csapp,,0,0,0,,they have to deal with the fact that packets can 
Dialogue: 0,0:18:49.60,0:18:54.02,csapp,,0,0,0,,travel different paths and one can get ahead of the other in transmission 
Dialogue: 0,0:18:54.04,0:18:56.40,csapp,,0,0,0,,and so it has to reorder them in the correct sequence 
Dialogue: 0,0:18:56.98,0:18:59.24,csapp,,0,0,0,,and so there's a lot of stuff under it but
Dialogue: 0,0:18:59.82,0:19:01.64,csapp,,0,0,0,,we'll just assume that it kind of works
Dialogue: 0,0:19:02.40,0:19:06.34,csapp,,0,0,0,,and so you can just rely think about it is I have a stream connection 
Dialogue: 0,0:19:06.78,0:19:11.56,csapp,,0,0,0,,I can send from A to B and B can send a stream of data back to me 
Dialogue: 0,0:19:12.06,0:19:13.66,csapp,,0,0,0,,and we're all happy 
Dialogue: 0,0:19:15.20,0:19:18.04,csapp,,0,0,0,,and so that's the version that looks like file IO 
Dialogue: 0,0:19:18.04,0:19:23.58,csapp,,0,0,0,,I just keep writing to a file and it's sending packets over the network to the other end 
Dialogue: 0,0:19:24.24,0:19:28.18,csapp,,0,0,0,,and then the other side can be sending stuff to me
Dialogue: 0,0:19:28.54,0:19:31.66,csapp,,0,0,0,,and I'm just reading it and I'm just reading bytes of data 
Dialogue: 0,0:19:32.00,0:19:35.12,csapp,,0,0,0,,not worrying about how that got broken up into individual packets 
Dialogue: 0,0:19:36.48,0:19:39.18,csapp,,0,0,0,,and so that's referred to as the sockets interface 
Dialogue: 0,0:19:39.78,0:19:43.32,csapp,,0,0,0,,and you'll hear the term socket programming and that's exactly what we're talking about
Dialogue: 0,0:19:48.58,0:19:56.00,csapp,,0,0,0,,and so from a sort of software system
Dialogue: 0,0:19:56.08,0:19:58.44,csapp,,0,0,0,,than software hardware system then
Dialogue: 0,0:19:58.90,0:20:03.26,csapp,,0,0,0,, the client and the server are both implemented as application programs 
Dialogue: 0,0:20:03.74,0:20:07.18,csapp,,0,0,0,,at the respective endpoints on their hosts 
Dialogue: 0,0:20:08.18,0:20:17.82,csapp,,0,0,0,,and they make use of of software and libraries that run at some combination of the user level and at the kernel level 
Dialogue: 0,0:20:18.40,0:20:20.86,csapp,,0,0,0,,and therefore I have access to direct resources 
Dialogue: 0,0:20:21.56,0:20:22.78,csapp,,0,0,0,,and so 
Dialogue: 0,0:20:24.88,0:20:31.26,csapp,,0,0,0,, I is a program or an application programmer then make use of this software API 
Dialogue: 0,0:20:31.54,0:20:33.64,csapp,,0,0,0,, that lets me do socket programming 
Dialogue: 0,0:20:34.12,0:20:38.84,csapp,,0,0,0,,and it's based on gives directly supports tcp/ip
Dialogue: 0,0:20:42.90,0:20:48.04,csapp,,0,0,0,,so first of all we're going to talk most of the time about what's called ipv4 
Dialogue: 0,0:20:48.80,0:20:55.80,csapp,,0,0,0,,a version 4 which is the one that's been running for since the 1980s I think early 1980s 
Dialogue: 0,0:20:56.58,0:21:04.10,csapp,,0,0,0,,and is this the standard and we'll talk very only mentioned very briefly the idea of what's called ipv6
Dialogue: 0,0:21:04.76,0:21:07.16,csapp,,0,0,0,, which is sort of a next-generation version 
Dialogue: 0,0:21:08.00,0:21:12.80,csapp,,0,0,0,,so the idea of a ipv4 and this is now we're talking about IP
Dialogue: 0,0:21:13.36,0:21:18.60,csapp,,0,0,0,, and and this is true of TCP as well is that an address is actually just 32 bits
Dialogue: 0,0:21:20.92,0:21:24.28,csapp,,0,0,0,,  but it's usually expressed in what they call dotted decimal form 
Dialogue: 0,0:21:24.54,0:21:26.44,csapp,,0,0,0,, and you've seen these addresses before
Dialogue: 0,0:21:26.86,0:21:29.86,csapp,,0,0,0,, that it's four decimal numbers 
Dialogue: 0,0:21:30.50,0:21:33.52,csapp,,0,0,0,,and they can only range between 0 and 255 
Dialogue: 0,0:21:34.32,0:21:37.74,csapp,,0,0,0,,because each one of them is a single bytes worth of information 
Dialogue: 0,0:21:37.76,0:21:40.36,csapp,,0,0,0,,so we're used to writing things in hex now in this course 
Dialogue: 0,0:21:40.86,0:21:44.96,csapp,,0,0,0,,but we're going to write it as each byte is written as a decimal digit 
Dialogue: 0,0:21:45.78,0:21:49.50,csapp,,0,0,0,,and they're actually passed and stored in 
Dialogue: 0,0:21:49.82,0:21:53.34,csapp,,0,0,0,,what's called network byte order which is big endian byte order 
Dialogue: 0,0:21:54.04,0:21:58.10,csapp,,0,0,0,,and so we have to worry about the whole big endian vs. Goodell Indian thing 
Dialogue: 0,0:21:58.54,0:22:00.02,csapp,,0,0,0,,when we're doing network programming 
Dialogue: 0,0:22:01.26,0:22:07.14,csapp,,0,0,0,,and you can actually learn a lot there's a whole levels of how the different bytes mean 
Dialogue: 0,0:22:07.14,0:22:13.30,csapp,,0,0,0,,but for example any IP address it starts with 128.2  is at CMU
Dialogue: 0,0:22:15.86,0:22:18.24,csapp,,0,0,0,, I think and then 
Dialogue: 0,0:22:19.14,0:22:24.34,csapp,,0,0,0,,and so essentially CMU owns that part of the IP address space 
Dialogue: 0,0:22:26.02,0:22:29.98,csapp,,0,0,0,,which if you think about that's approximately 2^64
Dialogue: 0,0:22:31.02,0:22:37.48,csapp,,0,0,0,,2 to the no not to the 64th - to the sixteenth
Dialogue: 0,0:22:38.04,0:22:41.52,csapp,,0,0,0,,different IP addresses available for use by campus 
Dialogue: 0,0:22:46.96,0:22:50.62,csapp,,0,0,0,,alma and as i mentioned there's a newer version called ipv6 
Dialogue: 0,0:22:50.86,0:22:54.84,csapp,,0,0,0,,that gives you a 128-bit addresses 
Dialogue: 0,0:22:55.52,0:23:01.30,csapp,,0,0,0,,you can imagine actually that if you think about how many nodes are there in the Internet
Dialogue: 0,0:23:01.42,0:23:07.10,csapp,,0,0,0,,if a four byte address is only to the 32 so that's four billion 
Dialogue: 0,0:23:08.50,0:23:12.96,csapp,,0,0,0,,and I don't know about you but I have a lot of different things that use IP 
Dialogue: 0,0:23:12.96,0:23:18.28,csapp,,0,0,0,,I have a phone I have two laptops I have a couple desktops 
Dialogue: 0,0:23:19.10,0:23:25.86,csapp,,0,0,0,,so if all if every one of us used multiple IP addresses then actually the world would be out of them right
Dialogue: 0,0:23:25.86,0:23:30.12,csapp,,0,0,0,, there's seven billion people in the world not all of whom have access to the Internet 
Dialogue: 0,0:23:30.18,0:23:31.70,csapp,,0,0,0,,but a large fraction of them do 
Dialogue: 0,0:23:32.40,0:23:39.58,csapp,,0,0,0,,and so there's a whole kind of crazy way of dealing with the the multitude of possible IP addresses 
Dialogue: 0,0:23:40.18,0:23:44.20,csapp,,0,0,0,,so the obvious thing would be well let's just allocate a lot more addresses 
Dialogue: 0,0:23:44.46,0:23:49.92,csapp,,0,0,0,,and jump let's just skip 64 bits and go right to 128 and that's the idea behind ipv6
Dialogue: 0,0:23:50.58,0:23:56.44,csapp,,0,0,0,, but quite honestly this has been one of those technologies that's been out there for over 15 years
Dialogue: 0,0:23:57.00,0:24:01.48,csapp,,0,0,0,,and still has a very low level of adoption so 
Dialogue: 0,0:24:02.52,0:24:05.08,csapp,,0,0,0,,it's it's still a future technology 
Dialogue: 0,0:24:06.40,0:24:12.36,csapp,,0,0,0,,people have basically figured out all these crazy schemes to make use of of just stick within the four byte limit
Dialogue: 0,0:24:20.04,0:24:26.80,csapp,,0,0,0,,okay so let's start talking the program the sort of programmer perspective on this 
Dialogue: 0,0:24:27.74,0:24:34.32,csapp,,0,0,0,,and this is one area where you'll wish you weren't programming in C 
Dialogue: 0,0:24:34.42,0:24:35.56,csapp,,0,0,0,,but you are 
Dialogue: 0,0:24:36.10,0:24:38.72,csapp,,0,0,0,,so there's a lot of really crufty stuff 
Dialogue: 0,0:24:38.72,0:24:46.83,csapp,,0,0,0,,and it was all developed most of the software protocols were conceived before C even was what it is today
Dialogue: 0,0:24:47.58,0:24:51.40,csapp,,0,0,0,,so like the Kernighan and Ritchie book you have is called the second edition 
Dialogue: 0,0:24:51.40,0:24:55.14,csapp,,0,0,0,,and it's based on what was called ANSI C or ISO C  
Dialogue: 0,0:24:55.76,0:25:00.50,csapp,,0,0,0,,but these all date before that they date back to the original Kernighan and Ritchie 
Dialogue: 0,0:25:00.50,0:25:04.42,csapp,,0,0,0,, so for example void star did not exist in that era
Dialogue: 0,0:25:04.80,0:25:07.48,csapp,,0,0,0,, and so you use care star as a generic pointer 
Dialogue: 0,0:25:08.24,0:25:11.36,csapp,,0,0,0,,and so there's just a lot of stuff in this programming
Dialogue: 0,0:25:11.76,0:25:16.72,csapp,,0,0,0,, interface where you go wow that is really crufty and that that truth is yes you're right 
Dialogue: 0,0:25:17.64,0:25:20.80,csapp,,0,0,0,,so in particular there's a lot of different structures that are defined and 
Dialogue: 0,0:25:20.80,0:25:23.98,csapp,,0,0,0,,one of them is called an in adder which means internet address  
Dialogue: 0,0:25:24.64,0:25:28.12,csapp,,0,0,0,,and it's just defined to be a 32-bit unsigned number 
Dialogue: 0,0:25:30.00,0:25:32.88,csapp,,0,0,0,,and in general as I mentioned there 
Dialogue: 0,0:25:33.02,0:25:39.78,csapp,,0,0,0,,the so called network byte order whoever designed the original protocols was a fan of big endian addressing 
Dialogue: 0,0:25:39.90,0:25:46.40,csapp,,0,0,0,,and so that's what it is even though actually most of the machines that are out there in this world are little endian
Dialogue: 0,0:25:46.96,0:25:50.86,csapp,,0,0,0,, and so there's a set of standard library functions
Dialogue: 0,0:25:50.86,0:25:54.46,csapp,,0,0,0,, that you use to convert between network order and host order 
Dialogue: 0,0:25:55.00,0:26:01.64,csapp,,0,0,0,,and the idea of it is now if I run my software on a little Indian or a big endian machine
Dialogue: 0,0:26:02.10,0:26:04.44,csapp,,0,0,0,,  these functions will do the right thing 
Dialogue: 0,0:26:04.46,0:26:07.10,csapp,,0,0,0,, so if I just use these standard libraries 
Dialogue: 0,0:26:07.50,0:26:12.62,csapp,,0,0,0,,then I don't have to worry about porting it every time I change the word ordering of a machine
Dialogue: 0,0:26:13.46,0:26:16.08,csapp,,0,0,0,,one of the things you'll notice here is
Dialogue: 0,0:26:16.48,0:26:25.24,csapp,,0,0,0,,there is no function to convert 64-bit data  between a network order and host order so
Dialogue: 0,0:26:25.98,0:26:31.40,csapp,,0,0,0,, I don't know what people do when I do it I just write my own saw my own to do  it 
Dialogue: 0,0:26:32.92,0:26:35.86,csapp,,0,0,0,,or I don't because I know my other end is a little endian machine
Dialogue: 0,0:26:37.42,0:26:47.06,csapp,,0,0,0,,so anyways these are already some functions you'll start seeing for that look like network conversion software
Dialogue: 0,0:26:50.70,0:26:54.99,csapp,,0,0,0,,and as I mentioned the addresses are written in a dotted decimal form 
Dialogue: 0,0:26:55.52,0:26:58.36,csapp,,0,0,0,,and it's also big endian 
Dialogue: 0,0:26:58.38,0:27:03.64,csapp,,0,0,0,,so if I were to write in hex 128 is of course 80 
Dialogue: 0,0:27:03.68,0:27:07.32,csapp,,0,0,0,,so that's the most significant byte of the IP address 
Dialogue: 0,0:27:11.14,0:27:18.38,csapp,,0,0,0,,and then there is a set of functions API calls you can use to convert between this dotted decimal format 
Dialogue: 0,0:27:18.48,0:27:23.56,csapp,,0,0,0,,and the actual just a 32-bit unsigned int 
Dialogue: 0,0:27:25.16,0:27:27.46,csapp,,0,0,0,, and actually it used to be there is 
Dialogue: 0,0:27:27.90,0:27:31.66,csapp,,0,0,0,,you might see some older presentations where they use different names for this 
Dialogue: 0,0:27:31.80,0:27:35.48,csapp,,0,0,0,,but  the most recent version API calls this
Dialogue: 0,0:27:36.32,0:27:42.48,csapp,,0,0,0,, the the presentation version the dotted decimal they referred to it as a presentation
Dialogue: 0,0:27:45.32,0:27:50.92,csapp,,0,0,0,,then you can look up the and it's in the book to what the the calls to these look like 
Dialogue: 0,0:27:53.24,0:27:56.40,csapp,,0,0,0,,but you probably don't or very seldom 
Dialogue: 0,0:27:58.02,0:27:59.96,csapp,,0,0,0,,when you're thinking about I want to go to Google 
Dialogue: 0,0:27:59.98,0:28:05.26,csapp,,0,0,0,,you don't think about what its IP address is you just go to www.google.com
Dialogue: 0,0:28:06.08,0:28:09.58,csapp,,0,0,0,,and for everything you do you refer to it by this 
Dialogue: 0,0:28:10.24,0:28:15.83,csapp,,0,0,0,,I it would have referred called Internet domain names which is a hierarchical naming system
Dialogue: 0,0:28:16.40,0:28:21.74,csapp,,0,0,0,,whereas you know there's .edu is for educational institutions 
Dialogue: 0,0:28:22.14,0:28:23.90,csapp,,0,0,0,,.com is for commercial
Dialogue: 0,0:28:24.08,0:28:30.66,csapp,,0,0,0,,.net is general networking of many countries have their own suffix
Dialogue: 0,0:28:30.82,0:28:35.18,csapp,,0,0,0,,so you know .de is for Germany and so forth 
Dialogue: 0,0:28:35.70,0:28:38.50,csapp,,0,0,0,,and so those are called the first level domain names 
Dialogue: 0,0:28:38.82,0:28:41.46,csapp,,0,0,0,,and then there's a hierarchical naming structure under that
Dialogue: 0,0:28:42.50,0:28:43.40,csapp,,0,0,0,,and 
Dialogue: 0,0:28:45.60,0:28:49.14,csapp,,0,0,0,,there's actually an interesting question of okay 
Dialogue: 0,0:28:49.14,0:28:58.72,csapp,,0,0,0,,how do I then map from those hierarchical names those domain names into this dotted decimal or the 32 bit IP address 
Dialogue: 0,0:29:00.24,0:29:07.94,csapp,,0,0,0,,and the job of that is by a very large distributed system called the DNS the domain name system 
Dialogue: 0,0:29:08.42,0:29:14.66,csapp,,0,0,0,, where the only sort of centrally managed part of it is at the top level 
Dialogue: 0,0:29:15.26,0:29:18.08,csapp,,0,0,0,,so for each of these first level domain names 
Dialogue: 0,0:29:18.20,0:29:28.60,csapp,,0,0,0,,there's there's a collection a very large collection of machines that keep track of all the all the IP addresses
Dialogue: 0,0:29:29.22,0:29:32.60,csapp,,0,0,0,, that map to one of those first level domain names
Dialogue: 0,0:29:32.96,0:29:36.46,csapp,,0,0,0,, and then for example CMU maintains its own naming Authority 
Dialogue: 0,0:29:36.90,0:29:41.30,csapp,,0,0,0,,so anything that says something .cmu.edu
Dialogue: 0,0:29:41.70,0:29:45.42,csapp,,0,0,0,, there's local DNS servers within CMU 
Dialogue: 0,0:29:45.82,0:29:50.38,csapp,,0,0,0,,that are picking apart ok where should you know 
Dialogue: 0,0:29:51.10,0:29:57.92,csapp,,0,0,0,,if I say cs.cum.edu what would be the the IP address for that 
Dialogue: 0,0:30:00.22,0:30:05.72,csapp,,0,0,0,,well and it's actually pretty interesting how this is managed because it's all it's totally decentralized 
Dialogue: 0,0:30:05.72,0:30:12.48,csapp,,0,0,0,,there's a whole set of protocols that govern how naming is done
Dialogue: 0,0:30:15.84,0:30:19.28,csapp,,0,0,0,,but conceptually we can think of it as just this big database 
Dialogue: 0,0:30:19.40,0:30:20.74,csapp,,0,0,0,,that gives me a mapping 
Dialogue: 0,0:30:21.46,0:30:27.98,csapp,,0,0,0,,where I can give a domain name and it will get back to me a one or more IP addresses 
Dialogue: 0,0:30:28.44,0:30:31.92,csapp,,0,0,0,,I can give an IP address and it will come back with one or more domain names
Dialogue: 0,0:30:37.68,0:30:40.92,csapp,,0,0,0,,oh and so there's actually an application you can run 
Dialogue: 0,0:30:41.58,0:30:45.38,csapp,,0,0,0,,on most machines called nslookup and there's another one called dig
Dialogue: 0,0:30:46.02,0:30:49.88,csapp,,0,0,0,, that you can use to find basically probe the DNS 
Dialogue: 0,0:30:50.46,0:30:56.60,csapp,,0,0,0,,and find in either direction you can look at the given a domain name you can find its IP address 
Dialogue: 0,0:30:57.14,0:30:59.56,csapp,,0,0,0,,given an IP address you can find its domain name 
Dialogue: 0,0:31:01.70,0:31:04.24,csapp,,0,0,0,,and we also I'll show you some code that 
Dialogue: 0,0:31:05.62,0:31:08.54,csapp,,0,0,0,,just as an example of how you do the programming 
Dialogue: 0,0:31:08.98,0:31:12.48,csapp,,0,0,0,,I'll just show that momentarily called hostname 
Dialogue: 0,0:31:14.12,0:31:17.04,csapp,,0,0,0,,so just some examples
Dialogue: 0,0:31:29.72,0:31:37.68,csapp,,0,0,0,,you know if I look up some address like the the website for the computer science school computer science 
Dialogue: 0,0:31:38.54,0:31:40.00,csapp,,0,0,0,,using nslookup
Dialogue: 0,0:31:40.70,0:31:42.72,csapp,,0,0,0,,it comes back can people see this okay
Dialogue: 0,0:31:44.16,0:31:45.62,csapp,,0,0,0,,doing it bigger it's okay 
Dialogue: 0,0:31:46.28,0:31:50.70,csapp,,0,0,0,,so this is what NSF looks like and this stuff here just tells you 
Dialogue: 0,0:31:51.46,0:31:59.50,csapp,,0,0,0,,you know who where was the actual directory entry in the which DNS  server actually gave this information back 
Dialogue: 0,0:32:00.28,0:32:02.00,csapp,,0,0,0,,and it says that 
Dialogue: 0,0:32:03.02,0:32:15.34,csapp,,0,0,0,,www.cs.cum is actually a synonym for a weirder one called w web - l-bfgs .cum.edu
Dialogue: 0,0:32:15.74,0:32:19.38,csapp,,0,0,0,,and its IP address is 128.2 like you'd expect
Dialogue: 0,0:32:19.80,0:32:21.42,csapp,,0,0,0,,217.13 
Dialogue: 0,0:32:23.16,0:32:25.88,csapp,,0,0,0,,and of course that works not just at CMU but I can 
Dialogue: 0,0:32:29.94,0:32:33.18,csapp,,0,0,0,,you know go ask about what Stanford is up to 
Dialogue: 0,0:32:35.64,0:32:42.56,csapp,,0,0,0,,and it will come back and its IP addresses of something 171.64 
Dialogue: 0,0:32:45.84,0:32:49.76,csapp,,0,0,0,,and that's been managed by that and you'll see again it's 
Dialogue: 0,0:32:50.38,0:32:57.03,csapp,,0,0,0,,I asked for www.cs.stanford.edu it said well the real name of that is cs.stanford.edu 
Dialogue: 0,0:32:57.32,0:33:00.48,csapp,,0,0,0,,and this actually is a point that the
Dialogue: 0,0:33:01.42,0:33:04.36,csapp,,0,0,0,, the mapping between domain names 
Dialogue: 0,0:33:05.76,0:33:08.12,csapp,,0,0,0,,and internet addresses is not one-to-one 
Dialogue: 0,0:33:08.22,0:33:12.02,csapp,,0,0,0,,you can have multiple domain names that refer to the same Internet address 
Dialogue: 0,0:33:13.70,0:33:18.70,csapp,,0,0,0,,but you can also have multiple internet addresses
Dialogue: 0,0:33:22.66,0:33:23.36,csapp,,0,0,0,,excuse me
Dialogue: 0,0:33:30.16,0:33:31.18,csapp,,0,0,0,,that's weird
Dialogue: 0,0:33:36.98,0:33:42.10,csapp,,0,0,0,,so like twitter.com when I ask for it it comes back with four different addresses
Dialogue: 0,0:33:45.88,0:33:49.56,csapp,,0,0,0,,and if I do the exact same thing again
Dialogue: 0,0:33:51.46,0:33:53.28,csapp,,0,0,0,,mmm Kim but yeah 
Dialogue: 0,0:33:53.80,0:33:55.62,csapp,,0,0,0,,you see it came back with 
Dialogue: 0,0:33:57.68,0:34:00.22,csapp,,0,0,0,,the same no not even the same addresses 
Dialogue: 0,0:34:02.08,0:34:08.86,csapp,,0,0,0,,it came back for example here the one that ends with dot six that wasn't in that first was
Dialogue: 0,0:34:09.22,0:34:13.98,csapp,,0,0,0,,  so it came back with a slightly different set of addresses and a somewhat different order
Dialogue: 0,0:34:14.32,0:34:17.92,csapp,,0,0,0,,and the idea of that is that actually has multiple servers 
Dialogue: 0,0:34:17.96,0:34:22.18,csapp,,0,0,0,,so when I send to twitter.com or Google or any of these major servers
Dialogue: 0,0:34:22.58,0:34:26.62,csapp,,0,0,0,, there's not just one place in the internet that's handling everybody's Google traffic
Dialogue: 0,0:34:26.62,0:34:29.70,csapp,,0,0,0,, through thousands of places spread around the world
Dialogue: 0,0:34:30.18,0:34:35.88,csapp,,0,0,0,,and the way they get you there is by playing tricks with the DNS 
Dialogue: 0,0:34:36.74,0:34:41.98,csapp,,0,0,0,,that Google is constantly sending updates to the it maintains its own DNS servers 
Dialogue: 0,0:34:42.40,0:34:43.98,csapp,,0,0,0,,so it's constantly changing them 
Dialogue: 0,0:34:43.98,0:34:48.34,csapp,,0,0,0,,and it will actually give you different addresses depending on where in the world you're located as well
Dialogue: 0,0:34:48.76,0:34:53.80,csapp,,0,0,0,, to try and provide a server that's sort of reasonably close to you geographically so
Dialogue: 0,0:34:54.86,0:34:58.60,csapp,,0,0,0,, there's all just all kinds of tricks that happen through DNS
Dialogue: 0,0:34:58.68,0:35:04.62,csapp,,0,0,0,, that is part of the way they can sort of manage this huge set of addresses
Dialogue: 0,0:35:08.20,0:35:12.46,csapp,,0,0,0,,and then there's some other domain names that don't have any IP address 
Dialogue: 0,0:35:13.34,0:35:17.02,csapp,,0,0,0,,that they're somewhere in the hierarchy that hierarchical naming system
Dialogue: 0,0:35:17.02,0:35:19.80,csapp,,0,0,0,, but they're not actually referring to a particular host 
Dialogue: 0,0:35:21.10,0:35:23.96,csapp,,0,0,0,,so it's a Multi multi mapping
Dialogue: 0,0:35:27.13,0:35:32.14,csapp,,0,0,0,,in the the API city reflects
Dialogue: 0,0:35:40.16,0:35:44.00,csapp,,0,0,0,, it so this is just going what I told you they sometimes one-to-one 
Dialogue: 0,0:35:44.06,0:35:47.28,csapp,,0,0,0,,sometimes many domain names refer to the same address
Dialogue: 0,0:35:48.20,0:35:53.12,csapp,,0,0,0,,sometimes of one name maps to multiple addresses that change over time 
Dialogue: 0,0:35:53.96,0:35:57.10,csapp,,0,0,0,,and then there's some where it's a valid name 
Dialogue: 0,0:35:57.42,0:36:01.20,csapp,,0,0,0,,but it doesn't have an IP address it doesn't have a host associated with a  question
Dialogue: 0,0:36:01.34,0:36:10.52,csapp,,0,0,0,,for example let's say I create my own servers how does that generate it oh 
Dialogue: 0,0:36:10.52,0:36:12.80,csapp,,0,0,0,,how do I get how do you get your own IP address 
Dialogue: 0,0:36:13.66,0:36:17.48,csapp,,0,0,0,,well all you have to beg borrow or you have to either borrow or buy them
Dialogue: 0,0:36:17.70,0:36:24.36,csapp,,0,0,0,,so for example at CMU there is some number of what they call statically allocated IP addresses 
Dialogue: 0,0:36:24.38,0:36:31.20,csapp,,0,0,0,,where it's just fixed assigned to that machine and you can register form and request them through computing services
Dialogue: 0,0:36:32.76,0:36:38.44,csapp,,0,0,0,, but most you don't have that most you get one that's I signed dynamically 
Dialogue: 0,0:36:38.52,0:36:43.42,csapp,,0,0,0,,so there's a pool of addresses that you basically they call them leasing 
Dialogue: 0,0:36:43.42,0:36:45.62,csapp,,0,0,0,,that you are assigned with for a while 
Dialogue: 0,0:36:46.26,0:36:49.92,csapp,,0,0,0,,and then but it could possibly be reassigned to someone else
Dialogue: 0,0:36:53.06,0:36:54.68,csapp,,0,0,0,,and that's part of the way it can manage
Dialogue: 0,0:36:55.30,0:36:57.54,csapp,,0,0,0,,you know somewhat limited set of IP addresses
Dialogue: 0,0:37:03.24,0:37:07.88,csapp,,0,0,0,,so the idea of like I said that the main
Dialogue: 0,0:37:15.02,0:37:19.50,csapp,,0,0,0,,a way we'll think about it is in terms of what's called TCP 
Dialogue: 0,0:37:20.18,0:37:22.36,csapp,,0,0,0,,and it says connection oriented protocol 
Dialogue: 0,0:37:22.36,0:37:27.42,csapp,,0,0,0,,where I establish a connection from one one host establishes a connection to another host
Dialogue: 0,0:37:28.18,0:37:34.52,csapp,,0,0,0,,and they they can communicate to each other sending arbitrarily long streams of bytes to each other 
Dialogue: 0,0:37:35.30,0:37:39.44,csapp,,0,0,0,,and so the connection is then two hosts that can talk to each other 
Dialogue: 0,0:37:39.78,0:37:42.86,csapp,,0,0,0,,and each of those endpoints is referred to as a socket 
Dialogue: 0,0:37:46.42,0:37:50.26,csapp,,0,0,0,,and so I can and a socket is both an IP address 
Dialogue: 0,0:37:51.24,0:37:52.82,csapp,,0,0,0,,and what's called a port number
Dialogue: 0,0:37:52.92,0:37:58.22,csapp,,0,0,0,,so there's a 16 by 16 bit number for every connection
Dialogue: 0,0:37:58.66,0:38:00.50,csapp,,0,0,0,, that's referred to as its port 
Dialogue: 0,0:38:00.96,0:38:04.98,csapp,,0,0,0,,and the reason for that is just because I'm talking to a particular machine 
Dialogue: 0,0:38:05.44,0:38:08.12,csapp,,0,0,0,,that that machine can support different services
Dialogue: 0,0:38:08.12,0:38:14.06,csapp,,0,0,0,, it can provide SSH connections it can provide FTP connections
Dialogue: 0,0:38:14.06,0:38:18.04,csapp,,0,0,0,, it can host a mail server it can host a web server 
Dialogue: 0,0:38:18.62,0:38:22.68,csapp,,0,0,0,,so a particular machine might have a multitude of different services 
Dialogue: 0,0:38:23.10,0:38:26.88,csapp,,0,0,0,,and so those are differentiated from each other with what are called port numbers 
Dialogue: 0,0:38:27.44,0:38:33.04,csapp,,0,0,0,,and similarly Isaac client might have connections to dozens of hosts going at any given time
Dialogue: 0,0:38:33.56,0:38:38.12,csapp,,0,0,0,,I'm cruising the web I'm you know doing all that different stuff 
Dialogue: 0,0:38:38.52,0:38:42.40,csapp,,0,0,0,,and that's all differentiated the client end that there's different ports 
Dialogue: 0,0:38:42.40,0:38:46.72,csapp,,0,0,0,,associated with your different programs that are running
Dialogue: 0,0:38:47.92,0:38:51.52,csapp,,0,0,0,,and so a port then is a 16-bit integer
Dialogue: 0,0:38:51.94,0:38:56.74,csapp,,0,0,0,, that identifies  which particular endpoint is
Dialogue: 0,0:38:56.88,0:39:00.40,csapp,,0,0,0,, being communicated with it either the client side of the server side 
Dialogue: 0,0:39:01.06,0:39:04.10,csapp,,0,0,0,,and typically at the client side these are assigned dynamically 
Dialogue: 0,0:39:04.50,0:39:06.80,csapp,,0,0,0,,and the referred to as ephemeral ports meaning
Dialogue: 0,0:39:06.80,0:39:11.96,csapp,,0,0,0,,they only are assigned for the limited duration that you have a connection with that 
Dialogue: 0,0:39:12.60,0:39:14.76,csapp,,0,0,0,,that you're maintaining that connection
Dialogue: 0,0:39:15.38,0:39:19.18,csapp,,0,0,0,, and then there has to be some way if I'm going to contact 
Dialogue: 0,0:39:19.50,0:39:26.38,csapp,,0,0,0,,and I want to know the DNS will tell me what the IP address is of say google.com 
Dialogue: 0,0:39:26.92,0:39:28.88,csapp,,0,0,0,,but I have to know that
Dialogue: 0,0:39:29.62,0:39:38.42,csapp,,0,0,0,,am i communicating with its web service which is port 80  or HTTP secure socket is a different report number
Dialogue: 0,0:39:38.80,0:39:40.84,csapp,,0,0,0,, so which service I'm asking for 
Dialogue: 0,0:39:41.30,0:39:44.38,csapp,,0,0,0,,and there's a standard list what are called well-known ports
Dialogue: 0,0:39:45.08,0:39:52.58,csapp,,0,0,0,, that are that I can contact at the server end to get the particular service I'm looking for 
Dialogue: 0,0:39:54.14,0:39:58.38,csapp,,0,0,0,,and those are assigned there's a big waste of port assignments
Dialogue: 0,0:40:00.20,0:40:05.50,csapp,,0,0,0,,and so the again that's part of the sort
Dialogue: 0,0:40:06.22,0:40:11.30,csapp,,0,0,0,,of a whole set of internet standards is the the identifiers for the different ports 
Dialogue: 0,0:40:11.88,0:40:15.70,csapp,,0,0,0,,what services those are and how those particular protocols work
Dialogue: 0,0:40:20.42,0:40:22.64,csapp,,0,0,0,,so when I have a connection then 
Dialogue: 0,0:40:28.38,0:40:32.06,csapp,,0,0,0,,as I mentioned I'll think of it as a connection then is as 
Dialogue: 0,0:40:32.88,0:40:39.70,csapp,,0,0,0,,a link between two machines based on some known port typically at the server end 
Dialogue: 0,0:40:40.12,0:40:44.24,csapp,,0,0,0,,and a dynamically assigned or ephemeral port assigned at the client in 
Dialogue: 0,0:40:45.00,0:40:50.90,csapp,,0,0,0,,and I can refer to then that connection then is identified by the combination of the hosts at the two ends 
Dialogue: 0,0:40:51.38,0:40:52.70,csapp,,0,0,0,,and the ports that they're using
Dialogue: 0,0:40:59.00,0:41:03.36,csapp,,0,0,0,,and in general then it's the job of the kernel 
Dialogue: 0,0:41:04.02,0:41:08.74,csapp,,0,0,0,,to differentiate the different connections that are coming into a machine 
Dialogue: 0,0:41:08.74,0:41:13.20,csapp,,0,0,0,,and figure out  which software which process to wake up 
Dialogue: 0,0:41:13.78,0:41:20.54,csapp,,0,0,0,, when a data you know when some data arrives from another machine 
Dialogue: 0,0:41:20.54,0:41:26.36,csapp,,0,0,0,, in which actual program running on that machine will make use of that data 
Dialogue: 0,0:41:26.78,0:41:35.56,csapp,,0,0,0,,and that's done by associating for each of the ports   a particular process executing program
Dialogue: 0,0:41:35.98,0:41:38.10,csapp,,0,0,0,, that's going to handle those particular requests 
Dialogue: 0,0:41:41.80,0:41:50.62,csapp,,0,0,0,, and it's totally possible for a client to be interacting with a single server over different ports 
Dialogue: 0,0:41:51.06,0:41:54.46,csapp,,0,0,0,,but those are considered to be different connections and 
Dialogue: 0,0:41:56.06,0:41:59.28,csapp,,0,0,0,,and so they don't really interfere with each other 
Dialogue: 0,0:42:05.08,0:42:10.44,csapp,,0,0,0,,so that's what I mentioned is this is what we refer to as sockets programming or the sockets interface
Dialogue: 0,0:42:11.94,0:42:17.42,csapp,,0,0,0,, it was developed sort of as the internet was evolving in the late 70s and early 80s
Dialogue: 0,0:42:20.48,0:42:24.34,csapp,,0,0,0,,so socket then as I said is certain logically one end 
Dialogue: 0,0:42:24.60,0:42:26.02,csapp,,0,0,0,,one of the two ends of a connection 
Dialogue: 0,0:42:27.12,0:42:31.88,csapp,,0,0,0,,and from an application point of view you'll see it as a file descriptor 
Dialogue: 0,0:42:32.52,0:42:37.22,csapp,,0,0,0,,just the low-level file stuff that you've already seen that you can do reading and writing from 
Dialogue: 0,0:42:37.96,0:42:38.34,csapp,,0,0,0,,um 
Dialogue: 0,0:42:40.10,0:42:47.40,csapp,,0,0,0,,and and so that that's the sort of mental model that is provided by the socket interface
Dialogue: 0,0:42:50.66,0:42:54.96,csapp,,0,0,0,,but it's a very different you know the actual implementation of network 
Dialogue: 0,0:42:55.46,0:42:57.10,csapp,,0,0,0,,when you write to a socket 
Dialogue: 0,0:42:57.56,0:43:01.20,csapp,,0,0,0,,it's firing up all kinds of network stuff whereas you write to a disk 
Dialogue: 0,0:43:01.84,0:43:03.82,csapp,,0,0,0,, it's operating a disk controller 
Dialogue: 0,0:43:03.88,0:43:08.10,csapp,,0,0,0,,so at the hardware level and even at the lower levels of software they're very different beasts
Dialogue: 0,0:43:08.72,0:43:11.64,csapp,,0,0,0,, but you as an application programmer see some commonality there
Dialogue: 0,0:43:12.90,0:43:15.84,csapp,,0,0,0,,okay so let's jump right into the API
Dialogue: 0,0:43:16.52,0:43:20.74,csapp,,0,0,0,,and again this is a place where you you'll wish you were programming in a language
Dialogue: 0,0:43:20.94,0:43:24.40,csapp,,0,0,0,, that had a type hierarchy 
Dialogue: 0,0:43:24.60,0:43:26.58,csapp,,0,0,0,,but you aren't you're programming in C
Dialogue: 0,0:43:29.22,0:43:34.26,csapp,,0,0,0,,there's a type there's a zillion Struck's that you kind of have to get familiar with 
Dialogue: 0,0:43:34.26,0:43:40.14,csapp,,0,0,0,,but one's called a sock adder and basically it's just a 16 bytes worth of stuff 
Dialogue: 0,0:43:40.96,0:43:45.20,csapp,,0,0,0,,where the the only thing that's special here is that the leading two bytes 
Dialogue: 0,0:43:45.84,0:43:48.24,csapp,,0,0,0,,a designate what type of socket this is 
Dialogue: 0,0:43:48.62,0:43:51.72,csapp,,0,0,0,,and particularly be different whether it's a TCP socket 
Dialogue: 0,0:43:52.10,0:43:57.06,csapp,,0,0,0,,an ipv6 socket a UDP socket 
Dialogue: 0,0:43:57.06,0:43:59.02,csapp,,0,0,0,,and all those will have different numbers 
Dialogue: 0,0:43:59.60,0:44:04.08,csapp,,0,0,0,,a different constant in there that tells you which type of socket it is 
Dialogue: 0,0:44:04.58,0:44:10.08,csapp,,0,0,0,,and then the high level the sockets in a lot of the programs don't need to know 
Dialogue: 0,0:44:10.46,0:44:12.60,csapp,,0,0,0,,you know which type of connection this is 
Dialogue: 0,0:44:12.72,0:44:16.58,csapp,,0,0,0,,they can just deal with they basically call other software to deal with that
Dialogue: 0,0:44:17.78,0:44:20.34,csapp,,0,0,0,,so that's why it's referred to as being families specific 
Dialogue: 0,0:44:22.06,0:44:28.50,csapp,,0,0,0,,and then the socket stuff isn't even necessarily referred to the internet the capital I internet 
Dialogue: 0,0:44:29.10,0:44:34.02,csapp,,0,0,0,,and so there's a more specific one called a socket or underscore in 
Dialogue: 0,0:44:34.98,0:44:39.42,csapp,,0,0,0,,that is used for ipv4 sockets
Dialogue: 0,0:44:42.22,0:44:43.52,csapp,,0,0,0,,well not ipv6 
Dialogue: 0,0:44:43.58,0:44:49.22,csapp,,0,0,0,,and so in particular it fills in fields one is called the port which as I mentioned is 16 bits 
Dialogue: 0,0:44:49.96,0:44:51.92,csapp,,0,0,0,, and then the IP address
Dialogue: 0,0:44:52.54,0:44:56.16,csapp,,0,0,0,, the four byte IP address both of which are in 
Dialogue: 0,0:44:57.04,0:45:00.82,csapp,,0,0,0,,even if you're running the software on a x86 machine
Dialogue: 0,0:45:00.82,0:45:03.56,csapp,,0,0,0,,these should be in big endian order 
Dialogue: 0,0:45:05.16,0:45:08.86,csapp,,0,0,0,,and you'll see that this is what I mean that this is sort of a
Dialogue: 0,0:45:09.16,0:45:13.38,csapp,,0,0,0,, C's version of subtyping if you know something like C++ or Java 
Dialogue: 0,0:45:13.58,0:45:16.56,csapp,,0,0,0,,or you know a language with type inheritance 
Dialogue: 0,0:45:17.28,0:45:25.48,csapp,,0,0,0,,that you can think of it as a sock adder in a sort of a subclass of a sock adder 
Dialogue: 0,0:45:25.90,0:45:28.68,csapp,,0,0,0,,right it has more information it's compatible with 
Dialogue: 0,0:45:28.74,0:45:32.12,csapp,,0,0,0,,but has more information than a socket 
Dialogue: 0,0:45:33.56,0:45:38.00,csapp,,0,0,0,,and then there's another type of for ipv6 has a different kind of 
Dialogue: 0,0:45:38.42,0:45:41.14,csapp,,0,0,0,,struck that they fill in for its information 
Dialogue: 0,0:45:42.36,0:45:46.38,csapp,,0,0,0,,and then they they Pat it out with eight bytes of zeros 
Dialogue: 0,0:45:47.04,0:45:50.48,csapp,,0,0,0,,just because this particular protocol doesn't require the full 16 bytes
Dialogue: 0,0:45:53.92,0:45:58.46,csapp,,0,0,0,, okay so this is sort of what it looks like to operate a full-blown
Dialogue: 0,0:45:59.50,0:46:03.42,csapp,,0,0,0,,client-server system from a programmers perspective 
Dialogue: 0,0:46:03.94,0:46:09.96,csapp,,0,0,0,,and we're going to for the rest of today and all of Thursday  go through all these steps 
Dialogue: 0,0:46:10.36,0:46:15.84,csapp,,0,0,0,,and you as a programmer are actually going to have to understand each of these steps 
Dialogue: 0,0:46:16.00,0:46:19.56,csapp,,0,0,0,,what they do what they mean and how to use them
Dialogue: 0,0:46:19.82,0:46:23.42,csapp,,0,0,0,,the good news is there's some pretty standard patterns here 
Dialogue: 0,0:46:23.44,0:46:26.74,csapp,,0,0,0,,and so you can often grab some existing code say out of the book 
Dialogue: 0,0:46:27.82,0:46:31.98,csapp,,0,0,0,,to use that will make this not as painful  as it might look 
Dialogue: 0,0:46:33.76,0:46:37.18,csapp,,0,0,0,,so but the overall idea of this this picture then is 
Dialogue: 0,0:46:39.28,0:46:41.52,csapp,,0,0,0,, sorry kick it used to fit my remote doesn't work 
Dialogue: 0,0:46:45.16,0:46:49.96,csapp,,0,0,0,,on the the right hand side refers to the steps that the server has to go through 
Dialogue: 0,0:46:50.32,0:46:52.54,csapp,,0,0,0,,and the left hand side is what the client does 
Dialogue: 0,0:46:53.14,0:46:57.68,csapp,,0,0,0,,so the upper right is what it takes to set up a server 
Dialogue: 0,0:46:58.00,0:47:01.60,csapp,,0,0,0,,that is then a program that's running there
Dialogue: 0,0:47:02.04,0:47:07.34,csapp,,0,0,0,,ready to receive connections  from a client and perform various services 
Dialogue: 0,0:47:09.48,0:47:15.76,csapp,,0,0,0,,and so obviously before the client can do anything the server has to exist 
Dialogue: 0,0:47:15.86,0:47:18.16,csapp,,0,0,0,,so that has to be the first step in setting things up 
Dialogue: 0,0:47:19.64,0:47:25.60,csapp,,0,0,0,, and then we have to we'll fire up a cert a client that will make use of this service 
Dialogue: 0,0:47:26.90,0:47:29.14,csapp,,0,0,0,,and then there'll be what's referred to as a session 
Dialogue: 0,0:47:29.16,0:47:33.68,csapp,,0,0,0,,meaning a kind of back and forth communication between the client and server 
Dialogue: 0,0:47:33.68,0:47:38.08,csapp,,0,0,0,,doing whatever they're going to do this is not specific to any particular application 
Dialogue: 0,0:47:38.76,0:47:44.76,csapp,,0,0,0,,and like I said it will involve you'll see Rio underscore remember those who are reliable i/o
Dialogue: 0,0:47:45.32,0:47:48.66,csapp,,0,0,0,, functions we talked about as part of the UNIX i/o 
Dialogue: 0,0:47:49.64,0:47:59.66,csapp,,0,0,0,,so it's a way to read and write in a room and and handle some of the quirks of low-level i/o 
Dialogue: 0,0:47:59.68,0:48:03.25,csapp,,0,0,0,,but basically this is sending and receiving messages over the Internet
Dialogue: 0,0:48:04.76,0:48:06.12,csapp,,0,0,0,,and then once that's done
Dialogue: 0,0:48:07.30,0:48:12.22,csapp,,0,0,0,, typically then the client will close its connection sort of equivalent of hanging up its phone 
Dialogue: 0,0:48:13.02,0:48:14.70,csapp,,0,0,0,,and say ok I'm done
Dialogue: 0,0:48:15.12,0:48:21.56,csapp,,0,0,0,, and then sometime later or maybe never depending on what kind of web you know service this is
Dialogue: 0,0:48:22.10,0:48:24.54,csapp,,0,0,0,, if the the server wants to shut down
Dialogue: 0,0:48:24.54,0:48:29.90,csapp,,0,0,0,, it has its own a collection of calls that it makes to stop that service
Dialogue: 0,0:48:31.22,0:48:36.64,csapp,,0,0,0,,so anyways just to kind of give you the landscape of what this picture means
Dialogue: 0,0:48:41.08,0:48:43.78,csapp,,0,0,0,,so we're going to sort of jump into 
Dialogue: 0,0:48:45.21,0:48:48.30,csapp,,0,0,0,,the middle this the top level up and we'll focus 
Dialogue: 0,0:48:52.06,0:48:53.84,csapp,,0,0,0,,actually which will we focus on
Dialogue: 0,0:48:54.42,0:48:56.90,csapp,,0,0,0,,well we'll talk to some level in parallel 
Dialogue: 0,0:48:58.26,0:49:03.12,csapp,,0,0,0,,because there's a lot of commonality as you can see between what goes on with the server and what goes on with the client 
Dialogue: 0,0:49:07.88,0:49:12.64,csapp,,0,0,0,,yeah and so actually the top level call this one called get adder info is the way that 
Dialogue: 0,0:49:13.16,0:49:14.34,csapp,,0,0,0,,it sort of 
Dialogue: 0,0:49:18.14,0:49:25.90,csapp,,0,0,0,,initiate things and actually does the the lookup to map from a domain name to a IP address 
Dialogue: 0,0:49:26.52,0:49:27.76,csapp,,0,0,0,,so we'll cover that later
Dialogue: 0,0:49:28.28,0:49:35.14,csapp,,0,0,0,,so the first step in on either side then and creating a connection is a call to a function called socket 
Dialogue: 0,0:49:37.76,0:49:42.82,csapp,,0,0,0,,and the reason I wanted to Blackboard was to help you keep track of this
Dialogue: 0,0:50:05.84,0:50:08.96,csapp,,0,0,0,,so the first call is a doesn't do much
Dialogue: 0,0:50:09.36,0:50:12.84,csapp,,0,0,0,,oh and that's why the the function call is socket 
Dialogue: 0,0:50:13.38,0:50:14.48,csapp,,0,0,0,,but the 
Dialogue: 0,0:50:17.72,0:50:19.52,csapp,,0,0,0,,it only happens within the application 
Dialogue: 0,0:50:19.52,0:50:24.64,csapp,,0,0,0,,it doesn't make a use of any part of the operating system doesn't send anything over the network
Dialogue: 0,0:50:25.12,0:50:28.86,csapp,,0,0,0,, and the idea is to basically say hey I want to create a socket 
Dialogue: 0,0:50:31.08,0:50:33.66,csapp,,0,0,0,, and it's given three arguments 
Dialogue: 0,0:50:34.18,0:50:37.10,csapp,,0,0,0,,the first two which is AF underscore I net 
Dialogue: 0,0:50:37.14,0:50:44.24,csapp,,0,0,0,, all these upper case on names are constants that are built in or included in the various 
Dialogue: 0,0:50:44.66,0:50:47.18,csapp,,0,0,0,,uh .h files that you include in writing this code
Dialogue: 0,0:50:47.64,0:50:53.62,csapp,,0,0,0,,and AF underscore I nut just means it's a I P V four so 32-bit addresses 
Dialogue: 0,0:50:54.66,0:50:58.52,csapp,,0,0,0,,and then the second parameter is says you want a sock stream 
Dialogue: 0,0:50:58.92,0:51:01.14,csapp,,0,0,0,,and that refers to a TCP connection
Dialogue: 0,0:51:01.18,0:51:07.68,csapp,,0,0,0,, it's referred to as a stream connection because like I said you get to send as many bytes as you like a stream of bytes 
Dialogue: 0,0:51:08.24,0:51:09.82,csapp,,0,0,0,,to in either direction 
Dialogue: 0,0:51:10.94,0:51:12.08,csapp,,0,0,0,,and then
Dialogue: 0,0:51:15.94,0:51:18.86,csapp,,0,0,0,,zero protocol 
Dialogue: 0,0:51:18.92,0:51:22.36,csapp,,0,0,0,,well I guess it must not be very interesting because I set it to zero 
Dialogue: 0,0:51:23.32,0:51:26.16,csapp,,0,0,0,,so we don't need to do anything in this particular case
Dialogue: 0,0:51:27.14,0:51:29.02,csapp,,0,0,0,, there are man pages on this by the way which 
Dialogue: 0,0:51:29.72,0:51:33.68,csapp,,0,0,0,,if you just tried to learn all sockets programming by reading men pages you'd go crazy 
Dialogue: 0,0:51:33.68,0:51:37.28,csapp,,0,0,0,,but once you kind of have the idea of it the man pages are pretty useful 
Dialogue: 0,0:51:39.82,0:51:41.48,csapp,,0,0,0,,and then the next part 
Dialogue: 0,0:51:42.82,0:51:48.16,csapp,,0,0,0,,you'll see we're looking only now on the server side is called bind
Dialogue: 0,0:51:50.24,0:51:51.12,csapp,,0,0,0,,and
Dialogue: 0,0:51:58.64,0:52:02.60,csapp,,0,0,0,,what bind does then is that specific then to a server 
Dialogue: 0,0:52:03.32,0:52:07.08,csapp,,0,0,0,,and now this is a make this interfaces to the kernel 
Dialogue: 0,0:52:07.10,0:52:10.38,csapp,,0,0,0,,it says I want to
Dialogue: 0,0:52:20.65,0:52:23.02,csapp,,0,0,0,,designate which IP address 
Dialogue: 0,0:52:24.46,0:52:27.92,csapp,,0,0,0,,and let me just so I'm going to cheat a little bit
Dialogue: 0,0:52:29.10,0:52:32.86,csapp,,0,0,0,,and let me by making sure I don't say anything that's not true
Dialogue: 0,0:52:34.80,0:52:36.54,csapp,,0,0,0,,yeah I'm right sorry 
Dialogue: 0,0:52:37.14,0:52:38.36,csapp,,0,0,0,,I just want to make sure 
Dialogue: 0,0:52:39.12,0:52:40.62,csapp,,0,0,0,,bind actually 
Dialogue: 0,0:52:43.72,0:52:44.42,csapp,,0,0,0,,tells you 
Dialogue: 0,0:52:47.20,0:52:48.34,csapp,,0,0,0,,oh excuse me 
Dialogue: 0,0:52:48.92,0:52:52.62,csapp,,0,0,0,,you'll see that a socket the call to socket returns an int 
Dialogue: 0,0:52:53.30,0:52:57.28,csapp,,0,0,0,,but it's what it's returning is a file descriptor remember we said that 
Dialogue: 0,0:52:57.82,0:53:04.90,csapp,,0,0,0,,if you refer to a file a low-level file just by an integer ID typically a small integer value 
Dialogue: 0,0:53:05.32,0:53:08.74,csapp,,0,0,0,,there's some standard ones for standard in standard out standard error
Dialogue: 0,0:53:09.08,0:53:11.30,csapp,,0,0,0,, and then beyond that they're just assigned incrementally
Dialogue: 0,0:53:12.02,0:53:14.18,csapp,,0,0,0,, so socket will return a number 
Dialogue: 0,0:53:14.72,0:53:18.48,csapp,,0,0,0,,that you then refer used to refer to this as a file 
Dialogue: 0,0:53:20.48,0:53:27.44,csapp,,0,0,0,, so bind then you've pass in that the name of  your socket file descriptor 
Dialogue: 0,0:53:27.92,0:53:33.60,csapp,,0,0,0,,and you provide a whether is a socket adder ends
Dialogue: 0,0:53:38.78,0:53:41.62,csapp,,0,0,0,,ah and si I'm using the the notation 
Dialogue: 0,0:53:42.12,0:53:46.50,csapp,,0,0,0,, si as a shortcut for sock adder struct sock header 
Dialogue: 0,0:53:49.56,0:53:52.54,csapp,,0,0,0,,and then you have to also say what the length of the address is
Dialogue: 0,0:53:52.62,0:53:55.44,csapp,,0,0,0,, so in the case of ipv4 that would be four 
Dialogue: 0,0:53:56.42,0:53:59.38,csapp,,0,0,0,, but you don't usually use that number directly there's a 
Dialogue: 0,0:54:00.00,0:54:04.24,csapp,,0,0,0,,we'll talk about it but that top-level call called gedit or adder info
Dialogue: 0,0:54:04.24,0:54:07.60,csapp,,0,0,0,, as a relatively new API that was created and is 
Dialogue: 0,0:54:08.14,0:54:11.02,csapp,,0,0,0,,in this addition to the book but not in previous ones
Dialogue: 0,0:54:11.40,0:54:14.28,csapp,,0,0,0,,  is that become the now the standard way that you get all the 
Dialogue: 0,0:54:14.38,0:54:17.44,csapp,,0,0,0,, parameters that you're supposed to pass into all these different calls 
Dialogue: 0,0:54:18.02,0:54:25.44,csapp,,0,0,0,,and the idea of it then is it's a pretty small adjustment to then write code that's good for either ipv4 or ipv6 
Dialogue: 0,0:54:28.48,0:54:33.60,csapp,,0,0,0,, so you don't normally give the actual number  from that you get it from another place and passage it
Dialogue: 0,0:54:38.70,0:54:40.02,csapp,,0,0,0,,so binding then 
Dialogue: 0,0:54:44.74,0:54:47.66,csapp,,0,0,0,,is it's a kernel call 
Dialogue: 0,0:55:03.76,0:55:06.00,csapp,,0,0,0,,that designates which particular service 
Dialogue: 0,0:55:06.68,0:55:09.36,csapp,,0,0,0,,this program is going to be hosting 
Dialogue: 0,0:55:10.43,0:55:13.66,csapp,,0,0,0,,but which will be the server for and that's given by its port number
Dialogue: 0,0:55:23.88,0:55:26.54,csapp,,0,0,0,,and then the next step is to 
Dialogue: 0,0:55:27.66,0:55:30.68,csapp,,0,0,0,,to listen and that's just a call that says
Dialogue: 0,0:55:41.02,0:55:47.48,csapp,,0,0,0,, ah that will now convert this socket to a listening socket which you need as a server 
Dialogue: 0,0:55:55.44,0:55:58.56,csapp,,0,0,0,,so it's a way of telling the kernel that this will be 
Dialogue: 0,0:56:00.46,0:56:01.60,csapp,,0,0,0,, it will be a server SAR 
Dialogue: 0,0:56:07.80,0:56:11.80,csapp,,0,0,0,,so obviously bind and listen are related ideas 
Dialogue: 0,0:56:11.94,0:56:18.86,csapp,,0,0,0,,but you have to do both steps and in that particular order to create a listening socket or one for a server 
Dialogue: 0,0:56:22.80,0:56:27.24,csapp,,0,0,0,,and then the final part of that to operate us is to say except
Dialogue: 0,0:56:33.46,0:56:34.24,csapp,,0,0,0,,and
Dialogue: 0,0:56:39.68,0:56:45.72,csapp,,0,0,0,, oh that means okay now we've established this now I'm actually ready to receive phone calls
Dialogue: 0,0:56:46.24,0:56:49.46,csapp,,0,0,0,,  is essentially what it says is this is the final step to say 
Dialogue: 0,0:56:50.08,0:56:53.68,csapp,,0,0,0,,okay this one's ready to accept connection requests 
Dialogue: 0,0:56:54.88,0:56:56.58,csapp,,0,0,0,,it has a similar 
Dialogue: 0,0:57:03.00,0:57:05.28,csapp,,0,0,0,,set of arguments to sock it is sock it 
Dialogue: 0,0:57:06.34,0:57:06.94,csapp,,0,0,0,,but slight difference 
Dialogue: 0,0:57:07.32,0:57:09.96,csapp,,0,0,0,,and now the interesting thing is acceptable return
Dialogue: 0,0:57:10.38,0:57:12.74,csapp,,0,0,0,,yet another file descriptor 
Dialogue: 0,0:57:14.98,0:57:18.60,csapp,,0,0,0,,I'll so the first file descriptor is the sort of generic 
Dialogue: 0,0:57:21.00,0:57:23.98,csapp,,0,0,0,,accept and base basically except we'll 
Dialogue: 0,0:57:24.54,0:57:28.12,csapp,,0,0,0,,just hang there and wait until some client makes a connection 
Dialogue: 0,0:57:29.10,0:57:33.86,csapp,,0,0,0,,and when it does then it will set up a new socket
Dialogue: 0,0:57:35.98,0:57:42.82,csapp,,0,0,0,,and a new with a new file descriptor that then the server communicates to the client  via that one 
Dialogue: 0,0:57:42.90,0:57:46.24,csapp,,0,0,0,,and I'll talk about why it's a different file descriptor in just a second 
Dialogue: 0,0:57:47.88,0:57:54.28,csapp,,0,0,0,,okay over on the client side goes through  similar steps of socket 
Dialogue: 0,0:57:54.28,0:57:58.18,csapp,,0,0,0,,but it doesn't have to bind or listen or accept because this is a client 
Dialogue: 0,0:57:58.72,0:58:02.10,csapp,,0,0,0,,and instead what it does is it it makes a call to connect
Dialogue: 0,0:58:06.14,0:58:07.40,csapp,,0,0,0,,so let me finish this off 
Dialogue: 0,0:58:22.48,0:58:24.82,csapp,,0,0,0,,so these are all on this the server side 
Dialogue: 0,0:58:32.42,0:58:33.80,csapp,,0,0,0,,and on the client side
Dialogue: 0,0:58:37.00,0:58:39.22,csapp,,0,0,0,, it will make a call to connect 
Dialogue: 0,0:58:43.98,0:58:49.38,csapp,,0,0,0,,from a client side is to set up a connection to server
Dialogue: 0,0:59:05.84,0:59:06.84,csapp,,0,0,0,,and so
Dialogue: 0,0:59:16.30,0:59:20.44,csapp,,0,0,0,,it's arguments it's a little easier to understand how kynect works 
Dialogue: 0,0:59:21.84,0:59:22.78,csapp,,0,0,0,,so in particular 
Dialogue: 0,0:59:24.32,0:59:28.68,csapp,,0,0,0,,the call to socket that was made beforehand returns a file descriptor 
Dialogue: 0,0:59:29.16,0:59:34.30,csapp,,0,0,0,,and what this says is I want to on that particular using that particular socket 
Dialogue: 0,0:59:34.80,0:59:39.66,csapp,,0,0,0,,connect to this gives a combination of an address and a port number 
Dialogue: 0,0:59:40.58,0:59:44.74,csapp,,0,0,0,,and it has to give this address length which I said like I said as before
Dialogue: 0,0:59:44.74,0:59:50.26,csapp,,0,0,0,, it's usually that number is filled in using the return value of of get adder info 
Dialogue: 0,0:59:52.94,0:59:55.72,csapp,,0,0,0,,but that's sort of the equivalent of poisoning the Coleman 
Dialogue: 0,0:59:57.42,1:00:00.14,csapp,,0,0,0,,and it returns just a code which is 
Dialogue: 0,1:00:00.98,1:00:02.94,csapp,,0,0,0,,whether the connection was successful or not
Dialogue: 0,1:00:06.40,1:00:10.44,csapp,,0,0,0,,so let me just talk about these different ports and 
Dialogue: 0,1:00:11.02,1:00:12.68,csapp,,0,0,0,,what it all means when you setup a connection 
Dialogue: 0,1:00:13.32,1:00:14.64,csapp,,0,0,0,,so when the
Dialogue: 0,1:00:15.94,1:00:18.66,csapp,,0,0,0,,the server went through bind and listen
Dialogue: 0,1:00:19.84,1:00:22.64,csapp,,0,0,0,,it created a listening port from that
Dialogue: 0,1:00:23.60,1:00:26.94,csapp,,0,0,0,,which is the one that it's listening for connection requests on 
Dialogue: 0,1:00:27.94,1:00:36.82,csapp,,0,0,0,,and then the client when it called socket it was given a particular file descriptor for that that socket 
Dialogue: 0,1:00:37.94,1:00:39.88,csapp,,0,0,0,,and it sends out a connection request 
Dialogue: 0,1:00:40.74,1:00:42.78,csapp,,0,0,0,,that goes out over the network
Dialogue: 0,1:00:43.46,1:00:49.26,csapp,,0,0,0,, and lands at the server and then the kernel hands that off to the
Dialogue: 0,1:00:49.92,1:00:53.06,csapp,,0,0,0,,the the program that's running on that particular port
Dialogue: 0,1:00:53.82,1:01:00.96,csapp,,0,0,0,, and hands it off to the that call will be handled by the accept 
Dialogue: 0,1:01:02.02,1:01:04.40,csapp,,0,0,0,,call to accept by the server 
Dialogue: 0,1:01:06.44,1:01:12.38,csapp,,0,0,0,,and then as I mentioned except actually returns a new file descriptor 
Dialogue: 0,1:01:12.90,1:01:18.84,csapp,,0,0,0,,which the server will then use as its connection point to this particular client 
Dialogue: 0,1:01:19.50,1:01:23.58,csapp,,0,0,0,,and the theory of that is you want to be able to in general 
Dialogue: 0,1:01:24.10,1:01:27.94,csapp,,0,0,0,,as a server be handling multiple clients at the same time 
Dialogue: 0,1:01:28.48,1:01:35.02,csapp,,0,0,0,,but if I'm communicating with  with Google or Amazon 
Dialogue: 0,1:01:36.76,1:01:39.00,csapp,,0,0,0,,you should be able to do so at the same time 
Dialogue: 0,1:01:39.10,1:01:43.96,csapp,,0,0,0,,so you want a possibility of from a single host to be able to serve multiple clients 
Dialogue: 0,1:01:44.08,1:01:51.84,csapp,,0,0,0,,and that's why they're all assigned different file descriptors at the server end for that particular connection 
Dialogue: 0,1:01:52.22,1:01:57.88,csapp,,0,0,0,,so you can think of it as the listening file descriptor is just listening for incoming requests for connections 
Dialogue: 0,1:01:58.50,1:02:01.70,csapp,,0,0,0,, but once it sets up a session and communicates back and forth
Dialogue: 0,1:02:02.30,1:02:08.12,csapp,,0,0,0,, those are going through different ports on the server side of things or different file descriptors I'm sorry 
Dialogue: 0,1:02:08.96,1:02:10.70,csapp,,0,0,0,,same port different file descriptors 
Dialogue: 0,1:02:11.42,1:02:14.56,csapp,,0,0,0,,from the software that's running on the server
Dialogue: 0,1:02:22.44,1:02:27.80,csapp,,0,0,0,,okay and then during the actual communication then as I mentioned it uses reads and writes 
Dialogue: 0,1:02:27.90,1:02:30.90,csapp,,0,0,0,,as a way to send and receive messages 
Dialogue: 0,1:02:31.28,1:02:34.02,csapp,,0,0,0,,and that goes on for as long as 
Dialogue: 0,1:02:34.70,1:02:41.60,csapp,,0,0,0,,you know and according to whatever lo-ove particular protocol is being supported by this application 
Dialogue: 0,1:02:46.14,1:02:47.10,csapp,,0,0,0,,and then 
Dialogue: 0,1:02:49.44,1:02:51.60,csapp,,0,0,0,,in the end then when the client the 
Dialogue: 0,1:02:52.14,1:02:54.60,csapp,,0,0,0,,client is done it causes a request 
Dialogue: 0,1:02:55.28,1:03:01.62,csapp,,0,0,0,,and what that looks like from the server end is it tries to read from a file
Dialogue: 0,1:03:01.94,1:03:04.68,csapp,,0,0,0,, and it receives an end of file a signal instead
Dialogue: 0,1:03:07.18,1:03:11.76,csapp,,0,0,0,,and that tells the server okay this particular connection is is gone
Dialogue: 0,1:03:12.50,1:03:13.18,csapp,,0,0,0,, and so
Dialogue: 0,1:03:14.38,1:03:20.78,csapp,,0,0,0,, now it will close that particular one as this picture shows here
Dialogue: 0,1:03:22.50,1:03:25.70,csapp,,0,0,0,,  potentially the server could loop back around 
Dialogue: 0,1:03:26.90,1:03:30.22,csapp,,0,0,0,,and accept a connection from another program and in fact 
Dialogue: 0,1:03:30.80,1:03:35.34,csapp,,0,0,0,, this can be done this is what we call a serial or a knitter aware 
Dialogue: 0,1:03:37.70,1:03:42.28,csapp,,0,0,0,,it can only manage one connection request at a time 
Dialogue: 0,1:03:42.84,1:03:47.52,csapp,,0,0,0,,and when we get later in the course and we stock talk about multi-threading
Dialogue: 0,1:03:48.10,1:03:53.44,csapp,,0,0,0,,we'll be able to set it up so this thing can start accepting requests for another connection 
Dialogue: 0,1:03:53.84,1:03:57.08,csapp,,0,0,0,,even while it's handling one particular client
Dialogue: 0,1:03:58.52,1:04:02.46,csapp,,0,0,0,, but anyways what it will look like is the server will read 
Dialogue: 0,1:04:02.60,1:04:06.48,csapp,,0,0,0,,the attempt to read that we'll get an end of file it will close that particular connection 
Dialogue: 0,1:04:06.98,1:04:10.26,csapp,,0,0,0,,and it will go back and it will accept a new connection from a new client
Dialogue: 0,1:04:13.54,1:04:19.80,csapp,,0,0,0,,okay I'm going to jump ahead and actually start talking about some slides from 
Dialogue: 0,1:04:20.44,1:04:25.58,csapp,,0,0,0,,that we're if you look online they're actually from a Thursday's lecture  because 
Dialogue: 0,1:04:26.06,1:04:29.28,csapp,,0,0,0,,there's a lot of ground to cover in that lecture and I'd like to get a little head start 
Dialogue: 0,1:04:31.66,1:04:33.36,csapp,,0,0,0,, so I mentioned this 
Dialogue: 0,1:04:34.48,1:04:38.54,csapp,,0,0,0,,up this function called get a door info which is sort of the modern 
Dialogue: 0,1:04:39.44,1:04:43.48,csapp,,0,0,0,,way in C at least to find information about
Dialogue: 0,1:04:43.86,1:04:47.72,csapp,,0,0,0,,that deals with all the funkiness of host names host addresses 
Dialogue: 0,1:04:48.14,1:04:52.76,csapp,,0,0,0,,all the conventions about ports and some of these various structures and things like that
Dialogue: 0,1:04:54.02,1:04:57.18,csapp,,0,0,0,,and the advantage of doing it this way instead of the old way
Dialogue: 0,1:04:57.78,1:05:04.82,csapp,,0,0,0,, is first of all now it sort of unifies ipv4 and ipv6 have very similar looking interfaces 
Dialogue: 0,1:05:05.24,1:05:08.02,csapp,,0,0,0,,and it's fairly easy to write code that can handle either 
Dialogue: 0,1:05:08.56,1:05:14.36,csapp,,0,0,0,,and the other was there is problems with these old ones that they were designed in an era before multi-threading 
Dialogue: 0,1:05:15.06,1:05:18.42,csapp,,0,0,0,,and so they have various statically allocated buffers 
Dialogue: 0,1:05:18.44,1:05:24.74,csapp,,0,0,0,,which gave a lot of bad conditions that you had to watch out for in writing code 
Dialogue: 0,1:05:24.74,1:05:27.46,csapp,,0,0,0,,and we're prone to errors of various sorts
Dialogue: 0,1:05:28.04,1:05:33.96,csapp,,0,0,0,, and so this new new format it's actually harder to use in many levels 
Dialogue: 0,1:05:35.86,1:05:39.04,csapp,,0,0,0,,because it can't hide away as many details as it used to
Dialogue: 0,1:05:39.04,1:05:42.16,csapp,,0,0,0,,but it has the advantage it works better in a multi-threaded environment 
Dialogue: 0,1:05:43.12,1:05:49.86,csapp,,0,0,0,,the other thing that makes it hard is it's trying to be sort of the kitchen sink of of protocol managers 
Dialogue: 0,1:05:49.92,1:05:53.26,csapp,,0,0,0,, and that makes it a little bit nasty and messy 
Dialogue: 0,1:05:54.34,1:05:59.22,csapp,,0,0,0,, and so we're only going to sort of focus in on the parts that we really need to make use of for this course
Dialogue: 0,1:06:02.92,1:06:05.96,csapp,,0,0,0,,so in particular there's this function called get adder info 
Dialogue: 0,1:06:06.68,1:06:11.14,csapp,,0,0,0,,where the information you're passing is a host
Dialogue: 0,1:06:11.94,1:06:19.32,csapp,,0,0,0,,which can be either a it's a string as it shows most these are care stars are actual real strings not fake strings
Dialogue: 0,1:06:20.02,1:06:22.88,csapp,,0,0,0,,it used to be back in the old days 
Dialogue: 0,1:06:23.30,1:06:26.78,csapp,,0,0,0,,you use care stars of generic pointer because there weren't void stars
Dialogue: 0,1:06:26.88,1:06:28.24,csapp,,0,0,0,, but these are actual strings 
Dialogue: 0,1:06:28.80,1:06:34.42,csapp,,0,0,0,,so you give the name like the the domain name of a host or you can give the dotted decimal name
Dialogue: 0,1:06:34.94,1:06:41.44,csapp,,0,0,0,,but written as you know sequence of characters one to eight dot so forth 
Dialogue: 0,1:06:42.24,1:06:48.12,csapp,,0,0,0,,a service for example that this is ipv4 T TCP service
Dialogue: 0,1:06:48.56,1:06:54.24,csapp,,0,0,0,, some other information that that's associated with this particular connection they refer to as hints
Dialogue: 0,1:06:54.28,1:06:57.66,csapp,,0,0,0,,because again this is trying to be a very generic looking call 
Dialogue: 0,1:06:58.16,1:07:05.62,csapp,,0,0,0,,and then you pass it in a pointer and it will fill in and return back a pointer to a data structure 
Dialogue: 0,1:07:05.94,1:07:09.42,csapp,,0,0,0,,which is essentially the way it's returning results back to you 
Dialogue: 0,1:07:10.24,1:07:17.08,csapp,,0,0,0,,and then associated with that is a call called free adder info that will then deallocate this space
Dialogue: 0,1:07:17.82,1:07:21.96,csapp,,0,0,0,, that's used by this data structure from the result 
Dialogue: 0,1:07:22.62,1:07:27.32,csapp,,0,0,0,,and then there's one called get adder info string error 
Dialogue: 0,1:07:27.68,1:07:31.84,csapp,,0,0,0,,which lets you interpret the various error codes that get created by this 
Dialogue: 0,1:07:32.34,1:07:34.28,csapp,,0,0,0,,routine of the value that it returns 
Dialogue: 0,1:07:36.14,1:07:36.82,csapp,,0,0,0,,so 
Dialogue: 0,1:07:37.98,1:07:40.48,csapp,,0,0,0,,let's just look a little about this and 
Dialogue: 0,1:07:41.82,1:07:46.44,csapp,,0,0,0,,so the result that's returned by get a door info is a link twist 
Dialogue: 0,1:07:48.40,1:07:52.74,csapp,,0,0,0,,oh that is null terminated just like most wink lists are 
Dialogue: 0,1:07:53.38,1:07:59.72,csapp,,0,0,0,,where it gives some combination of the name 
Dialogue: 0,1:08:00.60,1:08:02.38,csapp,,0,0,0,,of this particular 
Dialogue: 0,1:08:05.68,1:08:10.20,csapp,,0,0,0,,some naming information for the the first top-level one is the 
Dialogue: 0,1:08:10.38,1:08:15.38,csapp,,0,0,0,,what I showed you the canonical name for this particular IP address
Dialogue: 0,1:08:16.54,1:08:20.74,csapp,,0,0,0,, and then it gives some address information which is 
Dialogue: 0,1:08:21.60,1:08:27.92,csapp,,0,0,0,,you know an ipv4 them that will encode the IP address 
Dialogue: 0,1:08:28.40,1:08:31.16,csapp,,0,0,0,,and as a next pointer to change this link voice together 
Dialogue: 0,1:08:31.74,1:08:35.50,csapp,,0,0,0,,and so this is actually one interesting thing about this is it sort of x
Dialogue: 0,1:08:35.94,1:08:43.56,csapp,,0,0,0,,this link voice together  many too many mapping potentially of of names
Dialogue: 0,1:08:43.58,1:08:46.40,csapp,,0,0,0,, so if I give for example google.com 
Dialogue: 0,1:08:46.86,1:08:48.92,csapp,,0,0,0,,it will return a link twist of all 
Dialogue: 0,1:08:49.50,1:08:54.38,csapp,,0,0,0,,however many or you saw with Twitter it was returning about four different addresses 
Dialogue: 0,1:08:54.40,1:08:59.60,csapp,,0,0,0,,so this will return actually five missed entries the first will be the canonical name 
Dialogue: 0,1:08:59.98,1:09:03.58,csapp,,0,0,0,,and then it will give each of the four IP addresses
Dialogue: 0,1:09:04.14,1:09:07.06,csapp,,0,0,0,,that's relevant at this particular time
Dialogue: 0,1:09:08.64,1:09:10.68,csapp,,0,0,0,,and then you as a programmer 
Dialogue: 0,1:09:11.26,1:09:15.34,csapp,,0,0,0,,then sort of walk this list you step down this list and typically 
Dialogue: 0,1:09:15.90,1:09:18.74,csapp,,0,0,0,, try to use each address one after the other 
Dialogue: 0,1:09:19.18,1:09:24.98,csapp,,0,0,0,,and if you fail on one then you try the next and try the next until you hit the end of the list and then you say whoops
Dialogue: 0,1:09:25.36,1:09:26.00,csapp,,0,0,0,,can't do it 
Dialogue: 0,1:09:28.78,1:09:31.24,csapp,,0,0,0,,and that goes whether you're writing a client or a server 
Dialogue: 0,1:09:33.48,1:09:35.44,csapp,,0,0,0,,so that adder info 
Dialogue: 0,1:09:36.74,1:09:38.50,csapp,,0,0,0,,let's look back at what that is
Dialogue: 0,1:09:40.66,1:09:42.28,csapp,,0,0,0,,oh so 
Dialogue: 0,1:09:43.62,1:09:49.44,csapp,,0,0,0,,a door info then is what gets returned is a list of a door info strokes 
Dialogue: 0,1:09:50.84,1:09:54.04,csapp,,0,0,0,,and so the adder info struck contains various fields 
Dialogue: 0,1:09:56.66,1:10:05.40,csapp,,0,0,0,,which talks about what type of data is here 
Dialogue: 0,1:10:05.86,1:10:07.42,csapp,,0,0,0,,what type of socket is it 
Dialogue: 0,1:10:08.88,1:10:15.24,csapp,,0,0,0,,what its canonical name is how long are its addresses you saw that it's an argument to some of the calls
Dialogue: 0,1:10:16.40,1:10:19.66,csapp,,0,0,0,, a pointer to a sock adder struct
Dialogue: 0,1:10:20.26,1:10:24.28,csapp,,0,0,0,,that's the way that is encoded for IPV
Dialogue: 0,1:10:24.98,1:10:29.52,csapp,,0,0,0,,what we've already seen sock adders is a sort of low-level data structure that gets used 
Dialogue: 0,1:10:29.98,1:10:32.80,csapp,,0,0,0,,and then an X pointer to chain the link twist together 
Dialogue: 0,1:10:33.34,1:10:36.16,csapp,,0,0,0,,and so you'll see some of these are the arguments 
Dialogue: 0,1:10:36.16,1:10:41.70,csapp,,0,0,0,,that then you will use to pass into the other functions like bind and with Simmons and connect
Dialogue: 0,1:10:47.36,1:10:50.40,csapp,,0,0,0,,and then there's another version called get name info 
Dialogue: 0,1:10:51.32,1:10:53.62,csapp,,0,0,0,,which you use when you've got an IP address 
Dialogue: 0,1:10:53.80,1:10:56.88,csapp,,0,0,0,,and you want to find what is its domain name 
Dialogue: 0,1:10:57.50,1:11:01.36,csapp,,0,0,0,,and because you remember that mapping is also potentially a one-to-many 
Dialogue: 0,1:11:01.36,1:11:03.96,csapp,,0,0,0,,there can be multiple domain names associated with it
Dialogue: 0,1:11:04.94,1:11:11.64,csapp,,0,0,0,,and so it has a similar  general thing 
Dialogue: 0,1:11:11.70,1:11:14.00,csapp,,0,0,0,,we'll just look right now it get added info
Dialogue: 0,1:11:16.04,1:11:22.42,csapp,,0,0,0,, so just as an example of how you'd write code to make use of this
Dialogue: 0,1:11:22.42,1:11:26.26,csapp,,0,0,0,,essentially just as a way of probing the DNS server 
Dialogue: 0,1:11:27.18,1:11:31.84,csapp,,0,0,0,,is I want to set up an argument a call to get adder info 
Dialogue: 0,1:11:32.36,1:11:36.12,csapp,,0,0,0,,where the string I'm going to pass the name is 
Dialogue: 0,1:11:36.12,1:11:41.48,csapp,,0,0,0,,whatever I type in at the to this application to main 
Dialogue: 0,1:11:42.80,1:11:52.30,csapp,,0,0,0,,and it just for hints just passes a a bunch of zeros 
Dialogue: 0,1:11:53.68,1:12:00.24,csapp,,0,0,0,,and lists P again these are this will just be a pointers
Dialogue: 0,1:12:00.30,1:12:02.48,csapp,,0,0,0,, that I haven't actually
Dialogue: 0,1:12:09.16,1:12:12.94,csapp,,0,0,0,,oh okay so you'll notice hints is actually a struct itself 
Dialogue: 0,1:12:13.54,1:12:18.36,csapp,,0,0,0,,whereas list P and star P are just lists P and P are just pointers to structs 
Dialogue: 0,1:12:18.38,1:12:19.94,csapp,,0,0,0,,they don't have any allocated data
Dialogue: 0,1:12:20.48,1:12:23.66,csapp,,0,0,0,, so the hints I'm just going to fill in that struct with all zeros 
Dialogue: 0,1:12:24.02,1:12:26.30,csapp,,0,0,0,, because I don't really need to provide any hints
Dialogue: 0,1:12:27.68,1:12:32.70,csapp,,0,0,0,, I am telling it that I want a an ipv6 TCP connection here 
Dialogue: 0,1:12:34.54,1:12:35.94,csapp,,0,0,0,,and then
Dialogue: 0,1:12:36.32,1:12:38.80,csapp,,0,0,0,, so what it will do is it will return back
Dialogue: 0,1:12:39.84,1:12:41.62,csapp,,0,0,0,,what returns an error code 
Dialogue: 0,1:12:41.96,1:12:45.36,csapp,,0,0,0,,but it will fill in returned to me a pointer 
Dialogue: 0,1:12:45.82,1:12:49.58,csapp,,0,0,0,,to a this link twist data structure I showed before
Dialogue: 0,1:12:52.76,1:12:54.96,csapp,,0,0,0,,and now I can step through that list
Dialogue: 0,1:12:55.94,1:13:00.14,csapp,,0,0,0,,using standard linked list code and make calls to the get name info
Dialogue: 0,1:13:00.54,1:13:03.24,csapp,,0,0,0,, function which will return back domain names
Dialogue: 0,1:13:07.38,1:13:13.76,csapp,,0,0,0,,and then when it's all done I have to free up that whisk that got returned otherwise  all great memory stuff 
Dialogue: 0,1:13:14.78,1:13:16.66,csapp,,0,0,0,,so just as a demo
Dialogue: 0,1:13:26.98,1:13:27.92,csapp,,0,0,0,,what I'm 
Dialogue: 0,1:13:31.60,1:13:32.86,csapp,,0,0,0,,on Oh host info sorry 
Dialogue: 0,1:13:38.24,1:13:41.38,csapp,,0,0,0,,ah so you can think of it this is like 
Dialogue: 0,1:13:42.70,1:13:47.16,csapp,,0,0,0,,a not very fancy implementation of nslookup 
Dialogue: 0,1:13:49.34,1:13:54.04,csapp,,0,0,0,,so the kind of stuff we already saw before but let's
Dialogue: 0,1:13:58.50,1:14:02.80,csapp,,0,0,0,,all it's returning are the different addresses and one of the things that I found curious is 
Dialogue: 0,1:14:04.04,1:14:06.68,csapp,,0,0,0,,it returns them in the same order all the time
Dialogue: 0,1:14:09.82,1:14:12.78,csapp,,0,0,0,, instead of within a slow cup it kept changing it
Dialogue: 0,1:14:13.50,1:14:15.94,csapp,,0,0,0,,and I think that has to do with caching
Dialogue: 0,1:14:24.48,1:14:25.68,csapp,,0,0,0,,no that changed 
Dialogue: 0,1:14:28.36,1:14:31.54,csapp,,0,0,0,,I know it's kind of interesting if it's 
Dialogue: 0,1:14:32.28,1:14:36.98,csapp,,0,0,0,,it you might want to play with this code it's kind of you can see what's going on in different places
Dialogue: 0,1:14:44.02,1:14:47.10,csapp,,0,0,0,,and so you can see though that it's 
Dialogue: 0,1:14:47.52,1:14:50.40,csapp,,0,0,0,,basically getting the same kind of information 
Dialogue: 0,1:14:50.68,1:14:55.46,csapp,,0,0,0,,that you would from nslookup it's really just creating the DNS server to do this 
Dialogue: 0,1:14:56.60,1:14:59.22,csapp,,0,0,0,,but that's the start of what some of this code looks like 
Dialogue: 0,1:15:10.52,1:15:12.32,csapp,,0,0,0,,one of the things you 
Dialogue: 0,1:15:12.44,1:15:16.78,csapp,,0,0,0,,by the way when you're writing your own code you often make use of what's called localhost 
Dialogue: 0,1:15:17.36,1:15:20.48,csapp,,0,0,0,,and that always just refers to the machine that you're running on it 
Dialogue: 0,1:15:20.50,1:15:22.88,csapp,,0,0,0,,always has this particular IP address 
Dialogue: 0,1:15:22.98,1:15:27.00,csapp,,0,0,0,,so that address just refers to the machine and as a programmer 
Dialogue: 0,1:15:27.54,1:15:29.58,csapp,,0,0,0,,you do all your testing on one machine
Dialogue: 0,1:15:29.96,1:15:34.56,csapp,,0,0,0,, you just set up both the client and the server on the same machine and play with it so 
Dialogue: 0,1:15:35.60,1:15:40.12,csapp,,0,0,0,,localhost is a very useful way of doing code development 
Dialogue: 0,1:15:42.88,1:15:47.80,csapp,,0,0,0,,and if this shows you can request host info for others 
Dialogue: 0,1:15:50.06,1:15:52.80,csapp,,0,0,0,,thanksgivin and you can also by the way
Dialogue: 0,1:15:58.48,1:16:00.86,csapp,,0,0,0,,always give a dotted decimal address
Dialogue: 0,1:16:08.78,1:16:10.04,csapp,,0,0,0,,and I'm just making it up here 
Dialogue: 0,1:16:11.54,1:16:14.64,csapp,,0,0,0,, what and it's not very interesting because it returns back the same address
Dialogue: 0,1:16:17.84,1:16:19.94,csapp,,0,0,0,, it's more interesting to run nslookup on that
Dialogue: 0,1:16:27.82,1:16:28.68,csapp,,0,0,0,,so
Dialogue: 0,1:16:29.76,1:16:32.16,csapp,,0,0,0,, that just gives you a sense 
Dialogue: 0,1:16:32.46,1:16:36.10,csapp,,0,0,0,,and as you've seen this code is pretty messy stuff to work with there's a lot of
Dialogue: 0,1:16:36.64,1:16:40.31,csapp,,0,0,0,,struck so you have to initialize you don't initialize you pass pointers 
Dialogue: 0,1:16:40.68,1:16:42.72,csapp,,0,0,0,,and so the code always looks a bit crufty
Dialogue: 0,1:16:42.72,1:16:46.82,csapp,,0,0,0,,but that sort of the the interfaces it exists 
Dialogue: 0,1:16:47.16,1:16:49.12,csapp,,0,0,0,,and you'll just have to get somewhat comfortable with it 
Dialogue: 0,1:16:49.74,1:16:53.32,csapp,,0,0,0,,so that will do us for today then thanks
