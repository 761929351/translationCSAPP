[Script Info]
; Script generated by Aegisub r8942
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: ../../../../Desktop/csapp/Lecture 11  The Memory Hierarchy.mp4
Video File: ../../../../Desktop/csapp/Lecture 11  The Memory Hierarchy.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 1.070312
Scroll Position: 189
Active Line: 193
Video Position: 32944

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: English,Source Han Sans CN,30,&H00FFFFFF,&H00412A2C,&H00412A2C,&H00412A2C,0,0,0,0,100,100,0,0,1,2.2,1,2,10,10,10,1
Style: Chinese,Source Han Sans CN,34,&H00FBFD00,&H00FFFFFF,&H00362A28,&H00FFFFFF,0,0,0,0,100,100,0,0,1,2,0.2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:02.08,English,,0,0,0,,All right good afternoon everybody
Dialogue: 0,0:00:00.00,0:00:02.08,Chinese,,0,0,0,,大家下午好
Dialogue: 0,0:00:03.26,0:00:04.76,English,,0,0,0,,Welcome!good to see you
Dialogue: 0,0:00:03.26,0:00:04.76,Chinese,,0,0,0,,欢迎！很高兴见到你
Dialogue: 0,0:00:05.88,0:00:07.98,English,,0,0,0,,Hope you all have started your attack labs
Dialogue: 0,0:00:05.88,0:00:07.98,Chinese,,0,0,0,,希望你们都开始攻击实验室
Dialogue: 0,0:00:09.30,0:00:14.06,English,,0,0,0,,Everybody started? be a good time to start I think
Dialogue: 0,0:00:09.30,0:00:14.06,Chinese,,0,0,0,,大家都开始了？我认为是开始的好时机
Dialogue: 0,0:00:15.52,0:00:20.06,English,,0,0,0,,Anyway I hope you're enjoying it, that's a that's a new one this semester that's
Dialogue: 0,0:00:15.52,0:00:20.06,Chinese,,0,0,0,,无论如何，我希望你喜欢它，这是一个新学期，这是一个新学期
Dialogue: 0,0:00:20.60,0:00:24.24,English,,0,0,0,,I think really interesting and modern and current
Dialogue: 0,0:00:20.60,0:00:24.24,Chinese,,0,0,0,,我认为真的很有趣，现代和当前
Dialogue: 0,0:00:26.36,0:00:28.34,English,,0,0,0,,Okay today we're going to...
Dialogue: 0,0:00:26.36,0:00:28.34,Chinese,,0,0,0,,好的今天我们要......
Dialogue: 0,0:00:29.64,0:00:32.18,English,,0,0,0,,Today we're going to talk about something called the memory hierarchy
Dialogue: 0,0:00:29.64,0:00:32.18,Chinese,,0,0,0,,今天我们要讨论一些叫做内存层次结构的东西
Dialogue: 0,0:00:32.84,0:00:36.92,English,,0,0,0,,Now so far in the class we've thought of memory
Dialogue: 0,0:00:32.84,0:00:36.92,Chinese,,0,0,0,,到目前为止，在课堂上我们已经想到了记忆
Dialogue: 0,0:00:37.00,0:00:39.48,English,,0,0,0,,When we're looking at our assembly language programs
Dialogue: 0,0:00:37.00,0:00:39.48,Chinese,,0,0,0,,当我们查看汇编语言程序时
Dialogue: 0,0:00:39.48,0:00:42.10,English,,0,0,0,,We've thought of memory as an array of bytes
Dialogue: 0,0:00:39.48,0:00:42.10,Chinese,,0,0,0,,我们已经将内存视为一个字节数组
Dialogue: 0,0:00:42.40,0:00:48.28,English,,0,0,0,,It's the big array of bytes that we can access with that an index called an address
Dialogue: 0,0:00:42.40,0:00:48.28,Chinese,,0,0,0,,这是我们可以使用一个名为地址的索引访问的大字节数组
Dialogue: 0,0:00:50.88,0:00:56.36,English,,0,0,0,,But in actuality the memory system is a very complex hierarchy of devices
Dialogue: 0,0:00:50.88,0:00:56.36,Chinese,,0,0,0,,但实际上，内存系统是一个非常复杂的设备层次结构
Dialogue: 0,0:00:57.04,0:01:00.68,English,,0,0,0,,That provides this abstraction of this this large linear array
Dialogue: 0,0:00:57.04,0:01:00.68,Chinese,,0,0,0,,这提供了这个大型线性阵列的抽象
Dialogue: 0,0:01:00.98,0:01:04.70,English,,0,0,0,,And so today we're going to look at how memory hierarchies are built
Dialogue: 0,0:01:00.98,0:01:04.70,Chinese,,0,0,0,,所以今天我们将看看如何构建内存层次结构
Dialogue: 0,0:01:05.40,0:01:08.86,English,,0,0,0,,And why they're built the way they are
Dialogue: 0,0:01:05.40,0:01:08.86,Chinese,,0,0,0,,为什么他们按照他们的方式建造
Dialogue: 0,0:01:09.20,0:01:17.98,English,,0,0,0,,And what we'll see is that this sort of beautiful confluence of the properties of storage devices
Dialogue: 0,0:01:09.20,0:01:17.98,Chinese,,0,0,0,,而我们将看到的是存储设备属性的这种美妙融合
Dialogue: 0,0:01:18.64,0:01:24.38,English,,0,0,0,,And the properties of programs come together to create this...
Dialogue: 0,0:01:18.64,0:01:24.38,Chinese,,0,0,0,,程序的属性汇集起来创造了这个......
Dialogue: 0,0:01:24.72,0:01:27.26,English,,0,0,0,,This beautiful design called a memory hierarchy
Dialogue: 0,0:01:24.72,0:01:27.26,Chinese,,0,0,0,,这个美丽的设计称为内存层次结构
Dialogue: 0,0:01:28.48,0:01:33.98,English,,0,0,0,,So we're going to quickly kind of do a high-level tour of storage technologies and trends
Dialogue: 0,0:01:28.48,0:01:33.98,Chinese,,0,0,0,,因此，我们将很快对存储技术和趋势进行高级别的访问
Dialogue: 0,0:01:34.48,0:01:36.22,English,,0,0,0,,We're not going to go into a whole lot of detail
Dialogue: 0,0:01:34.48,0:01:36.22,Chinese,,0,0,0,,我们不打算详细介绍
Dialogue: 0,0:01:37.44,0:01:44.04,English,,0,0,0,,The point in looking at these at these the properties of these technologies is that
Dialogue: 0,0:01:37.44,0:01:44.04,Chinese,,0,0,0,,从这些技术的特性来看这些技术的关键在于
Dialogue: 0,0:01:44.38,0:01:47.88,English,,0,0,0,,There are some fundamental properties that determine their performance and their speed
Dialogue: 0,0:01:44.38,0:01:47.88,Chinese,,0,0,0,,有一些基本属性决定了它们的性能和速度
Dialogue: 0,0:01:48.25,0:01:51.48,English,,0,0,0,,And determine limits on their performance and speed
Dialogue: 0,0:01:48.25,0:01:51.48,Chinese,,0,0,0,,并确定其性能和速度的限制
Dialogue: 0,0:01:51.92,0:01:58.74,English,,0,0,0,,And so I want you to have a,you know, just some high-level idea of what those what those properties are
Dialogue: 0,0:01:51.92,0:01:58.74,Chinese,,0,0,0,,所以我希望你有一个关于那些属性是什么的高层次想法
Dialogue: 0,0:01:59.72,0:02:03.62,English,,0,0,0,,And then we'll look at a property of programs called locality of reference
Dialogue: 0,0:01:59.72,0:02:03.62,Chinese,,0,0,0,,然后我们将看一个称为参考局部的程序的属性
Dialogue: 0,0:02:04.22,0:02:09.68,English,,0,0,0,,And we'll see how that locality and the properties of storage devices
Dialogue: 0,0:02:04.22,0:02:09.68,Chinese,,0,0,0,,我们将看到该地点和存储设备的属性
Dialogue: 0,0:02:09.68,0:02:15.06,English,,0,0,0,,Come together to suggest this design of memory systems as a hierarchy
Dialogue: 0,0:02:09.68,0:02:15.06,Chinese,,0,0,0,,聚集在一起建议将这种内存系统设计作为一种层次结构
Dialogue: 0,0:02:17.00,0:02:18.46,English,,0,0,0,,Okay so we'll look at memories first
Dialogue: 0,0:02:17.00,0:02:18.46,Chinese,,0,0,0,,好的，我们先看看回忆
Dialogue: 0,0:02:18.46,0:02:23.06,English,,0,0,0,,Now the the workhorse memory is called a random access memory or RAM
Dialogue: 0,0:02:18.46,0:02:23.06,Chinese,,0,0,0,,现在主力内存被称为随机存取存储器或RAM
Dialogue: 0,0:02:23.54,0:02:26.34,English,,0,0,0,,I'm sure it's traditionally packaged up as a chip
Dialogue: 0,0:02:23.54,0:02:26.34,Chinese,,0,0,0,,我确信它传统上被打包成芯片
Dialogue: 0,0:02:26.62,0:02:30.66,English,,0,0,0,,And then you put multiple chips together to form your main memory
Dialogue: 0,0:02:26.62,0:02:30.66,Chinese,,0,0,0,,然后你把多个芯片组合在一起形成你的主存
Dialogue: 0,0:02:31.14,0:02:35.96,English,,0,0,0,,And there's a basic storage unit called a cell which where each cell stores one bit
Dialogue: 0,0:02:31.14,0:02:35.96,Chinese,,0,0,0,,并且有一个称为单元的基本存储单元，每个单元存储一位
Dialogue: 0,0:02:36.94,0:02:41.54,English,,0,0,0,,Okay now there's a RAM comes in two varieties
Dialogue: 0,0:02:36.94,0:02:41.54,Chinese,,0,0,0,,好的，现在有两种RAM
Dialogue: 0,0:02:41.54,0:02:46.86,English,,0,0,0,,There's a DRAM and DRAM and they're distinguished by the way that those cells are implemented
Dialogue: 0,0:02:41.54,0:02:46.86,Chinese,,0,0,0,,有一个DRAM和DRAM，他们的特点是这些单元的实现方式
Dialogue: 0,0:02:48.40,0:02:48.78,English,,0,0,0,,So in
Dialogue: 0,0:02:48.40,0:02:48.78,Chinese,,0,0,0,,所以
Dialogue: 0,0:02:50.14,0:03:04.08,English,,0,0,0,,and SRAM requires it's more complex than DRAM it requires like 4,6 transistors per bit whereas DRAM only requires a one transistor
Dialogue: 0,0:02:50.14,0:03:04.08,Chinese,,0,0,0,,SRAM要求它比DRAM要复杂得多，如每位4,6个晶体管，而DRAM只需要一个晶体管
Dialogue: 0,0:03:04.78,0:03:11.20,English,,0,0,0,,Okay so you'll see that SRAM are going to be more expensive lots more expensive
Dialogue: 0,0:03:04.78,0:03:11.20,Chinese,,0,0,0,,好的，所以你会发现SRAM会更昂贵更贵
Dialogue: 0,0:03:11.48,0:03:15.08,English,,0,0,0,,Because they're more complex each cell is more complex
Dialogue: 0,0:03:11.48,0:03:15.08,Chinese,,0,0,0,,因为它们更复杂，每个细胞都更复杂
Dialogue: 0,0:03:15.34,0:03:21.28,English,,0,0,0,,But they're also much faster like ten order magnitude faster than DRAMs
Dialogue: 0,0:03:15.34,0:03:21.28,Chinese,,0,0,0,,但它们的速度也比DRAM快10个数量级
Dialogue: 0,0:03:21.90,0:03:24.84,English,,0,0,0,,And they have there's some other properties too like
Dialogue: 0,0:03:21.90,0:03:24.84,Chinese,,0,0,0,,他们还有其他一些属性
Dialogue: 0,0:03:25.52,0:03:28.88,English,,0,0,0,,SRAM constantly,a DRAM constantly needs to be refreshed
Dialogue: 0,0:03:25.52,0:03:28.88,Chinese,,0,0,0,,SRAM不断，需要不断更新DRAM
Dialogue: 0,0:03:28.88,0:03:34.26,English,,0,0,0,,If you don't hit it with a voltage
Dialogue: 0,0:03:28.88,0:03:34.26,Chinese,,0,0,0,,如果你没有用电​​压击中它
Dialogue: 0,0:03:34.26,0:03:39.12,English,,0,0,0,,It loses the charge whereas DRAM while it needs to be plugged in
Dialogue: 0,0:03:34.26,0:03:39.12,Chinese,,0,0,0,,当需要插入DRAM时，它会丢失电荷而DRAM则会丢失
Dialogue: 0,0:03:39.74,0:03:42.90,English,,0,0,0,,And and have an electric charge it doesn't need to be refreshed
Dialogue: 0,0:03:39.74,0:03:42.90,Chinese,,0,0,0,,并且有一个电荷，它不需要刷新
Dialogue: 0,0:03:43.44,0:03:47.22,English,,0,0,0,,SRAM is a lot more reliable than DRAM so it
Dialogue: 0,0:03:43.44,0:03:47.22,Chinese,,0,0,0,,SRAM比DRAM更可靠
Dialogue: 0,0:03:47.70,0:03:49.92,English,,0,0,0,,There's less need for error detection and correction
Dialogue: 0,0:03:47.70,0:03:49.92,Chinese,,0,0,0,,不太需要进行错误检测和纠正
Dialogue: 0,0:03:50.66,0:03:59.98,English,,0,0,0,,And there and so because of this difference right the SRAMs are costlier smaller and faster than DRAMs
Dialogue: 0,0:03:50.66,0:03:59.98,Chinese,,0,0,0,,而且由于存在这种差异，因此SRAM比DRAM更小，速度更快
Dialogue: 0,0:04:01.48,0:04:08.78,English,,0,0,0,,We find SRAMs being used in these small fast memories on chip called cache memories
Dialogue: 0,0:04:01.48,0:04:08.78,Chinese,,0,0,0,,我们发现SRAM被用在芯片上的这些小型快速存储器中，称为高速缓冲存储器
Dialogue: 0,0:04:09.30,0:04:12.70,English,,0,0,0,,And we're going to learn all about those on Thursday
Dialogue: 0,0:04:09.30,0:04:12.70,Chinese,,0,0,0,,我们将在星期四学习所有这些
Dialogue: 0,0:04:14.04,0:04:24.06,English,,0,0,0,,And then DRAM is the workhorse used in main memories and the frame buffers associated with graphics cards
Dialogue: 0,0:04:14.04,0:04:24.06,Chinese,,0,0,0,,然后DRAM是主存储器中使用的主力和与图形卡相关的帧缓冲器
Dialogue: 0,0:04:25.24,0:04:33.52,English,,0,0,0,,Now DRAM and SRAM are volatile in the sense that if they're powered off they lose all the information right so this is why
Dialogue: 0,0:04:25.24,0:04:33.52,Chinese,,0,0,0,,现在DRAM和SRAM是易失性的，如果它们断电就会丢失所有信息，所以这就是原因
Dialogue: 0,0:04:33.68,0:04:37.72,English,,0,0,0,,When you turn your computer off you have to you lose everything in your memory
Dialogue: 0,0:04:33.68,0:04:37.72,Chinese,,0,0,0,,当你关闭电脑时，你必须失去记忆中的一切
Dialogue: 0,0:04:37.72,0:04:43.34,English,,0,0,0,,And you have to when you turn it back on you have to sort of reload everything from your disk
Dialogue: 0,0:04:37.72,0:04:43.34,Chinese,,0,0,0,,当你重新打开它时，你必须重新加载磁盘上的所有东西
Dialogue: 0,0:04:44.08,0:04:50.30,English,,0,0,0,,There's a different another kind of memory called a nonvolatile memory which retains its information when it's powered off
Dialogue: 0,0:04:44.08,0:04:50.30,Chinese,,0,0,0,,还有另一种称为非易失性存储器的存储器，它在断电时保留其信息
Dialogue: 0,0:04:50.90,0:04:57.02,English,,0,0,0,,And there's a whole bunch of these things that so called up read-only memory
Dialogue: 0,0:04:50.90,0:04:57.02,Chinese,,0,0,0,,并且有很多这些东西被称为只读内存
Dialogue: 0,0:04:57.02,0:05:02.08,English,,0,0,0,,So the generic name for these nonvolatile memories is read only memories ROM
Dialogue: 0,0:04:57.02,0:05:02.08,Chinese,,0,0,0,,因此，这些非易失性存储器的通用名称是只读存储器ROM
Dialogue: 0,0:05:02.08,0:05:10.98,English,,0,0,0,,And there's a whole bunch of different kinds sort of going back in time the original read only memories were ROMs
Dialogue: 0,0:05:02.08,0:05:10.98,Chinese,,0,0,0,,而且有很多不同类型的东西可以追溯到最初的只读存储器是ROM
Dialogue: 0,0:05:10.98,0:05:14.10,English,,0,0,0,,And they can only be programmed once when the chip was produced
Dialogue: 0,0:05:10.98,0:05:14.10,Chinese,,0,0,0,,并且它们只能在芯片生产时编程一次
Dialogue: 0,0:05:14.60,0:05:17.82,English,,0,0,0,,And then over time gradually over period of like 20 or 30 years
Dialogue: 0,0:05:14.60,0:05:17.82,Chinese,,0,0,0,,然后逐渐超过20或30年的时间
Dialogue: 0,0:05:18.26,0:05:23.04,English,,0,0,0,,There were improvements in the way that ROMs could be programmed and in how they were erased
Dialogue: 0,0:05:18.26,0:05:23.04,Chinese,,0,0,0,,ROM的编程方式和删除方式都有所改进
Dialogue: 0,0:05:23.30,0:05:24.88,English,,0,0,0,,So they could be reprogrammed
Dialogue: 0,0:05:23.30,0:05:24.88,Chinese,,0,0,0,,所以他们可以重新编程
Dialogue: 0,0:05:25.78,0:05:31.04,English,,0,0,0,,The what we have today the the modern form of read only memories is called flash memory
Dialogue: 0,0:05:25.78,0:05:31.04,Chinese,,0,0,0,,我们今天所拥有的现代形式的只读存储器被称为闪存
Dialogue: 0,0:05:32.78,0:05:41.34,English,,0,0,0,,Which provides the capability of erasing you can erase just chunks of the the flash memory called blocks
Dialogue: 0,0:05:32.78,0:05:41.34,Chinese,,0,0,0,,它提供了擦除功能，你可以只删除称为块的闪存块
Dialogue: 0,0:05:43.12,0:05:49.16,English,,0,0,0,,And then the downside is that these things wear out after about a hundred thousand erasers
Dialogue: 0,0:05:43.12,0:05:49.16,Chinese,,0,0,0,,然后缺点是这些东西在大约十万个橡皮擦之后磨损了
Dialogue: 0,0:05:49.50,0:05:57.44,English,,0,0,0,,Okay so you can erase and reprogram a hundred thousand times and then it's your bricked
Dialogue: 0,0:05:49.50,0:05:57.44,Chinese,,0,0,0,,好的，你可以擦除和重新编程十万次，然后它就是你的砖块
Dialogue: 0,0:05:58.76,0:06:04.36,English,,0,0,0,,Now that these nonvolatile memories are show up in with
Dialogue: 0,0:05:58.76,0:06:04.36,Chinese,,0,0,0,,现在这些非易失性存储器已经出现了
Dialogue: 0,0:06:04.36,0:06:06.76,English,,0,0,0,,So called firmware which is software
Dialogue: 0,0:06:04.36,0:06:06.76,Chinese,,0,0,0,,所谓的固件是软件
Dialogue: 0,0:06:07.48,0:06:09.78,English,,0,0,0,,That's that's programmed into a ROM
Dialogue: 0,0:06:07.48,0:06:09.78,Chinese,,0,0,0,,那就是编程到ROM中
Dialogue: 0,0:06:10.34,0:06:14.22,English,,0,0,0,,And you see those in the BIOS of computers so when you power on your computer
Dialogue: 0,0:06:10.34,0:06:14.22,Chinese,,0,0,0,,你可以在计算机的BIOS中看到那些，当你打开电脑时
Dialogue: 0,0:06:15.18,0:06:19.14,English,,0,0,0,,The very first instructions that execute are stored in a ROM right
Dialogue: 0,0:06:15.18,0:06:19.14,Chinese,,0,0,0,,执行的第一个指令存储在ROM右侧
Dialogue: 0,0:06:19.14,0:06:22.80,English,,0,0,0,,If you're wondered like where do those things come from so they're stored in ROM
Dialogue: 0,0:06:19.14,0:06:22.80,Chinese,,0,0,0,,如果你想知道这些东西来自哪里，那么它们就存储在ROM中
Dialogue: 0,0:06:23.18,0:06:26.76,English,,0,0,0,,And then there's a boot process where gradually more and more information is
Dialogue: 0,0:06:23.18,0:06:26.76,Chinese,,0,0,0,,然后是一个启动过程，逐渐有越来越多的信息
Dialogue: 0,0:06:27.50,0:06:30.36,English,,0,0,0,,And instructions are loaded into memory
Dialogue: 0,0:06:27.50,0:06:30.36,Chinese,,0,0,0,,并且指令被加载到内存中
Dialogue: 0,0:06:32.28,0:06:37.52,English,,0,0,0,,You know IO.IO devices have little computers in them call controllers
Dialogue: 0,0:06:32.28,0:06:37.52,Chinese,,0,0,0,,你知道IO.IO设备中只有很少的计算机呼叫控制器
Dialogue: 0,0:06:38.19,0:06:41.98,English,,0,0,0,,These controllers consist of instructions and data that are that are stored in ROMs
Dialogue: 0,0:06:38.19,0:06:41.98,Chinese,,0,0,0,,这些控制器由存储在ROM中的指令和数据组成
Dialogue: 0,0:06:43.24,0:06:48.62,English,,0,0,0,,And you see them all over the place in these solid state disks
Dialogue: 0,0:06:43.24,0:06:48.62,Chinese,,0,0,0,,你可以在这些固态硬盘中看到它们
Dialogue: 0,0:06:49.66,0:06:55.56,English,,0,0,0,,That to the system look like a rotating disk
Dialogue: 0,0:06:49.66,0:06:55.56,Chinese,,0,0,0,,系统看起来像一个旋转磁盘
Dialogue: 0,0:06:55.98,0:06:58.10,English,,0,0,0,,But they're built of flash memories
Dialogue: 0,0:06:55.98,0:06:58.10,Chinese,,0,0,0,,但它们是由闪存构成的
Dialogue: 0,0:06:59.80,0:07:03.98,English,,0,0,0,,Okay and these are you see these in thumb drives smartphones tablets and laptops
Dialogue: 0,0:06:59.80,0:07:03.98,Chinese,,0,0,0,,好的，这些是你在拇指驱动器智能手机平板电脑和笔记本电脑中看到的
Dialogue: 0,0:07:03.98,0:07:06.70,English,,0,0,0,,And they're even starting to show up in servers now
Dialogue: 0,0:07:03.98,0:07:06.70,Chinese,,0,0,0,,他们现在甚至开始出现在服务器中
Dialogue: 0,0:07:14.62,0:07:22.02,English,,0,0,0,,So the memories are connected to the CPU using sort of wires that are collectively called buses
Dialogue: 0,0:07:14.62,0:07:22.02,Chinese,,0,0,0,,因此，存储器使用统称为总线的电线连接到CPU
Dialogue: 0,0:07:22.54,0:07:31.06,English,,0,0,0,,Okay so data flows across the wires back and forth from the,we have the CPU chip
Dialogue: 0,0:07:22.54,0:07:31.06,Chinese,,0,0,0,,好的，所以数据来自电线来回传输，我们有CPU芯片
Dialogue: 0,0:07:32.68,0:07:38.52,English,,0,0,0,,And it consists of register file these are the general-purpose registers %rax, %rdi and so on
Dialogue: 0,0:07:32.68,0:07:38.52,Chinese,,0,0,0,,它由寄存器文件组成，这些是通用寄存器％rax，％rdi等
Dialogue: 0,0:07:39.36,0:07:44.82,English,,0,0,0,,And there's an arithmetic logic unit that reads and writes data from the register files
Dialogue: 0,0:07:39.36,0:07:44.82,Chinese,,0,0,0,,并且有一个算术逻辑单元，用于从寄存器文件中读取和写入数据
Dialogue: 0,0:07:45.32,0:07:51.44,English,,0,0,0,,And then manipulates that data in some way by doing some kind of arithmetic operation or some logical operation
Dialogue: 0,0:07:45.32,0:07:51.44,Chinese,,0,0,0,,然后通过某种算术运算或某种逻辑运算以某种方式操纵该数据
Dialogue: 0,0:07:52.38,0:07:57.02,English,,0,0,0,,And if instructions need to access memory
Dialogue: 0,0:07:52.38,0:07:57.02,Chinese,,0,0,0,,如果指令需要访问内存
Dialogue: 0,0:07:57.20,0:08:04.34,English,,0,0,0,,So if there's you're doing a move,a move instruction that reads or writes to memory
Dialogue: 0,0:07:57.20,0:08:04.34,Chinese,,0,0,0,,因此，如果你正在进行移动，那么读取或写入内存的移动指令
Dialogue: 0,0:08:06.04,0:08:11.44,English,,0,0,0,,Then that's handled by a bus interface which is connected to a what we'll call a system bus
Dialogue: 0,0:08:06.04,0:08:11.44,Chinese,,0,0,0,,然后由总线接口处理，该接口连接到我们称之为系统总线的接口
Dialogue: 0,0:08:13.32,0:08:16.74,English,,0,0,0,,And then that's connected to an I/O bridge and this
Dialogue: 0,0:08:13.32,0:08:16.74,Chinese,,0,0,0,,然后它连接到I / O桥和这个
Dialogue: 0,0:08:17.28,0:08:24.00,English,,0,0,0,,This is another collection of chips,Intel calls this what I'm calling the I/O bridge,they call the chipset 
Dialogue: 0,0:08:17.28,0:08:24.00,Chinese,,0,0,0,,这是另一个芯片集合，英特尔称之为我所称的I / O桥，他们称之为芯片组
Dialogue: 0,0:08:24.66,0:08:28.92,English,,0,0,0,,Okay but it's it's a collection of chips separate from the process the CPU chip
Dialogue: 0,0:08:24.66,0:08:28.92,Chinese,,0,0,0,,好吧，但这是一个与CPU芯片分开的芯片集合
Dialogue: 0,0:08:29.80,0:08:34.84,English,,0,0,0,,And then the I/O bridge is connected to another bus called the memory bus which connects the main memory
Dialogue: 0,0:08:29.80,0:08:34.84,Chinese,,0,0,0,,然后I / O桥连接到另一个称为内存总线的总线，该总线连接主存储器
Dialogue: 0,0:08:36.42,0:08:41.68,English,,0,0,0,,Okay now this is kind of an abstraction I don't want you to take this too literally
Dialogue: 0,0:08:36.42,0:08:41.68,Chinese,,0,0,0,,好吧，现在这是一种抽象，我不希望你太过于字面意思
Dialogue: 0,0:08:41.68,0:08:45.44,English,,0,0,0,,But it gives you the idea of how information flows in the system
Dialogue: 0,0:08:41.68,0:08:45.44,Chinese,,0,0,0,,但它让你了解信息如何在系统中流动
Dialogue: 0,0:08:46.10,0:08:53.22,English,,0,0,0,,Okay modern modern systems use proprietary bus designs and they're very arcane and increasingly complex
Dialogue: 0,0:08:46.10,0:08:53.22,Chinese,,0,0,0,,好的现代现代系统使用专有总线设计，它们非常神秘且越来越复杂
Dialogue: 0,0:08:53.72,0:09:00.46,English,,0,0,0,,So we're just going to use a fairly simple abstraction for these bus architectures
Dialogue: 0,0:08:53.72,0:09:00.46,Chinese,,0,0,0,,因此，我们将对这些总线架构使用相当简单的抽象
Dialogue: 0,0:09:02.22,0:09:07.06,English,,0,0,0,,Now when is,now suppose you do a load operation like movq
Dialogue: 0,0:09:02.22,0:09:07.06,Chinese,,0,0,0,,现在什么时候，现在假设你执行像movq这样的加载操作
Dialogue: 0,0:09:07.26,0:09:11.88,English,,0,0,0,,The eight bytes at address a into %rax
Dialogue: 0,0:09:07.26,0:09:11.88,Chinese,,0,0,0,,地址a中的八个字节为％rax
Dialogue: 0,0:09:12.26,0:09:17.16,English,,0,0,0,,Okay so we call that a load because we're loading from the point of view of the CPU
Dialogue: 0,0:09:12.26,0:09:17.16,Chinese,,0,0,0,,好的，所以我们称之为负载，因为我们从CPU的角度加载
Dialogue: 0,0:09:17.46,0:09:19.90,English,,0,0,0,,We're loading data into the CPU
Dialogue: 0,0:09:17.46,0:09:19.90,Chinese,,0,0,0,,我们正在将数据加载到CPU中
Dialogue: 0,0:09:20.62,0:09:24.40,English,,0,0,0,,But we're loading and we're loading data from memory into the CPU
Dialogue: 0,0:09:20.62,0:09:24.40,Chinese,,0,0,0,,但我们正在加载，我们正在将内存中的数据加载到CPU中
Dialogue: 0,0:09:25.74,0:09:30.04,English,,0,0,0,,So when the CPU executes movq instruction like this
Dialogue: 0,0:09:25.74,0:09:30.04,Chinese,,0,0,0,,所以当CPU执行这样的movq指令时
Dialogue: 0,0:09:30.76,0:09:33.98,English,,0,0,0,,It first places the address of A on the memory bus
Dialogue: 0,0:09:30.76,0:09:33.98,Chinese,,0,0,0,,它首先将A的地址放在内存总线上
Dialogue: 0,0:09:38.22,0:09:44.82,English,,0,0,0,,And then the main memory census that address and it reads the contents the eight bytes at address A
Dialogue: 0,0:09:38.22,0:09:44.82,Chinese,,0,0,0,,然后是主存储器人口普查，它解决了地址A中8个字节的内容
Dialogue: 0,0:09:45.72,0:09:50.76,English,,0,0,0,,So it retrieves the word 8 byte word from address a and places it back on the bus
Dialogue: 0,0:09:45.72,0:09:50.76,Chinese,,0,0,0,,因此它从地址a检索字8字节字并将其放回总线上
Dialogue: 0,0:09:52.70,0:09:58.10,English,,0,0,0,,The those bits travel through the I/O bridge to the bus interface
Dialogue: 0,0:09:52.70,0:09:58.10,Chinese,,0,0,0,,这些位通过I / O桥传输到总线接口
Dialogue: 0,0:09:59.84,0:10:07.20,English,,0,0,0,,And then the CPU reads the the word x from the data word x from the bus and in composition to register %rax
Dialogue: 0,0:09:59.84,0:10:07.20,Chinese,,0,0,0,,然后CPU从总线的数据字x中读取字x，并在合成中读取％rax
Dialogue: 0,0:10:07.46,0:10:11.72,English,,0,0,0,,Okay so it's now writing is is similar again
Dialogue: 0,0:10:07.46,0:10:11.72,Chinese,,0,0,0,,好的，现在写作再次类似
Dialogue: 0,0:10:12.28,0:10:20.08,English,,0,0,0,,So here we're doing a move instruction movq from %rax into address A main memory
Dialogue: 0,0:10:12.28,0:10:20.08,Chinese,,0,0,0,,所以这里我们正在做一个从％rax到地址A主存储器的移动指令movq
Dialogue: 0,0:10:21.16,0:10:25.66,English,,0,0,0,,Okay so the the CPU starts as before by placing the address a on the bus
Dialogue: 0,0:10:21.16,0:10:25.66,Chinese,,0,0,0,,好的，所以CPU通过将地址a放在总线上而像以前一样启动
Dialogue: 0,0:10:27.46,0:10:31.65,English,,0,0,0,,Main memory reads that address and then it waits for the data to arrive on the bus
Dialogue: 0,0:10:27.46,0:10:31.65,Chinese,,0,0,0,,主存储器读取该地址，然后等待数据到达总线
Dialogue: 0,0:10:31.65,0:10:35.50,English,,0,0,0,,So the CPU then places the contents of %rax on the bus
Dialogue: 0,0:10:31.65,0:10:35.50,Chinese,,0,0,0,,然后CPU将％rax的内容放在总线上
Dialogue: 0,0:10:36.42,0:10:39.54,English,,0,0,0,,Those contents travel across to main memory
Dialogue: 0,0:10:36.42,0:10:39.54,Chinese,,0,0,0,,这些内容传播到主存储器
Dialogue: 0,0:10:39.96,0:10:45.08,English,,0,0,0,,Which then reads the reads that word from the bus and stores it at address A
Dialogue: 0,0:10:39.96,0:10:45.08,Chinese,,0,0,0,,然后，它从总线读取该字的读取并将其存储在地址A中
Dialogue: 0,0:10:45.58,0:10:51.06,English,,0,0,0,,Ok so that the point of all this is that operations that occur
Dialogue: 0,0:10:45.58,0:10:51.06,Chinese,,0,0,0,,好的，所有这一切都是发生的操作
Dialogue: 0,0:10:52.48,0:10:54.24,English,,0,0,0,,You know reads and writes of registers
Dialogue: 0,0:10:52.48,0:10:54.24,Chinese,,0,0,0,,你知道寄存器的读写
Dialogue: 0,0:10:55.66,0:11:01.90,English,,0,0,0,,Because the register file is very close to the ALU, these happen in on the order of a few cycles
Dialogue: 0,0:10:55.66,0:11:01.90,Chinese,,0,0,0,,因为寄存器文件非常靠近ALU，所以这些发生在几个周期的数量级
Dialogue: 0,0:11:02.70,0:11:06.38,English,,0,0,0,,Ok register,the register very close to the ALU
Dialogue: 0,0:11:02.70,0:11:06.38,Chinese,,0,0,0,,好注册，寄存器非常接近ALU
Dialogue: 0,0:11:06.74,0:11:10.28,English,,0,0,0,,So those operations are very happened very quickly
Dialogue: 0,0:11:06.74,0:11:10.28,Chinese,,0,0,0,,所以这些操作非常快
Dialogue: 0,0:11:11.32,0:11:19.40,English,,0,0,0,,Whereas memories actually this is a set of chips that are very far away relatively speaking from the CPU
Dialogue: 0,0:11:11.32,0:11:19.40,Chinese,,0,0,0,,而记忆实际上这是一组与CPU相对较远的芯片
Dialogue: 0,0:11:20.90,0:11:24.68,English,,0,0,0,,And there's a lot going on in when if you have to read or write memory there's
Dialogue: 0,0:11:20.90,0:11:24.68,Chinese,,0,0,0,,如果你必须读取或写入内存，那么会发生很多事情
Dialogue: 0,0:11:25.10,0:11:32.22,English,,0,0,0,,It you have to do multiple operations on the bus,data has to travel propagate across that bus all this stuff takes time
Dialogue: 0,0:11:25.10,0:11:32.22,Chinese,,0,0,0,,你必须在总线上做多个操作，数据必须通过该总线传播所有这些东西需要时间
Dialogue: 0,0:11:32.82,0:11:36.28,English,,0,0,0,,So memory operations reads and writes are typically
Dialogue: 0,0:11:32.82,0:11:36.28,Chinese,,0,0,0,,因此，内存操作通常是读写操作
Dialogue: 0,0:11:36.64,0:11:45.78,English,,0,0,0,,You know maybe 50 nanoseconds 100 nanoseconds whereas operations that occur between registers are sub nanosecond
Dialogue: 0,0:11:36.64,0:11:45.78,Chinese,,0,0,0,,你知道可能是50纳秒100纳秒，而寄存器之间发生的操作是亚纳秒
Dialogue: 0,0:11:47.84,0:11:52.78,English,,0,0,0,,On the order of so you're talking about a one to two orders of magnitude difference
Dialogue: 0,0:11:47.84,0:11:52.78,Chinese,,0,0,0,,按顺序，所以你说的是一到两个数量级的差异
Dialogue: 0,0:11:53.86,0:11:56.94,English,,0,0,0,,If you have to go off chip to to retrieve something from memory
Dialogue: 0,0:11:53.86,0:11:56.94,Chinese,,0,0,0,,如果你不得不离开芯片从内存中检索一些东西
Dialogue: 0,0:11:56.94,0:12:03.24,English,,0,0,0,,Ok so that's the first sort of big takeaway item about memory systems
Dialogue: 0,0:11:56.94,0:12:03.24,Chinese,,0,0,0,,好的，这是关于内存系统的第一个重要的外卖项目
Dialogue: 0,0:12:04.46,0:12:08.16,English,,0,0,0,,Now in other popular storage technology is rotating disks
Dialogue: 0,0:12:04.46,0:12:08.16,Chinese,,0,0,0,,现在其他流行的存储技术是旋转磁盘
Dialogue: 0,0:12:09.14,0:12:14.08,English,,0,0,0,,And I don't know if you've ever torn one apart they're kind of interesting there's a series of platters
Dialogue: 0,0:12:09.14,0:12:14.08,Chinese,,0,0,0,,而且我不知道你是否曾经撕开它们，它们有点有趣，还有一系列拼盘
Dialogue: 0,0:12:15.08,0:12:18.18,English,,0,0,0,,Each platter is coated with a magnetic material
Dialogue: 0,0:12:15.08,0:12:18.18,Chinese,,0,0,0,,每个盘片都涂有磁性材料
Dialogue: 0,0:12:19.14,0:12:25.30,English,,0,0,0,,And then and then bits ones and zeros are encoded in that magnetic material
Dialogue: 0,0:12:19.14,0:12:25.30,Chinese,,0,0,0,,然后，然后在该磁性材料中编码位1和0
Dialogue: 0,0:12:26.04,0:12:31.79,English,,0,0,0,,And then there's this arm that can it's it's hinged right here
Dialogue: 0,0:12:26.04,0:12:31.79,Chinese,,0,0,0,,然后就是这只手臂就可以直接铰接在这里了
Dialogue: 0,0:12:32.38,0:12:38.50,English,,0,0,0,,And then it can it floats over the platter so it floats on a thin layer of air over the platter
Dialogue: 0,0:12:32.38,0:12:38.50,Chinese,,0,0,0,,然后它可以漂浮在盘片上，因此它漂浮在盘片上方的薄薄一层空气中
Dialogue: 0,0:12:38.50,0:12:45.26,English,,0,0,0,,And there's a read/write head at the very end that can sense the changes in the magnetic field that encode the bits
Dialogue: 0,0:12:38.50,0:12:45.26,Chinese,,0,0,0,,并且在最末端有一个读/写头，可以感知编码位的磁场变化
Dialogue: 0,0:12:45.74,0:12:52.62,English,,0,0,0,,Okay so these platters are spinning around like counterclockwise like this, this arm can go back and forth 
Dialogue: 0,0:12:45.74,0:12:52.62,Chinese,,0,0,0,,好的，所以这些盘子像逆时针一样旋转，这样的手臂可以前后移动
Dialogue: 0,0:12:53.32,0:12:56.82,English,,0,0,0,,So there's a lot of mechanical gear so this is all mechanical
Dialogue: 0,0:12:53.32,0:12:56.82,Chinese,,0,0,0,,所以有很多机械装备，所以这都是机械装置
Dialogue: 0,0:12:57.46,0:13:00.34,English,,0,0,0,,So the mechanical nature of a rotating disc
Dialogue: 0,0:12:57.46,0:13:00.34,Chinese,,0,0,0,,所以旋转盘的机械性质
Dialogue: 0,0:13:00.82,0:13:05.42,English,,0,0,0,,Means it's going to be slower right then DRAMs and SRAMs 
Dialogue: 0,0:13:00.82,0:13:05.42,Chinese,,0,0,0,,意味着它会比DRAM和SRAM慢
Dialogue: 0,0:13:06.30,0:13:10.66,English,,0,0,0,,And there's also electronics like it's like a little computer in firmware
Dialogue: 0,0:13:06.30,0:13:10.66,Chinese,,0,0,0,,而且还有电子设备，就像固件中的一台小电脑一样
Dialogue: 0,0:13:11.08,0:13:18.80,English,,0,0,0,,That that actually controls the operation of this drive that controls how this arm goes back and forth
Dialogue: 0,0:13:11.08,0:13:18.80,Chinese,,0,0,0,,这实际上控制了该驱动器的操作，该驱动器控制该臂如何来回移动
Dialogue: 0,0:13:20.06,0:13:24.82,English,,0,0,0,,And and and controls how the data is read off of the the read/write head
Dialogue: 0,0:13:20.06,0:13:24.82,Chinese,,0,0,0,,并且和控制如何从读/写头读取数据
Dialogue: 0,0:13:25.76,0:13:32.02,English,,0,0,0,,So just in a little more detail we can think of these disks consists of platters
Dialogue: 0,0:13:25.76,0:13:32.02,Chinese,,0,0,0,,因此，我们可以想到这些磁盘由盘片组成
Dialogue: 0,0:13:32.02,0:13:34.82,English,,0,0,0,,Each platter has two surfaces the top and a bottom
Dialogue: 0,0:13:32.02,0:13:34.82,Chinese,,0,0,0,,每个盘片顶部和底部有两个表面
Dialogue: 0,0:13:35.98,0:13:41.70,English,,0,0,0,,And then each surface consists of these trees are concentric rings  called tracks
Dialogue: 0,0:13:35.98,0:13:41.70,Chinese,,0,0,0,,然后每个表面由这些树组成的同心环称为轨道
Dialogue: 0,0:13:43.28,0:13:49.94,English,,0,0,0,,And then each track consists of us it consists of sectors which contain the data
Dialogue: 0,0:13:43.28,0:13:49.94,Chinese,,0,0,0,,然后每个轨道由我们组成，它由包含数据的扇区组成
Dialogue: 0,0:13:50.70,0:13:58.98,English,,0,0,0,,So typically 512,512 bits, oh I'm sorry bytes 
Dialogue: 0,0:13:50.70,0:13:58.98,Chinese,,0,0,0,,所以通常512,512位，哦，对不起，字节
Dialogue: 0,0:14:01.06,0:14:04.26,English,,0,0,0,,And then except these tracks are separated by gaps
Dialogue: 0,0:14:01.06,0:14:04.26,Chinese,,0,0,0,,然后除了这些轨道被间隙分开
Dialogue: 0,0:14:04.96,0:14:09.00,English,,0,0,0,,That goat that these gaps like right here that don't contain data
Dialogue: 0,0:14:04.96,0:14:09.00,Chinese,,0,0,0,,那个山羊，这些差距就在这里，不包含数据
Dialogue: 0,0:14:12.72,0:14:17.40,English,,0,0,0,,Now platters are aligned on top of each other on the spindle
Dialogue: 0,0:14:12.72,0:14:17.40,Chinese,,0,0,0,,现在盘片在主轴上彼此对齐
Dialogue: 0,0:14:18.08,0:14:21.64,English,,0,0,0,,And so tracks that are aligned on the different surfaces
Dialogue: 0,0:14:18.08,0:14:21.64,Chinese,,0,0,0,,因此，在不同表面上对齐的轨道
Dialogue: 0,0:14:22.20,0:14:26.38,English,,0,0,0,,Such as this track here on those the collection of those
Dialogue: 0,0:14:22.20,0:14:26.38,Chinese,,0,0,0,,比如这条轨道就在那些收集那些
Dialogue: 0,0:14:26.88,0:14:31.30,English,,0,0,0,,Tracks form what we call a cylinder okay because it has a cylindrical shape
Dialogue: 0,0:14:26.88,0:14:31.30,Chinese,,0,0,0,,轨道形成我们所谓的圆柱形，因为它具有圆柱形状
Dialogue: 0,0:14:33.08,0:14:37.86,English,,0,0,0,,Now the capacity of disks is that the number of bits that can be stored 
Dialogue: 0,0:14:33.08,0:14:37.86,Chinese,,0,0,0,,现在磁盘的容量就是可以存储的位数
Dialogue: 0,0:14:39.94,0:14:46.23,English,,0,0,0,,And vendors kind of they all dis vendors use they quote the capacity in gigabytes
Dialogue: 0,0:14:39.94,0:14:46.23,Chinese,,0,0,0,,他们所有供应商都使用他们引用容量为千兆字节的供应商
Dialogue: 0,0:14:46.23,0:14:57.00,English,,0,0,0,,But where a gigabyte is 10^9 bytes right instead of 2^20,okay like like you would expect
Dialogue: 0,0:14:46.23,0:14:57.00,Chinese,,0,0,0,,但是，如果一个千兆字节是10 ^ 9字节而不是2 ^ 20，那么就像你期望的那样
Dialogue: 0,0:14:57.92,0:15:00.84,English,,0,0,0,,So what...I'm not sure why they do this
Dialogue: 0,0:14:57.92,0:15:00.84,Chinese,,0,0,0,,那么......我不确定他们为什么这样做
Dialogue: 0,0:15:01.32,0:15:08.28,English,,0,0,0,,But it allows by by quoting their capacity and gigabytes in 10^9 bytes
Dialogue: 0,0:15:01.32,0:15:08.28,Chinese,,0,0,0,,但它允许通过引用10 ^ 9字节的容量和千兆字节
Dialogue: 0,0:15:08.93,0:15:11.24,English,,0,0,0,,It's a bigger number right
Dialogue: 0,0:15:08.93,0:15:11.24,Chinese,,0,0,0,,这是一个更大的数字
Dialogue: 0,0:15:11.60,0:15:15.40,English,,0,0,0,,So it looks better it looks like there's more information
Dialogue: 0,0:15:11.60,0:15:15.40,Chinese,,0,0,0,,所以看起来好像有更多的信息
Dialogue: 0,0:15:15.40,0:15:20.36,English,,0,0,0,,It's a little I don't really know why they do it but I think that's why it is
Dialogue: 0,0:15:15.40,0:15:20.36,Chinese,,0,0,0,,这有点我不知道为什么他们这样做但我认为这就是为什么
Dialogue: 0,0:15:21.08,0:15:27.13,English,,0,0,0,,And it's one of those little bit annoying things that we just have to just  know about and get used to
Dialogue: 0,0:15:21.08,0:15:27.13,Chinese,,0,0,0,,这是我们必须了解并习惯的那些有点恼人的事情之一
Dialogue: 0,0:15:27.98,0:15:34.80,English,,0,0,0,,Now the capacity is determined by 2 independent technology factors
Dialogue: 0,0:15:27.98,0:15:34.80,Chinese,,0,0,0,,现在容量由2个独立的技术因素决定
Dialogue: 0,0:15:35.38,0:15:43.46,English,,0,0,0,,One is the recording density so that's how many bits can you pack into a single sector
Dialogue: 0,0:15:35.38,0:15:43.46,Chinese,,0,0,0,,一个是记录密度，因此你可以将多少位打包到一个扇区中
Dialogue: 0,0:15:44.64,0:15:50.74,English,,0,0,0,,Or porous or at least a portion of a track
Dialogue: 0,0:15:44.64,0:15:50.74,Chinese,,0,0,0,,或多孔或至少一部分轨道
Dialogue: 0,0:15:51.56,0:15:56.78,English,,0,0,0,,And then the track density which is sort of how close can you put those tracks together
Dialogue: 0,0:15:51.56,0:15:56.78,Chinese,,0,0,0,,然后是轨道密度，这是你将这些轨道放在一起的距离
Dialogue: 0,0:15:57.64,0:16:02.90,English,,0,0,0,,And then the product of those two is what's called the areal density and that determines the overall capacity of the disc
Dialogue: 0,0:15:57.64,0:16:02.90,Chinese,,0,0,0,,然后这两者的产物就是所谓的面密度，它决定了光盘的整体容量
Dialogue: 0,0:16:03.02,0:16:10.18,English,,0,0,0,,So the higher the areal capacity the more bits you can squeeze on to that onto that surface
Dialogue: 0,0:16:03.02,0:16:10.18,Chinese,,0,0,0,,因此，面积容量越大，你可以在该表面上挤压的位数就越多
Dialogue: 0,0:16:10.90,0:16:17.26,English,,0,0,0,,Now in the old days when aerial densities were fairly low
Dialogue: 0,0:16:10.90,0:16:17.26,Chinese,,0,0,0,,现在，在过去，空中密度相当低
Dialogue: 0,0:16:18.16,0:16:22.22,English,,0,0,0,,Each each track on the surface would have the same number of sectors
Dialogue: 0,0:16:18.16,0:16:22.22,Chinese,,0,0,0,,表面上的每个轨道将具有相同数量的扇区
Dialogue: 0,0:16:23.64,0:16:25.96,English,,0,0,0,,Okay so there was a constant number of sectors per track
Dialogue: 0,0:16:23.64,0:16:25.96,Chinese,,0,0,0,,好的，所以每个轨道的扇区数量不变
Dialogue: 0,0:16:26.88,0:16:31.60,English,,0,0,0,,So now what happens as you as your tracks go from the
Dialogue: 0,0:16:26.88,0:16:31.60,Chinese,,0,0,0,,所以现在发生了什么，因为你的轨道来自
Dialogue: 0,0:16:32.16,0:16:36.54,English,,0,0,0,,You know near the whole by the spindle as they go as they move outward
Dialogue: 0,0:16:32.16,0:16:36.54,Chinese,,0,0,0,,当它们向外移动时，你知道它们在整个过程中靠近它们
Dialogue: 0,0:16:37.56,0:16:43.88,English,,0,0,0,,Right if you have the same number of sectors with the same bit density
Dialogue: 0,0:16:37.56,0:16:43.88,Chinese,,0,0,0,,如果你具有相同数量的具有相同位密度的扇区，则正确
Dialogue: 0,0:16:45.08,0:16:49.64,English,,0,0,0,,That the gaps between sectors are going to get bigger and bigger as you go out
Dialogue: 0,0:16:45.08,0:16:49.64,Chinese,,0,0,0,,当你外出时，各个部门之间的差距会变得越来越大
Dialogue: 0,0:16:49.84,0:16:52.86,English,,0,0,0,,And you're going to be wasting more and more of your space
Dialogue: 0,0:16:49.84,0:16:52.86,Chinese,,0,0,0,,而且你将浪费越来越多的空间
Dialogue: 0,0:16:53.32,0:16:57.50,English,,0,0,0,,So at when aerial densities were fairly low this was okay
Dialogue: 0,0:16:53.32,0:16:57.50,Chinese,,0,0,0,,因此，当空中密度相当低时，这是可以的
Dialogue: 0,0:16:57.98,0:17:01.44,English,,0,0,0,,But after a while it just became not okay to waste that much room
Dialogue: 0,0:16:57.98,0:17:01.44,Chinese,,0,0,0,,但过了一段时间，浪费那么多空间就变得不合适了
Dialogue: 0,0:17:01.92,0:17:05.76,English,,0,0,0,,So what modern systems do is they partition the tracks into these
Dialogue: 0,0:17:01.92,0:17:05.76,Chinese,,0,0,0,,所以现代系统所做的是将轨道划分为这些
Dialogue: 0,0:17:06.16,0:17:08.06,English,,0,0,0,,So called rook recording zones
Dialogue: 0,0:17:06.16,0:17:08.06,Chinese,,0,0,0,,所谓的车记录区
Dialogue: 0,0:17:08.54,0:17:12.82,English,,0,0,0,,Where each recording zone such as this right here
Dialogue: 0,0:17:08.54,0:17:12.82,Chinese,,0,0,0,,这里的每个记录区都在这里
Dialogue: 0,0:17:13.18,0:17:17.64,English,,0,0,0,,Each recording zone has a consonant number of sectors
Dialogue: 0,0:17:13.18,0:17:17.64,Chinese,,0,0,0,,每个记录区域具有辅音数量的扇区
Dialogue: 0,0:17:18.24,0:17:22.04,English,,0,0,0,,So each track in a recording zone has the same number of sectors
Dialogue: 0,0:17:18.24,0:17:22.04,Chinese,,0,0,0,,因此，记录区中的每个轨道具有相同数量的扇区
Dialogue: 0,0:17:22.86,0:17:27.92,English,,0,0,0,,And of course as you move outward if you move outward in the recording zone
Dialogue: 0,0:17:22.86,0:17:27.92,Chinese,,0,0,0,,当然，如果你在记录区向外移动，你会向外移动
Dialogue: 0,0:17:28.68,0:17:30.60,English,,0,0,0,,You're going to have bigger and bigger gaps
Dialogue: 0,0:17:28.68,0:17:30.60,Chinese,,0,0,0,,你将有越来越大的差距
Dialogue: 0,0:17:30.72,0:17:33.72,English,,0,0,0,,But then you start a new recording zone
Dialogue: 0,0:17:30.72,0:17:33.72,Chinese,,0,0,0,,但是你开始一个新的录音区
Dialogue: 0,0:17:34.12,0:17:39.52,English,,0,0,0,,That will have more sectors per track and then within that
Dialogue: 0,0:17:34.12,0:17:39.52,Chinese,,0,0,0,,那将是每个轨道更多的扇区，然后在其中
Dialogue: 0,0:17:40.32,0:17:46.08,English,,0,0,0,,So you can see in this outer in this outer zone you have more you have more sectors
Dialogue: 0,0:17:40.32,0:17:46.08,Chinese,,0,0,0,,所以你可以在这个外部区域看到你有更多的扇区
Dialogue: 0,0:17:46.56,0:17:48.18,English,,0,0,0,,Than you do on this inner zone
Dialogue: 0,0:17:46.56,0:17:48.18,Chinese,,0,0,0,,比你在这个内区做的
Dialogue: 0,0:17:49.18,0:17:56.66,English,,0,0,0,,Okay so that's a way to kind of deal with that sort of that growth in the gaps to keep it from getting too large
Dialogue: 0,0:17:49.18,0:17:56.66,Chinese,,0,0,0,,好吧，这是一种处理差距增长的方法，以防止它变得太大
Dialogue: 0,0:17:57.42,0:18:03.90,English,,0,0,0,,And so because we don't really have the number of sectors per track isn't constant
Dialogue: 0,0:17:57.42,0:18:03.90,Chinese,,0,0,0,,因此，因为我们并没有真正拥有每个轨道的扇区数量并不是一成不变的
Dialogue: 0,0:18:03.90,0:18:07.22,English,,0,0,0,,We'll use an Average the average sectors per track across 
Dialogue: 0,0:18:03.90,0:18:07.22,Chinese,,0,0,0,,我们将使用平均每个轨道的平均扇区
Dialogue: 0,0:18:07.78,0:18:11.58,English,,0,0,0,,All recording zones when we do serve our capacity estimates
Dialogue: 0,0:18:07.78,0:18:11.58,Chinese,,0,0,0,,当我们提供容量估算时，所有记录区域
Dialogue: 0,0:18:13.38,0:18:18.32,English,,0,0,0,,Okay so you can imagine the formula for computing the disk capacity is fairly straightforward
Dialogue: 0,0:18:13.38,0:18:18.32,Chinese,,0,0,0,,好的，你可以想象计算磁盘容量的公式是相当简单的
Dialogue: 0,0:18:18.70,0:18:21.28,English,,0,0,0,,It's the number of bytes per sector
Dialogue: 0,0:18:18.70,0:18:21.28,Chinese,,0,0,0,,它是每个扇区的字节数
Dialogue: 0,0:18:22.50,0:18:24.90,English,,0,0,0,,Times the average number of sectors per track
Dialogue: 0,0:18:22.50,0:18:24.90,Chinese,,0,0,0,,计算每个轨道的平均扇区数
Dialogue: 0,0:18:26.10,0:18:30.08,English,,0,0,0,,Times the average number of tracks per surface times the number of surfaces per platter
Dialogue: 0,0:18:26.10,0:18:30.08,Chinese,,0,0,0,,将每个表面的平均轨道数乘以每个盘的表面数
Dialogue: 0,0:18:30.66,0:18:32.80,English,,0,0,0,,Times the number of platters per disk okay
Dialogue: 0,0:18:30.66,0:18:32.80,Chinese,,0,0,0,,每盘磁盘数量好吧
Dialogue: 0,0:18:35.78,0:18:37.58,English,,0,0,0,,Now let's look at how just work
Dialogue: 0,0:18:35.78,0:18:37.58,Chinese,,0,0,0,,现在让我们来看看它是如何工作的
Dialogue: 0,0:18:39.04,0:18:42.78,English,,0,0,0,,So these these surfaces are spinning at a fixed rotational rate
Dialogue: 0,0:18:39.04,0:18:42.78,Chinese,,0,0,0,,因此，这些表面以固定的旋转速度旋转
Dialogue: 0,0:18:42.78,0:18:49.92,English,,0,0,0,,Now a typical rate may be 7200 rpm s is a fairly common rotational rate
Dialogue: 0,0:18:42.78,0:18:49.92,Chinese,,0,0,0,,现在典型的速率可能是7200转/分钟，这是相当常见的转速
Dialogue: 0,0:18:51.06,0:18:59.25,English,,0,0,0,,So the disc is spinning around you can see this pretty proud of that
Dialogue: 0,0:18:51.06,0:18:59.25,Chinese,,0,0,0,,所以光盘在旋转，你可以看到它为此感到自豪
Dialogue: 0,0:19:00.08,0:19:04.04,English,,0,0,0,,So it's spinning around counter clockwise and then the arm
Dialogue: 0,0:19:00.08,0:19:04.04,Chinese,,0,0,0,,所以它逆时针转动，然后是手臂
Dialogue: 0,0:19:05.52,0:19:10.60,English,,0,0,0,,Moves radially here we go
Dialogue: 0,0:19:05.52,0:19:10.60,Chinese,,0,0,0,,我们去的地方径向移动
Dialogue: 0,0:19:10.68,0:19:14.22,English,,0,0,0,,The arm moves radially and it can go over any of the tracks
Dialogue: 0,0:19:10.68,0:19:14.22,Chinese,,0,0,0,,臂径向移动，可以越过任何轨道
Dialogue: 0,0:19:16.72,0:19:17.84,English,,0,0,0,,Okay all right that's enough
Dialogue: 0,0:19:16.72,0:19:17.84,Chinese,,0,0,0,,好的，这就够了
Dialogue: 0,0:19:20.58,0:19:24.20,English,,0,0,0,,Okay now when you have multiple platters
Dialogue: 0,0:19:20.58,0:19:24.20,Chinese,,0,0,0,,好的，现在你有多个拼盘
Dialogue: 0,0:19:24.90,0:19:32.14,English,,0,0,0,,Each one of these each one of these there's actually multiple arms and there's a read/write head on each surface
Dialogue: 0,0:19:24.90,0:19:32.14,Chinese,,0,0,0,,这些中的每一个实际上都有多个臂，每个表面上都有一个读/写头
Dialogue: 0,0:19:32.14,0:19:38.70,English,,0,0,0,,So if the platters has to - if - if each side of the platter
Dialogue: 0,0:19:32.14,0:19:38.70,Chinese,,0,0,0,,因此，如果拼盘必须 - 如果 - 如果 - 如果 - 拼盘的每一面
Dialogue: 0,0:19:39.24,0:19:42.84,English,,0,0,0,,Is coated with this magnetic material then
Dialogue: 0,0:19:39.24,0:19:42.84,Chinese,,0,0,0,,然后涂上这种磁性材料
Dialogue: 0,0:19:42.84,0:19:45.86,English,,0,0,0,,You'll have you have a read/write head on each side
Dialogue: 0,0:19:42.84,0:19:45.86,Chinese,,0,0,0,,你会在每一侧都有一个读/写头
Dialogue: 0,0:19:46.32,0:19:48.70,English,,0,0,0,,And then these are all connected they kind of move together
Dialogue: 0,0:19:46.32,0:19:48.70,Chinese,,0,0,0,,然后这些都是连接在一起的
Dialogue: 0,0:19:49.12,0:19:53.84,English,,0,0,0,,Now originally these these read/write heads would be they were rigid
Dialogue: 0,0:19:49.12,0:19:53.84,Chinese,,0,0,0,,现在最初这些读/写头将是僵硬的
Dialogue: 0,0:19:54.76,0:19:57.34,English,,0,0,0,,Right because the densities tracked densities weren't that high
Dialogue: 0,0:19:54.76,0:19:57.34,Chinese,,0,0,0,,正确的原因是密度跟踪密度不是那么高
Dialogue: 0,0:19:58.04,0:20:03.18,English,,0,0,0,,So they could they could just sort of licks and even though the tracks didn't align perfectly
Dialogue: 0,0:19:58.04,0:20:03.18,Chinese,,0,0,0,,因此，他们可以只是舔舔，即使轨道没有完美对齐
Dialogue: 0,0:20:03.48,0:20:07.80,English,,0,0,0,,They could just sort of they could they could still cover
Dialogue: 0,0:20:03.48,0:20:07.80,Chinese,,0,0,0,,他们可能只是他们可以覆盖的那种
Dialogue: 0,0:20:07.90,0:20:14.40,English,,0,0,0,,The read/write heads could still cover the tracks with these fixed  with these fixed arms
Dialogue: 0,0:20:07.90,0:20:14.40,Chinese,,0,0,0,,读/写磁头仍然可以用这些固定臂固定这些磁道
Dialogue: 0,0:20:14.40,0:20:17.84,English,,0,0,0,,But nowadays that the densities are so high
Dialogue: 0,0:20:14.40,0:20:17.84,Chinese,,0,0,0,,但现在密度如此之高
Dialogue: 0,0:20:18.06,0:20:22.54,English,,0,0,0,,That they actually the controller can actually move the read/write heads a little bit
Dialogue: 0,0:20:18.06,0:20:22.54,Chinese,,0,0,0,,他们实际上控制器实际上可以移动读/写头一点点
Dialogue: 0,0:20:22.66,0:20:27.24,English,,0,0,0,,So that it matches up with that all of the tracks on all of the surfaces
Dialogue: 0,0:20:22.66,0:20:27.24,Chinese,,0,0,0,,这样它就匹配了所有表面上的所有轨道
Dialogue: 0,0:20:30.52,0:20:34.24,English,,0,0,0,,Okay so let's look at how this works how we read data
Dialogue: 0,0:20:30.52,0:20:34.24,Chinese,,0,0,0,,好的，让我们看一下我们如何读取数据的方式
Dialogue: 0,0:20:36.18,0:20:37.34,English,,0,0,0,,So we have our
Dialogue: 0,0:20:36.18,0:20:37.34,Chinese,,0,0,0,,所以我们有了
Dialogue: 0,0:20:38.98,0:20:42.96,English,,0,0,0,,This is our this is our arm and the tip of the arrow is the read/write head
Dialogue: 0,0:20:38.98,0:20:42.96,Chinese,,0,0,0,,这是我们的这是我们的手臂，箭头的尖端是读/写头
Dialogue: 0,0:20:43.38,0:20:48.44,English,,0,0,0,,And it's positioned and the platter is rotating counterclockwise
Dialogue: 0,0:20:43.38,0:20:48.44,Chinese,,0,0,0,,并且它被定位并且盘片逆时针旋转
Dialogue: 0,0:20:49.30,0:20:52.48,English,,0,0,0,,And it's positioned just ready to read the blue sector
Dialogue: 0,0:20:49.30,0:20:52.48,Chinese,,0,0,0,,它的位置准备好阅读蓝色部门
Dialogue: 0,0:20:53.50,0:20:57.18,English,,0,0,0,,So it as the blue sector spins underneath the read/write head
Dialogue: 0,0:20:53.50,0:20:57.18,Chinese,,0,0,0,,因此蓝色扇区在读/写头下旋转
Dialogue: 0,0:20:57.60,0:21:03.52,English,,0,0,0,,It senses those bits and sends them up to the controller which passes them back up to the  the CPU
Dialogue: 0,0:20:57.60,0:21:03.52,Chinese,,0,0,0,,它会检测这些位并将它们发送到控制器，控制器将它们传递回CPU
Dialogue: 0,0:21:04.26,0:21:07.42,English,,0,0,0,,And now the CPU is requested that the disk
Dialogue: 0,0:21:04.26,0:21:07.42,Chinese,,0,0,0,,现在CPU请求磁盘
Dialogue: 0,0:21:07.80,0:21:10.58,English,,0,0,0,,It's requested the red data from the red sector
Dialogue: 0,0:21:07.80,0:21:10.58,Chinese,,0,0,0,,它要求红色部门的红色数据
Dialogue: 0,0:21:11.82,0:21:15.14,English,,0,0,0,,So we have to take the controller takes that read/write head
Dialogue: 0,0:21:11.82,0:21:15.14,Chinese,,0,0,0,,所以我们必须把控制器带到读/写头
Dialogue: 0,0:21:15.84,0:21:18.74,English,,0,0,0,,Moves it back to reds track
Dialogue: 0,0:21:15.84,0:21:18.74,Chinese,,0,0,0,,将其移回红色轨道
Dialogue: 0,0:21:19.86,0:21:22.40,English,,0,0,0,,And then waits for it to spin around and
Dialogue: 0,0:21:19.86,0:21:22.40,Chinese,,0,0,0,,然后等待它旋转
Dialogue: 0,0:21:24.82,0:21:26.70,English,,0,0,0,,And to the to the read/write head
Dialogue: 0,0:21:24.82,0:21:26.70,Chinese,,0,0,0,,并且到读/写头
Dialogue: 0,0:21:29.26,0:21:33.26,English,,0,0,0,,And then it reads that that red that red sector
Dialogue: 0,0:21:29.26,0:21:33.26,Chinese,,0,0,0,,然后它读取红色那个红色扇区
Dialogue: 0,0:21:34.70,0:21:38.82,English,,0,0,0,,Okay so when we first so there's really three components going on here that determine
Dialogue: 0,0:21:34.70,0:21:38.82,Chinese,,0,0,0,,好的，所以当我们第一次这样时，确实有三个组件在这里确定
Dialogue: 0,0:21:38.82,0:21:41.12,English,,0,0,0,,How long it takes to read one of these sectors
Dialogue: 0,0:21:38.82,0:21:41.12,Chinese,,0,0,0,,阅读其中一个部门需要多长时间
Dialogue: 0,0:21:43.06,0:21:46.80,English,,0,0,0,,The when we move the head that's called a seek
Dialogue: 0,0:21:43.06,0:21:46.80,Chinese,,0,0,0,,当我们移动被称为搜寻的头部时
Dialogue: 0,0:21:47.62,0:21:51.98,English,,0,0,0,,When we waited for the red track to sort of rotate around
Dialogue: 0,0:21:47.62,0:21:51.98,Chinese,,0,0,0,,当我们等待红色轨道旋转时
Dialogue: 0,0:21:51.98,0:21:55.36,English,,0,0,0,,That's called the rotational latency so however long it takes
Dialogue: 0,0:21:51.98,0:21:55.36,Chinese,,0,0,0,,这称为旋转延迟，因此需要很长时间
Dialogue: 0,0:21:56.18,0:22:01.12,English,,0,0,0,,On average it will be half of the half of the time
Dialogue: 0,0:21:56.18,0:22:01.12,Chinese,,0,0,0,,平均而言，这将是半个时间的一半
Dialogue: 0,0:22:01.88,0:22:05.28,English,,0,0,0,,It takes for the entire to circle all the way around
Dialogue: 0,0:22:01.88,0:22:05.28,Chinese,,0,0,0,,整个过程需要一路绕圈
Dialogue: 0,0:22:06.08,0:22:08.44,English,,0,0,0,,And then there's the data transfer which is
Dialogue: 0,0:22:06.08,0:22:08.44,Chinese,,0,0,0,,然后是数据传输
Dialogue: 0,0:22:08.96,0:22:10.46,English,,0,0,0,,Sort of how long it takes for that
Dialogue: 0,0:22:08.96,0:22:10.46,Chinese,,0,0,0,,这需要多长时间
Dialogue: 0,0:22:11.10,0:22:13.38,English,,0,0,0,,For that track to pass under the read/write head
Dialogue: 0,0:22:11.10,0:22:13.38,Chinese,,0,0,0,,使该轨道在读/写头下通过
Dialogue: 0,0:22:15.90,0:22:18.46,English,,0,0,0,,Now the reason the reason it's important to know this is that
Dialogue: 0,0:22:15.90,0:22:18.46,Chinese,,0,0,0,,现在知道这一点的重要性的原因是
Dialogue: 0,0:22:19.20,0:22:23.48,English,,0,0,0,,These three components you add them together and that's the that's what your average
Dialogue: 0,0:22:19.20,0:22:23.48,Chinese,,0,0,0,,这三个组件将它们加在一起，这就是你的平均值
Dialogue: 0,0:22:23.62,0:22:25.70,English,,0,0,0,,X time it takes to access data
Dialogue: 0,0:22:23.62,0:22:25.70,Chinese,,0,0,0,,X访问数据所需的时间
Dialogue: 0,0:22:27.04,0:22:30.22,English,,0,0,0,,That time is dominated by the seek time
Dialogue: 0,0:22:27.04,0:22:30.22,Chinese,,0,0,0,,那段时间由寻道时间占主导地位
Dialogue: 0,0:22:30.54,0:22:34.42,English,,0,0,0,,So seek times are measured in milliseconds right so we're moving this head there's
Dialogue: 0,0:22:30.54,0:22:34.42,Chinese,,0,0,0,,所以寻找时间是以毫秒为单位测量的，所以我们正在把这个头移到那里
Dialogue: 0,0:22:35.14,0:22:40.34,English,,0,0,0,,This there's a servo that has to fire up and there's actual mechanical motion
Dialogue: 0,0:22:35.14,0:22:40.34,Chinese,,0,0,0,,这是一个必须启动的伺服系统和实际的机械运动
Dialogue: 0,0:22:40.36,0:22:42.82,English,,0,0,0,,And that that takes time
Dialogue: 0,0:22:40.36,0:22:42.82,Chinese,,0,0,0,,这需要时间
Dialogue: 0,0:22:43.34,0:22:50.64,English,,0,0,0,,And it's on the order of three to nine milliseconds and this has been true for decades
Dialogue: 0,0:22:43.34,0:22:50.64,Chinese,,0,0,0,,它大约在3到9毫秒之间，这已经存在了几十年
Dialogue: 0,0:22:50.86,0:22:53.84,English,,0,0,0,,Right so this this value is not changing right
Dialogue: 0,0:22:50.86,0:22:53.84,Chinese,,0,0,0,,对，所以这个值没有改变
Dialogue: 0,0:22:53.84,0:22:56.66,English,,0,0,0,,There's just sort of fundamental mechanical limits
Dialogue: 0,0:22:53.84,0:22:56.66,Chinese,,0,0,0,,这只是一种基本的机械限制
Dialogue: 0,0:22:57.36,0:23:03.64,English,,0,0,0,,That make it very difficult to to decrease this this value
Dialogue: 0,0:22:57.36,0:23:03.64,Chinese,,0,0,0,,这使得降低这个值非常困难
Dialogue: 0,0:23:04.40,0:23:05.82,English,,0,0,0,,Now the rotational latency
Dialogue: 0,0:23:04.40,0:23:05.82,Chinese,,0,0,0,,现在是旋转延迟
Dialogue: 0,0:23:08.82,0:23:16.38,English,,0,0,0,,The time that it takes to spin around will we'll call that the t average rotation
Dialogue: 0,0:23:08.82,0:23:16.38,Chinese,,0,0,0,,旋转所需的时间我们称之为平均旋转
Dialogue: 0,0:23:16.38,0:23:20.16,English,,0,0,0,,And then the time it takes to read the the bits will call t average transfer
Dialogue: 0,0:23:16.38,0:23:20.16,Chinese,,0,0,0,,然后，读取这些位所需的时间将调用t平均传输
Dialogue: 0,0:23:20.16,0:23:27.42,English,,0,0,0,,Okay so we have t average seek which is this seek time rotational latency and transfer time
Dialogue: 0,0:23:20.16,0:23:27.42,Chinese,,0,0,0,,好的，所以我们有平均搜索，即寻道时间旋转延迟和传输时间
Dialogue: 0,0:23:30.10,0:23:34.50,English,,0,0,0,,And now if we just take some typical numbers   and plug those in
Dialogue: 0,0:23:30.10,0:23:34.50,Chinese,,0,0,0,,现在，如果我们只是采取一些典型的数字并插入其中
Dialogue: 0,0:23:35.60,0:23:39.32,English,,0,0,0,,You see that our seek time is on the order of milliseconds
Dialogue: 0,0:23:35.60,0:23:39.32,Chinese,,0,0,0,,你看，我们的寻道时间是毫秒级
Dialogue: 0,0:23:39.96,0:23:42.78,English,,0,0,0,,The rotational rate is also on the order of milliseconds right
Dialogue: 0,0:23:39.96,0:23:42.78,Chinese,,0,0,0,,旋转速率也是毫秒级
Dialogue: 0,0:23:42.78,0:23:47.26,English,,0,0,0,,So there's there's also mechanical limits and how fast you can you can spin these around
Dialogue: 0,0:23:42.78,0:23:47.26,Chinese,,0,0,0,,所以还有机械限制，你可以用多快的速度旋转它们
Dialogue: 0,0:23:48.12,0:23:53.84,English,,0,0,0,,The access time and the transfer time  is very small
Dialogue: 0,0:23:48.12,0:23:53.84,Chinese,,0,0,0,,访问时间和传输时间非常短
Dialogue: 0,0:23:53.92,0:24:00.62,English,,0,0,0,,So it's orders of magnitude smaller because you just have to read a few that the bits that are in one sector
Dialogue: 0,0:23:53.92,0:24:00.62,Chinese,,0,0,0,,所以它的数量级要小一些，因为你只需要阅读一些扇区中的位
Dialogue: 0,0:24:02.30,0:24:10.14,English,,0,0,0,,Okay so if you look you can see that the total access time is dominated by seek  and rotational latency
Dialogue: 0,0:24:02.30,0:24:10.14,Chinese,,0,0,0,,好的，所以如果你看，你可以看到总访问时间主要是搜索和旋转延迟
Dialogue: 0,0:24:10.78,0:24:15.56,English,,0,0,0,,So you know a good rule of thumb just for sort of estimating how long it takes to read from a disk
Dialogue: 0,0:24:10.78,0:24:15.56,Chinese,,0,0,0,,所以你知道一个好的经验法则，只是为了估计从磁盘读取所需的时间
Dialogue: 0,0:24:15.56,0:24:19.40,English,,0,0,0,,It is just take twice the seek the seek time and you'll be pretty close
Dialogue: 0,0:24:15.56,0:24:19.40,Chinese,,0,0,0,,只需要两次寻找寻找时间，你就会非常接近
Dialogue: 0,0:24:20.20,0:24:24.60,English,,0,0,0,,And basically the transfer time is you get that for free
Dialogue: 0,0:24:20.20,0:24:24.60,Chinese,,0,0,0,,基本上转移时间是你免费获得的
Dialogue: 0,0:24:26.66,0:24:29.26,English,,0,0,0,,Now here's the here's the important thing to know about disks
Dialogue: 0,0:24:26.66,0:24:29.26,Chinese,,0,0,0,,现在，这里有关于磁盘的重要信息
Dialogue: 0,0:24:30.70,0:24:36.20,English,,0,0,0,,We SRAM access times about four nanoseconds to get a double word
Dialogue: 0,0:24:30.70,0:24:36.20,Chinese,,0,0,0,,我们的SRAM访问时间大约为4纳秒，以获得双字
Dialogue: 0,0:24:36.62,0:24:40.24,English,,0,0,0,,Dram is about 60 nanoseconds
Dialogue: 0,0:24:36.62,0:24:40.24,Chinese,,0,0,0,,Dram大约是60纳秒
Dialogue: 0,0:24:40.24,0:24:45.42,English,,0,0,0,,So DRAM is about an order of magnitude slower than SRAM
Dialogue: 0,0:24:40.24,0:24:45.42,Chinese,,0,0,0,,所以DRAM比SRAM慢一个数量级
Dialogue: 0,0:24:47.18,0:24:50.70,English,,0,0,0,,But disk is 40,000 times slower than SRAM
Dialogue: 0,0:24:47.18,0:24:50.70,Chinese,,0,0,0,,但是磁盘比SRAM慢40,000倍
Dialogue: 0,0:24:51.32,0:24:54.06,English,,0,0,0,,So that's 4,000 orders of magnitude difference
Dialogue: 0,0:24:51.32,0:24:54.06,Chinese,,0,0,0,,这就是4,000个数量级的差异
Dialogue: 0,0:24:54.94,0:25:01.42,English,,0,0,0,,That's huge and it's it's 250 times orders of magnitude slower than DRAMs
Dialogue: 0,0:24:54.94,0:25:01.42,Chinese,,0,0,0,,这是巨大的，它比DRAM慢250倍
Dialogue: 0,0:25:02.82,0:25:07.30,English,,0,0,0,,So the there's a big gap between DRAM and SRAM
Dialogue: 0,0:25:02.82,0:25:07.30,Chinese,,0,0,0,,所以DRAM和SRAM之间存在很大差距
Dialogue: 0,0:25:07.30,0:25:15.16,English,,0,0,0,,And there's an even bigger gap between disk and other memory types
Dialogue: 0,0:25:07.30,0:25:15.16,Chinese,,0,0,0,,磁盘和其他内存类型之间存在更大的差距
Dialogue: 0,0:25:17.12,0:25:20.08,English,,0,0,0,,Now modern disks present a much simpler view
Dialogue: 0,0:25:17.12,0:25:20.08,Chinese,,0,0,0,,现在，现代磁盘呈现出更简单的视图
Dialogue: 0,0:25:20.48,0:25:29.08,English,,0,0,0,,Than so we then this track cylinder sector geometry
Dialogue: 0,0:25:20.48,0:25:29.08,Chinese,,0,0,0,,那么我们就这样跟踪汽缸扇形几何形状
Dialogue: 0,0:25:29.72,0:25:32.67,English,,0,0,0,,So modern modern disk controllers actually present
Dialogue: 0,0:25:29.72,0:25:32.67,Chinese,,0,0,0,,所以现代现代磁盘控制器实际存在
Dialogue: 0,0:25:33.22,0:25:36.80,English,,0,0,0,,To the CPU they present the disk as a sequence of logical blocks
Dialogue: 0,0:25:33.22,0:25:36.80,Chinese,,0,0,0,,它们将磁盘作为一系列逻辑块提供给CPU
Dialogue: 0,0:25:37.82,0:25:40.70,English,,0,0,0,,Where each block is is a multiple of a sector size
Dialogue: 0,0:25:37.82,0:25:40.70,Chinese,,0,0,0,,每个块是扇区大小的倍数
Dialogue: 0,0:25:40.70,0:25:45.18,English,,0,0,0,,So this in simplest case a block is just a logical block is one sector
Dialogue: 0,0:25:40.70,0:25:45.18,Chinese,,0,0,0,,所以在最简单的情况下，块只是一个逻辑块就是一个扇区
Dialogue: 0,0:25:45.64,0:25:47.64,English,,0,0,0,,And then blocks are numbered starting at zero
Dialogue: 0,0:25:45.64,0:25:47.64,Chinese,,0,0,0,,然后块从零开始编号
Dialogue: 0,0:25:47.64,0:25:50.76,English,,0,0,0,,And they just go all the way up to some to some large number
Dialogue: 0,0:25:47.64,0:25:50.76,Chinese,,0,0,0,,他们只是一直到一些大的数字
Dialogue: 0,0:25:53.58,0:25:58.72,English,,0,0,0,,And then the the disk controller keeps the mapping maintains the mapping between logical blocks
Dialogue: 0,0:25:53.58,0:25:58.72,Chinese,,0,0,0,,然后磁盘控制器保持映射保持逻辑块之间的映射
Dialogue: 0,0:25:58.88,0:26:00.64,English,,0,0,0,,And the actual physical sectors
Dialogue: 0,0:25:58.88,0:26:00.64,Chinese,,0,0,0,,和实际的物理部门
Dialogue: 0,0:26:03.44,0:26:10.06,English,,0,0,0,,So as in the old saying is you know most interesting ideas in computer science are involve some form of indirection
Dialogue: 0,0:26:03.44,0:26:10.06,Chinese,,0,0,0,,因此，在古语中你知道计算机科学中最有趣的想法涉及某种形式的间接
Dialogue: 0,0:26:10.28,0:26:12.02,English,,0,0,0,,So this is a level of indirection
Dialogue: 0,0:26:10.28,0:26:12.02,Chinese,,0,0,0,,所以这是一个间接层面
Dialogue: 0,0:26:12.50,0:26:16.28,English,,0,0,0,,That provides you know this mapping between logical blocks and physical blocks
Dialogue: 0,0:26:12.50,0:26:16.28,Chinese,,0,0,0,,这让你了解逻辑块和物理块之间的映射
Dialogue: 0,0:26:17.04,0:26:21.48,English,,0,0,0,,So it allows disk controllers to take some cylinders and reserve them as spare cylinders
Dialogue: 0,0:26:17.04,0:26:21.48,Chinese,,0,0,0,,因此，它允许磁盘控制器采用一些气缸并将其保留为备用气缸
Dialogue: 0,0:26:22.10,0:26:24.04,English,,0,0,0,,That aren't mapped in illogical blocks
Dialogue: 0,0:26:22.10,0:26:24.04,Chinese,,0,0,0,,这不是映射在不合逻辑的块中
Dialogue: 0,0:26:24.90,0:26:29.54,English,,0,0,0,,And then if there's if one of the sectors goes bad in a cylinder
Dialogue: 0,0:26:24.90,0:26:29.54,Chinese,,0,0,0,,然后，如果有一个扇区在一个圆柱体中坏了
Dialogue: 0,0:26:29.96,0:26:38.22,English,,0,0,0,,That the disk controller can just copy the data over to a spare cylinder and then just keep going right
Dialogue: 0,0:26:29.96,0:26:38.22,Chinese,,0,0,0,,磁盘控制器可以将数据复制到备用柱面，然后继续向右移动
Dialogue: 0,0:26:38.22,0:26:46.18,English,,0,0,0,,So this is why your 4matic capacity is less than sort of the if you know if you counted the number of actual cylinders on the disk
Dialogue: 0,0:26:38.22,0:26:46.18,Chinese,,0,0,0,,因此，如果你知道是否计算了磁盘上实际气缸的数量，那么这就是你的4matic容量小于等级的原因
Dialogue: 0,0:26:46.50,0:26:49.52,English,,0,0,0,,Your 4matic capacity is less than the maximum capacity
Dialogue: 0,0:26:46.50,0:26:49.52,Chinese,,0,0,0,,你的4matic容量小于最大容量
Dialogue: 0,0:26:49.72,0:26:53.62,English,,0,0,0,,Because some of those cylinders are being reserved for failures
Dialogue: 0,0:26:49.72,0:26:53.62,Chinese,,0,0,0,,因为其中一些汽缸是为故障预留的
Dialogue: 0,0:26:57.80,0:27:04.18,English,,0,0,0,,Now devices like disks are connected to the to the CPU and the memory
Dialogue: 0,0:26:57.80,0:27:04.18,Chinese,,0,0,0,,现在，像磁盘这样的设备连接到CPU和内存
Dialogue: 0,0:27:05.54,0:27:09.82,English,,0,0,0,,Via the I/O bridge over another kind of bus called an I/O bus
Dialogue: 0,0:27:05.54,0:27:09.82,Chinese,,0,0,0,,通过I / O桥通过另一种称为I / O总线的总线
Dialogue: 0,0:27:11.46,0:27:19.50,English,,0,0,0,,This what I'm showing you now is actually not representative of modern systems
Dialogue: 0,0:27:11.46,0:27:19.50,Chinese,,0,0,0,,我现在向你展示的内容实际上并不代表现代系统
Dialogue: 0,0:27:19.50,0:27:23.82,English,,0,0,0,,It's representative of what was called the pci bus about five years ago
Dialogue: 0,0:27:19.50,0:27:23.82,Chinese,,0,0,0,,它代表了大约五年前所谓的pci总线
Dialogue: 0,0:27:24.26,0:27:31.36,English,,0,0,0,,Modern buses now are the pci bus is a broadcast bus meaning it's just a single set of wires
Dialogue: 0,0:27:24.26,0:27:31.36,Chinese,,0,0,0,,现代公交车现在是pci总线是广播总线，这意味着它只是一组电线
Dialogue: 0,0:27:32.12,0:27:36.78,English,,0,0,0,,So if any device us changes the values on those wires
Dialogue: 0,0:27:32.12,0:27:36.78,Chinese,,0,0,0,,因此，如果任何设备我们更改这些电线上的值
Dialogue: 0,0:27:37.08,0:27:39.84,English,,0,0,0,,Every device on that bus can see those values
Dialogue: 0,0:27:37.08,0:27:39.84,Chinese,,0,0,0,,该总线上的每个设备都可以看到这些值
Dialogue: 0,0:27:41.48,0:27:46.26,English,,0,0,0,,Okay that's called a broadcast bus and it's a simplest kind of way to hook things together
Dialogue: 0,0:27:41.48,0:27:46.26,Chinese,,0,0,0,,好的，它被称为广播总线，它是将事物连接在一起的最简单的方式
Dialogue: 0,0:27:47.84,0:27:51.76,English,,0,0,0,,Modern systems use a bus structure called pci express
Dialogue: 0,0:27:47.84,0:27:51.76,Chinese,,0,0,0,,现代系统使用称为pci express的总线结构
Dialogue: 0,0:27:52.32,0:27:56.18,English,,0,0,0,,Which although it has the word pci and it's completely different it's point-to-point
Dialogue: 0,0:27:52.32,0:27:56.18,Chinese,,0,0,0,,虽然它有pci这个词，但它是完全不同的，它是点对点的
Dialogue: 0,0:27:56.30,0:28:00.08,English,,0,0,0,,So devices are connected by a set of point-to-point connections
Dialogue: 0,0:27:56.30,0:28:00.08,Chinese,,0,0,0,,因此，设备通过一组点对点连接进行连接
Dialogue: 0,0:28:00.32,0:28:04.30,English,,0,0,0,,Arbitrated by a-- by some kind of a switch
Dialogue: 0,0:28:00.32,0:28:04.30,Chinese,,0,0,0,,由a--通过某种开关仲裁
Dialogue: 0,0:28:04.80,0:28:09.84,English,,0,0,0,,And we won't go into it it's the same idea it it's a much more efficient design
Dialogue: 0,0:28:04.80,0:28:09.84,Chinese,,0,0,0,,我们不会进入它同样的想法，它是一个更有效的设计
Dialogue: 0,0:28:10.30,0:28:16.86,English,,0,0,0,,It's much faster and but it provides the same capability mainly it just attaches up
Dialogue: 0,0:28:10.30,0:28:16.86,Chinese,,0,0,0,,它更快，但它提供相同的功能，主要是它附加
Dialogue: 0,0:28:17.42,0:28:21.32,English,,0,0,0,,It allows you to attach all of your devices to your to your CPU
Dialogue: 0,0:28:17.42,0:28:21.32,Chinese,,0,0,0,,它允许你将所有设备连接到CPU
Dialogue: 0,0:28:22.26,0:28:25.72,English,,0,0,0,,So just think of this bus as this sort of a single set of wires
Dialogue: 0,0:28:22.26,0:28:25.72,Chinese,,0,0,0,,因此，只需将此总线视为一组电线即可
Dialogue: 0,0:28:26.44,0:28:28.00,English,,0,0,0,,Where each wire carries a bit
Dialogue: 0,0:28:26.44,0:28:28.00,Chinese,,0,0,0,,每根电线都带有一点
Dialogue: 0,0:28:28.74,0:28:33.30,English,,0,0,0,,And every device attached to it can see all the values of all the wires
Dialogue: 0,0:28:28.74,0:28:33.30,Chinese,,0,0,0,,并且连接到它的每个设备都可以看到所有电线的所有值
Dialogue: 0,0:28:34.32,0:28:41.10,English,,0,0,0,,And so it there's some devices that are just built it directly into the motherboard and they attach to the bus like
Dialogue: 0,0:28:34.32,0:28:41.10,Chinese,,0,0,0,,所以它有一些设备只是直接建在主板上，它们连接到总线上
Dialogue: 0,0:28:41.52,0:28:46.72,English,,0,0,0,,You know disks have just plugged directly into sockets on a motherboard
Dialogue: 0,0:28:41.52,0:28:46.72,Chinese,,0,0,0,,你知道磁盘刚刚直接插入主板上的插槽
Dialogue: 0,0:28:46.94,0:28:50.64,English,,0,0,0,,And you know your graphics adapter and the USB controller
Dialogue: 0,0:28:46.94,0:28:50.64,Chinese,,0,0,0,,而且你知道你的图形适配器和USB控制器
Dialogue: 0,0:28:50.92,0:28:53.06,English,,0,0,0,,And then the system presents an interface
Dialogue: 0,0:28:50.92,0:28:53.06,Chinese,,0,0,0,,然后系统提供一个界面
Dialogue: 0,0:28:53.06,0:28:58.76,English,,0,0,0,,So you can plug mouse things like mice and keyboards into the USB controller
Dialogue: 0,0:28:53.06,0:28:58.76,Chinese,,0,0,0,,因此，你可以将鼠标和键盘等鼠标插入USB控制器
Dialogue: 0,0:28:59.24,0:29:03.58,English,,0,0,0,,And then there's expansion slots that allow you that are
Dialogue: 0,0:28:59.24,0:29:03.58,Chinese,,0,0,0,,然后有扩展插槽，允许你这样做
Dialogue: 0,0:29:04.24,0:29:07.90,English,,0,0,0,,Connect to the wires in the in the bus that allow you to add other devices right
Dialogue: 0,0:29:04.24,0:29:07.90,Chinese,,0,0,0,,连接到总线中的电线，允许你正确添加其他设备
Dialogue: 0,0:29:08.64,0:29:11.38,English,,0,0,0,,Maybe network you know if you want to put a network adapter there
Dialogue: 0,0:29:08.64,0:29:11.38,Chinese,,0,0,0,,如果你想在那里放一个网络适配器，也许你知道网络
Dialogue: 0,0:29:14.14,0:29:16.60,English,,0,0,0,,Now what happens when we want to read a disk sector
Dialogue: 0,0:29:14.14,0:29:16.60,Chinese,,0,0,0,,现在当我们想要读取磁盘扇区时会发生什么
Dialogue: 0,0:29:17.34,0:29:21.14,English,,0,0,0,,Well the CPU initiates this read by writing a triple
Dialogue: 0,0:29:17.34,0:29:21.14,Chinese,,0,0,0,,那么CPU通过编写三元组来启动此读取
Dialogue: 0,0:29:21.38,0:29:25.22,English,,0,0,0,,So it writes three different values it writes a command like say read
Dialogue: 0,0:29:21.38,0:29:25.22,Chinese,,0,0,0,,所以它写了三个不同的值，它写了一个命令，比如说read
Dialogue: 0,0:29:26.04,0:29:27.94,English,,0,0,0,,It writes a logical block number
Dialogue: 0,0:29:26.04,0:29:27.94,Chinese,,0,0,0,,它写入一个逻辑块号
Dialogue: 0,0:29:28.24,0:29:30.32,English,,0,0,0,,So I want to read a logical block number
Dialogue: 0,0:29:28.24,0:29:30.32,Chinese,,0,0,0,,所以我想读一个逻辑块号
Dialogue: 0,0:29:30.78,0:29:35.12,English,,0,0,0,,And I want to place the contents of that logical block at a certain address in memory
Dialogue: 0,0:29:30.78,0:29:35.12,Chinese,,0,0,0,,我想将该逻辑块的内容放在内存中的某个地址
Dialogue: 0,0:29:36.46,0:29:41.90,English,,0,0,0,,Okay so it's a command logical block number in a memory address
Dialogue: 0,0:29:36.46,0:29:41.90,Chinese,,0,0,0,,好的，这是内存地址中的命令逻辑块号
Dialogue: 0,0:29:43.00,0:29:49.70,English,,0,0,0,,The disk controller reads the whatever sector corresponds to that logical block
Dialogue: 0,0:29:43.00,0:29:49.70,Chinese,,0,0,0,,磁盘控制器读取与该逻辑块对应的任何扇区
Dialogue: 0,0:29:49.92,0:29:54.78,English,,0,0,0,,So we'll assume that logical blocks are consists of one sector
Dialogue: 0,0:29:49.92,0:29:54.78,Chinese,,0,0,0,,所以我们假设逻辑块由一个扇区组成
Dialogue: 0,0:29:56.36,0:30:00.52,English,,0,0,0,,And then it does this interesting thing it copies it takes control of the bus
Dialogue: 0,0:29:56.36,0:30:00.52,Chinese,,0,0,0,,然后它做了这个有趣的事情，它复制它控制总线
Dialogue: 0,0:30:01.16,0:30:03.90,English,,0,0,0,,And it copies the data this is the disk controller now
Dialogue: 0,0:30:01.16,0:30:03.90,Chinese,,0,0,0,,它现在复制数据，这是磁盘控制器
Dialogue: 0,0:30:04.64,0:30:12.58,English,,0,0,0,,Copies the data across the I/O bus through the I/O bridge and directly to main memory without ever notifying the CPU
Dialogue: 0,0:30:04.64,0:30:12.58,Chinese,,0,0,0,,通过I / O桥将数据复制到I / O总线，直接复制到主存储器，而无需通知CPU
Dialogue: 0,0:30:12.58,0:30:20.28,English,,0,0,0,,So the CPU is completely oblivious to the fact that this transfer is going on
Dialogue: 0,0:30:12.58,0:30:20.28,Chinese,,0,0,0,,所以CPU完全忘记了这种传输正在进行的事实
Dialogue: 0,0:30:22.68,0:30:25.68,English,,0,0,0,,And then once it's once its transfer the data to main memory
Dialogue: 0,0:30:22.68,0:30:25.68,Chinese,,0,0,0,,然后，一旦它将数据传输到主存储器
Dialogue: 0,0:30:26.26,0:30:30.46,English,,0,0,0,,Then it notifies the CPU using this mechanism called an interrupt
Dialogue: 0,0:30:26.26,0:30:30.46,Chinese,,0,0,0,,然后它使用这种称为中断的机制通知CPU
Dialogue: 0,0:30:31.36,0:30:35.82,English,,0,0,0,,So it actually asserts a pin on the the actual CPU chip itself
Dialogue: 0,0:30:31.36,0:30:35.82,Chinese,,0,0,0,,所以它实际上在实际CPU芯片本身上声明了一个引脚
Dialogue: 0,0:30:36.40,0:30:39.92,English,,0,0,0,,So it it changes the value of that pin from 0 to 1
Dialogue: 0,0:30:36.40,0:30:39.92,Chinese,,0,0,0,,所以它将该引脚的值从0更改为1
Dialogue: 0,0:30:40.62,0:30:48.84,English,,0,0,0,,And that trigger is an interrupt and which notifies the CPU that sector has been copy
Dialogue: 0,0:30:40.62,0:30:48.84,Chinese,,0,0,0,,该触发器是一个中断，它通知CPU该扇区已被复制
Dialogue: 0,0:30:50.02,0:30:56.04,English,,0,0,0,,Ok so then the CPU if there's some program somewhere waiting for that data to be read into memory
Dialogue: 0,0:30:50.02,0:30:56.04,Chinese,,0,0,0,,好的，那么CPU是否有某个程序在某处等待将数据读入内存
Dialogue: 0,0:30:56.04,0:31:01.44,English,,0,0,0,,So now now the CPU can can execute that program and deal with that memory
Dialogue: 0,0:30:56.04,0:31:01.44,Chinese,,0,0,0,,所以现在CPU现在可以执行该程序并处理该内存
Dialogue: 0,0:31:02.00,0:31:04.90,English,,0,0,0,,So what this what this mechanism allows
Dialogue: 0,0:31:02.00,0:31:04.90,Chinese,,0,0,0,,那么这个机制允许什么呢
Dialogue: 0,0:31:05.80,0:31:11.63,English,,0,0,0,,And the reason they do this is because disks are just so god-awful slow
Dialogue: 0,0:31:05.80,0:31:11.63,Chinese,,0,0,0,,他们这样做的原因是因为磁盘太慢而且非常糟糕
Dialogue: 0,0:31:12.54,0:31:19.40,English,,0,0,0,,The within 10 milliseconds a system could be executing millions and millions of instructions
Dialogue: 0,0:31:12.54,0:31:19.40,Chinese,,0,0,0,,在10毫秒内，系统可以执行数百万条指令
Dialogue: 0,0:31:19.40,0:31:22.74,English,,0,0,0,,The CPU could be executing millions and millions of instructions
Dialogue: 0,0:31:19.40,0:31:22.74,Chinese,,0,0,0,,CPU可能正在执行数百万条指令
Dialogue: 0,0:31:22.74,0:31:26.88,English,,0,0,0,,It will be a terrible waste if the CPU waited for that data to come off the disk
Dialogue: 0,0:31:22.74,0:31:26.88,Chinese,,0,0,0,,如果CPU等待数据从磁盘上脱落，那将是一个可怕的浪费
Dialogue: 0,0:31:27.88,0:31:33.18,English,,0,0,0,,So what it does is it it issues this request to the disk controller
Dialogue: 0,0:31:27.88,0:31:33.18,Chinese,,0,0,0,,它的作用是它将此请求发送给磁盘控制器
Dialogue: 0,0:31:33.88,0:31:37.74,English,,0,0,0,,And then while that well that really slow laborious process is going on
Dialogue: 0,0:31:33.88,0:31:37.74,Chinese,,0,0,0,,然后，虽然那个真正缓慢繁重过程的井正在进行中
Dialogue: 0,0:31:38.16,0:31:42.14,English,,0,0,0,,The CPU can be executing other instructions and doing other useful work
Dialogue: 0,0:31:38.16,0:31:42.14,Chinese,,0,0,0,,CPU可以执行其他指令并执行其他有用的工作
Dialogue: 0,0:31:43.94,0:31:49.18,English,,0,0,0,,So this is really essential to just sort of getting reasonable performance
Dialogue: 0,0:31:43.94,0:31:49.18,Chinese,,0,0,0,,所以这对于获得合理的性能非常重要
Dialogue: 0,0:31:49.18,0:31:53.58,English,,0,0,0,,And from keeping this really slow disk system from slowing the system down
Dialogue: 0,0:31:49.18,0:31:53.58,Chinese,,0,0,0,,从保持这个非常慢的磁盘系统减慢系统速度
Dialogue: 0,0:31:54.64,0:32:02.22,English,,0,0,0,,Now there's another interesting hype kind of disk called a solid-state disk
Dialogue: 0,0:31:54.64,0:32:02.22,Chinese,,0,0,0,,现在有另一个有趣的炒作类型的磁盘称为固态磁盘
Dialogue: 0,0:32:02.22,0:32:09.68,English,,0,0,0,,Which is kind of halfway between rotating and rotating discs  and DRAM memories
Dialogue: 0,0:32:02.22,0:32:09.68,Chinese,,0,0,0,,这是旋转和旋转光盘与DRAM存储器之间的中间点
Dialogue: 0,0:32:10.38,0:32:14.07,English,,0,0,0,,In a solid-state disk to the to the CPU
Dialogue: 0,0:32:10.38,0:32:14.07,Chinese,,0,0,0,,在一个固态磁盘到CPU
Dialogue: 0,0:32:14.07,0:32:17.96,English,,0,0,0,,It looks exactly like a rotating disk it has the same socket plug
Dialogue: 0,0:32:14.07,0:32:17.96,Chinese,,0,0,0,,它看起来与旋转磁盘完全相同，它具有相同的插座插头
Dialogue: 0,0:32:18.20,0:32:22.40,English,,0,0,0,,It has the same physical interface that has the same packaging
Dialogue: 0,0:32:18.20,0:32:22.40,Chinese,,0,0,0,,它具有相同的物理接口，具有相同的包装
Dialogue: 0,0:32:22.82,0:32:24.83,English,,0,0,0,,It looks like a rotating disc
Dialogue: 0,0:32:22.82,0:32:24.83,Chinese,,0,0,0,,它看起来像一个旋转的圆盘
Dialogue: 0,0:32:25.18,0:32:31.66,English,,0,0,0,,But instead of having all these mechanical parts it's actually built entirely out of flash memory
Dialogue: 0,0:32:25.18,0:32:31.66,Chinese,,0,0,0,,但它没有拥有所有这些机械部件，而是完全由闪存构建
Dialogue: 0,0:32:31.96,0:32:36.82,English,,0,0,0,,And firmware that acts as the the controller
Dialogue: 0,0:32:31.96,0:32:36.82,Chinese,,0,0,0,,和充当控制器的固件
Dialogue: 0,0:32:37.42,0:32:44.60,English,,0,0,0,,So inside of a solid-state disk there's a firmware a set of firmware called the flash translation layer
Dialogue: 0,0:32:37.42,0:32:44.60,Chinese,,0,0,0,,因此，在固态磁盘内部有一组固件，称为闪存转换层
Dialogue: 0,0:32:44.72,0:32:51.86,English,,0,0,0,,Which serves the purpose as the same purpose as the disk controller does in a rotating disk d
Dialogue: 0,0:32:44.72,0:32:51.86,Chinese,,0,0,0,,其目的与磁盘控制器在旋转磁盘中的作用相同
Dialogue: 0,0:32:54.70,0:32:57.06,English,,0,0,0,,And then the memory itself the read
Dialogue: 0,0:32:54.70,0:32:57.06,Chinese,,0,0,0,,然后记忆本身就读了
Dialogue: 0,0:32:58.60,0:33:03.74,English,,0,0,0,,Data can be read read and written from the flash memory in units of pages
Dialogue: 0,0:32:58.60,0:33:03.74,Chinese,,0,0,0,,可以以页为单位从闪存读取和写入数据
Dialogue: 0,0:33:04.34,0:33:08.94,English,,0,0,0,,Which depending on the technology can be 512 kbytes to 4 k bytes
Dialogue: 0,0:33:04.34,0:33:08.94,Chinese,,0,0,0,,这取决于技术可以是512千字节到4千字节
Dialogue: 0,0:33:11.12,0:33:14.92,English,,0,0,0,,And then a sequence of pages forms a block
Dialogue: 0,0:33:11.12,0:33:14.92,Chinese,,0,0,0,,然后一系列页面形成一个块
Dialogue: 0,0:33:15.92,0:33:21.50,English,,0,0,0,,Now these these these blocks are different from the logical blocks that the CPU does
Dialogue: 0,0:33:15.92,0:33:21.50,Chinese,,0,0,0,,现在这些这些块与CPU所做的逻辑块不同
Dialogue: 0,0:33:21.50,0:33:24.24,English,,0,0,0,,So it's kind of an unfortunate overlap of terms
Dialogue: 0,0:33:21.50,0:33:24.24,Chinese,,0,0,0,,所以这是一个不幸的术语重叠
Dialogue: 0,0:33:26.78,0:33:35.48,English,,0,0,0,,But the the trick is or the I guess the limitation is that data is written in units of pages
Dialogue: 0,0:33:26.78,0:33:35.48,Chinese,,0,0,0,,但诀窍是，或者我猜限制是数据是以页为单位写的
Dialogue: 0,0:33:36.74,0:33:41.06,English,,0,0,0,,But a page can only be written after the entire block has been erased
Dialogue: 0,0:33:36.74,0:33:41.06,Chinese,,0,0,0,,但是只有在整个块被擦除后才能写入页面
Dialogue: 0,0:33:43.86,0:33:46.98,English,,0,0,0,,Okay so that's that seems kind of weird but that's that's the way it works
Dialogue: 0,0:33:43.86,0:33:46.98,Chinese,,0,0,0,,好的，这似乎有点奇怪，但这就是它的工作方式
Dialogue: 0,0:33:47.68,0:33:49.85,English,,0,0,0,,So what that means is if you want to write
Dialogue: 0,0:33:47.68,0:33:49.85,Chinese,,0,0,0,,那么这意味着你想要写作
Dialogue: 0,0:33:51.30,0:33:57.54,English,,0,0,0,,If you want to write to a page you have to find a block somewhere that's been erased
Dialogue: 0,0:33:51.30,0:33:57.54,Chinese,,0,0,0,,如果你想写一个页面，你必须找到一个被删除的块
Dialogue: 0,0:33:59.00,0:34:05.40,English,,0,0,0,,You have to copy all of the other pages in your target block over to that new block and then you can do the right
Dialogue: 0,0:33:59.00,0:34:05.40,Chinese,,0,0,0,,你必须将目标块中的所有其他页面复制到该新块，然后才能正确执行
Dialogue: 0,0:34:07.10,0:34:14.04,English,,0,0,0,,Okay so you can see that rights now become fairly complex operation reads you can read anything
Dialogue: 0,0:34:07.10,0:34:14.04,Chinese,,0,0,0,,好的，你可以看到权利现在变得相当复杂，操作读取你可以阅读任何东西
Dialogue: 0,0:34:15.30,0:34:21.50,English,,0,0,0,,And then like all flash a so it's kind of an efficient right because you're writing one page
Dialogue: 0,0:34:15.30,0:34:21.50,Chinese,,0,0,0,,然后像所有闪光一样，这是一种有效的权利，因为你正在写一页
Dialogue: 0,0:34:22.70,0:34:28.58,English,,0,0,0,,But to do that you have to sort of copy all the other pages in it block and you have to erase the whole
Dialogue: 0,0:34:22.70,0:34:28.58,Chinese,,0,0,0,,但要做到这一点，你必须复制其中的所有其他页面块，你必须擦除整体
Dialogue: 0,0:34:29.18,0:34:33.86,English,,0,0,0,,And then when you finish then you erase this block so it can be used for for other writes yes
Dialogue: 0,0:34:29.18,0:34:33.86,Chinese,,0,0,0,,然后当你完成后，你擦除这个块，以便它可以用于其他写入是
Dialogue: 0,0:34:34.92,0:34:38.88,English,,0,0,0,,So eventually after a hundred thousand repeated writes these we're out
Dialogue: 0,0:34:34.92,0:34:38.88,Chinese,,0,0,0,,所以最终在经过十万次重复写入后，我们就出局了
Dialogue: 0,0:34:40.24,0:34:43.40,English,,0,0,0,,Now the flash translation layer xin modern systems
Dialogue: 0,0:34:40.24,0:34:43.40,Chinese,,0,0,0,,现在闪现翻译层xin现代系统
Dialogue: 0,0:34:43.96,0:34:50.32,English,,0,0,0,,Do all kinds of fancy proprietary algorithms to sort of extend the life they use caching
Dialogue: 0,0:34:43.96,0:34:50.32,Chinese,,0,0,0,,做各种花哨的专有算法，以延长他们使用缓存的生命
Dialogue: 0,0:34:50.78,0:34:54.58,English,,0,0,0,,And and various tricks to extend the life of these SSD
Dialogue: 0,0:34:50.78,0:34:54.58,Chinese,,0,0,0,,并且还有各种技巧来延长这些SSD的使用寿命
Dialogue: 0,0:34:54.58,0:34:58.76,English,,0,0,0,,So in practice it's not really a problem which I'll show you in a second
Dialogue: 0,0:34:54.58,0:34:58.76,Chinese,,0,0,0,,所以在实践中，这不是一个我会在一秒钟内告诉你的问题
Dialogue: 0,0:35:00.42,0:35:04.28,English,,0,0,0,,So the performance characteristics of SSDs
Dialogue: 0,0:35:00.42,0:35:04.28,Chinese,,0,0,0,,所以SSD的性能特点
Dialogue: 0,0:35:04.74,0:35:08.66,English,,0,0,0,,Now you can think of a typical hard drive you might be able to get
Dialogue: 0,0:35:04.74,0:35:08.66,Chinese,,0,0,0,,现在你可以想到一个典型的硬盘你可能会得到
Dialogue: 0,0:35:09.98,0:35:12.94,English,,0,0,0,,You know I mean what if when I measure them when I measure my drives
Dialogue: 0,0:35:09.98,0:35:12.94,Chinese,,0,0,0,,你知道我的意思是当我测量我的驱动器时测量它们
Dialogue: 0,0:35:12.94,0:35:16.34,English,,0,0,0,,I maybe forty fifty megabytes per second that would be a typical rate
Dialogue: 0,0:35:12.94,0:35:16.34,Chinese,,0,0,0,,我可能是每秒四十五十兆字节，这是一个典型的速度
Dialogue: 0,0:35:17.34,0:35:21.16,English,,0,0,0,,Okay these SSDs are 10 times faster than that
Dialogue: 0,0:35:17.34,0:35:21.16,Chinese,,0,0,0,,好吧，这些SSD的速度要快10倍
Dialogue: 0,0:35:22.06,0:35:25.18,English,,0,0,0,,So for sequential reads you can get about 500 50 megabytes
Dialogue: 0,0:35:22.06,0:35:25.18,Chinese,,0,0,0,,因此对于顺序读取，你可以获得大约500 50兆字节
Dialogue: 0,0:35:26.04,0:35:28.78,English,,0,0,0,,Sequential writes are a little bit slower
Dialogue: 0,0:35:26.04,0:35:28.78,Chinese,,0,0,0,,顺序写入有点慢
Dialogue: 0,0:35:31.08,0:35:36.18,English,,0,0,0,,Random access whether you're reading or writing is a little bit slower than sequential access
Dialogue: 0,0:35:31.08,0:35:36.18,Chinese,,0,0,0,,无论你是在阅读还是写作，随机访问都比顺序访问慢一点
Dialogue: 0,0:35:37.02,0:35:39.80,English,,0,0,0,,And as we'll see this is that this is fairly common
Dialogue: 0,0:35:37.02,0:35:39.80,Chinese,,0,0,0,,而且我们会看到这是相当普遍的
Dialogue: 0,0:35:39.82,0:35:45.90,English,,0,0,0,,It's it's in memory systems it's almost always better to do things sequentially  than to jump around
Dialogue: 0,0:35:39.82,0:35:45.90,Chinese,,0,0,0,,就是在内存系统中，按顺序执行操作几乎总是比跳转更好
Dialogue: 0,0:35:48.06,0:35:53.62,English,,0,0,0,,And erasing random writes are slower because erase erasing takes about a millisecond right
Dialogue: 0,0:35:48.06,0:35:53.62,Chinese,,0,0,0,,擦除随机写入速度较慢，因为擦除擦除需要大约一毫秒的时间
Dialogue: 0,0:35:53.62,0:35:59.20,English,,0,0,0,,So now we're back up to that that millisecond range which is which is slow
Dialogue: 0,0:35:53.62,0:35:59.20,Chinese,,0,0,0,,所以现在我们又回到那个毫秒级的范围，这个范围很慢
Dialogue: 0,0:35:59.82,0:36:06.80,English,,0,0,0,,And as I mentioned yet if you modify one one one page after all the other pages in that block have to be copy
Dialogue: 0,0:35:59.82,0:36:06.80,Chinese,,0,0,0,,正如我所提到的那样，如果你在该块中的所有其他页面都必须复制之后修改一页
Dialogue: 0,0:36:07.94,0:36:18.24,English,,0,0,0,,Now earlier SSDs had a huge gap between random writes and sequential reads
Dialogue: 0,0:36:07.94,0:36:18.24,Chinese,,0,0,0,,现在早期的SSD在随机写入和顺序读取之间存在巨大差距
Dialogue: 0,0:36:19.10,0:36:23.28,English,,0,0,0,,But they because of sort of improvements in the flash translation layer
Dialogue: 0,0:36:19.10,0:36:23.28,Chinese,,0,0,0,,但是他们因为闪存翻译层的改进
Dialogue: 0,0:36:23.66,0:36:29.12,English,,0,0,0,,These aren't really that that difference right reading and writing it's it's writing is slower
Dialogue: 0,0:36:23.66,0:36:29.12,Chinese,,0,0,0,,这些差异并不是正确的阅读和写作，它的写作速度较慢
Dialogue: 0,0:36:29.52,0:36:34.36,English,,0,0,0,,But they're doing all kinds of interesting amazing things to get these numbers fairly close
Dialogue: 0,0:36:29.52,0:36:34.36,Chinese,,0,0,0,,但他们正在做各种有趣的惊人事情，以使这些数字相当接近
Dialogue: 0,0:36:35.76,0:36:42.42,English,,0,0,0,,Ok so art when we have a model of SSDs we really don't need to distinguish anymore that between reads and writes
Dialogue: 0,0:36:35.76,0:36:42.42,Chinese,,0,0,0,,好吧，如果我们有一个SSD模型，我们真的不需要再区分读写
Dialogue: 0,0:36:45.14,0:36:48.10,English,,0,0,0,,You okay so SSDs because they have no moving parts
Dialogue: 0,0:36:45.14,0:36:48.10,Chinese,,0,0,0,,你没关系SSD，因为它们没有活动部件
Dialogue: 0,0:36:48.16,0:36:51.76,English,,0,0,0,,They're faster they take less power they're more rugged
Dialogue: 0,0:36:48.16,0:36:51.76,Chinese,,0,0,0,,他们的动力越来越快，他们的动力越来越大
Dialogue: 0,0:36:52.22,0:36:54.78,English,,0,0,0,,You know which is why they're good for thumb drives
Dialogue: 0,0:36:52.22,0:36:54.78,Chinese,,0,0,0,,你知道为什么它们对拇指驱动器有好处
Dialogue: 0,0:36:55.52,0:36:57.70,English,,0,0,0,,And you know ipods and things like that
Dialogue: 0,0:36:55.52,0:36:57.70,Chinese,,0,0,0,,你知道ipods和类似的东西
Dialogue: 0,0:36:58.24,0:37:01.06,English,,0,0,0,,But they have this potential to wear out
Dialogue: 0,0:36:58.24,0:37:01.06,Chinese,,0,0,0,,但他们有可能磨损
Dialogue: 0,0:37:01.26,0:37:05.34,English,,0,0,0,,Which could be a problem but in practice it's not for example
Dialogue: 0,0:37:01.26,0:37:05.34,Chinese,,0,0,0,,这可能是一个问题，但在实践中，它不是例如
Dialogue: 0,0:37:05.34,0:37:10.00,English,,0,0,0,,Intel guarantees that you can do 128 petabytes of writes
Dialogue: 0,0:37:05.34,0:37:10.00,Chinese,,0,0,0,,英特尔保证你可以执行128 PB的写入
Dialogue: 0,0:37:10.64,0:37:13.46,English,,0,0,0,,Before your SSD is no longer good
Dialogue: 0,0:37:10.64,0:37:13.46,Chinese,,0,0,0,,在你的SSD不再好之前
Dialogue: 0,0:37:14.24,0:37:19.92,English,,0,0,0,,So that's a lot of data to write I mean think about how many years it would take to write that much data
Dialogue: 0,0:37:14.24,0:37:19.92,Chinese,,0,0,0,,所以要编写大量数据我的意思是考虑编写那么多数据需要多少年
Dialogue: 0,0:37:21.46,0:37:25.48,English,,0,0,0,,And as of 2015 as of now
Dialogue: 0,0:37:21.46,0:37:25.48,Chinese,,0,0,0,,截至2015年截至目前
Dialogue: 0,0:37:25.76,0:37:28.67,English,,0,0,0,,They're a lot more expensive per byte than rotating disks
Dialogue: 0,0:37:25.76,0:37:28.67,Chinese,,0,0,0,,它们每个字节比旋转磁盘贵很多
Dialogue: 0,0:37:29.18,0:37:32.88,English,,0,0,0,,So rotating disks are much bigger but they're slower
Dialogue: 0,0:37:29.18,0:37:32.88,Chinese,,0,0,0,,所以旋转磁盘要大得多，但速度要慢一些
Dialogue: 0,0:37:33.52,0:37:35.72,English,,0,0,0,,SSDs are smaller and faster
Dialogue: 0,0:37:33.52,0:37:35.72,Chinese,,0,0,0,,SSD更小更快
Dialogue: 0,0:37:39.28,0:37:40.98,English,,0,0,0,,Now if you take
Dialogue: 0,0:37:39.28,0:37:40.98,Chinese,,0,0,0,,现在，如果你采取
Dialogue: 0,0:37:42.10,0:37:48.22,English,,0,0,0,,If you look at the performance characteristics of these different storage devices relative to CPU
Dialogue: 0,0:37:42.10,0:37:48.22,Chinese,,0,0,0,,如果你看一下这些不同存储设备相对于CPU的性能特征
Dialogue: 0,0:37:48.62,0:37:52.10,English,,0,0,0,,Over time you get this really interesting graph
Dialogue: 0,0:37:48.62,0:37:52.10,Chinese,,0,0,0,,随着时间的推移，你会得到这个非常有趣
Dialogue: 0,0:37:53.58,0:38:03.14,English,,0,0,0,,Now this graph shows on the y-axis access time in nanoseconds  or in a log scale
Dialogue: 0,0:37:53.58,0:38:03.14,Chinese,,0,0,0,,现在，此图显示y轴访问时间，单位为纳秒或对数刻度
Dialogue: 0,0:38:03.14,0:38:14.44,English,,0,0,0,,Okay so each one of these each change in units from 1,000 to 10,000 represents a order of magnitude difference in access time
Dialogue: 0,0:38:03.14,0:38:14.44,Chinese,,0,0,0,,好的，所以这些中的每一个都以1,000到10,000的单位变化表示访问时间的一个数量级差异
Dialogue: 0,0:38:15.52,0:38:22.98,English,,0,0,0,,On the x-axis I've plotted time going from 1985 to 2015
Dialogue: 0,0:38:15.52,0:38:22.98,Chinese,,0,0,0,,在x轴上，我绘制了从1985年到2015年的时间
Dialogue: 0,0:38:24.20,0:38:29.36,English,,0,0,0,,And then I've plotted the sort of the the access time or the cycle time of
Dialogue: 0,0:38:24.20,0:38:29.36,Chinese,,0,0,0,,然后我绘制了访问时间或周期时间的类型
Dialogue: 0,0:38:30.10,0:38:35.16,English,,0,0,0,,The access time of the these devices disk SSD DRAM and SRAM
Dialogue: 0,0:38:30.10,0:38:35.16,Chinese,,0,0,0,,这些设备的访问时间是SSD SSD和SRAM
Dialogue: 0,0:38:36.00,0:38:38.12,English,,0,0,0,,And the cycle time of processors
Dialogue: 0,0:38:36.00,0:38:38.12,Chinese,,0,0,0,,和处理器的循环时间
Dialogue: 0,0:38:38.16,0:38:44.31,English,,0,0,0,,So let's look at on the bottom we have the the cycle time of processors over time
Dialogue: 0,0:38:38.16,0:38:44.31,Chinese,,0,0,0,,那么让我们看一下底部我们有处理器的循环时间随着时间的推移
Dialogue: 0,0:38:45.22,0:38:52.04,English,,0,0,0,,And what you see is it's going down at is this sort of exponential rate  from 1985 to 2003
Dialogue: 0,0:38:45.22,0:38:52.04,Chinese,,0,0,0,,而你所看到的是它正在下降的是从1985年到2003年的这种指数速度
Dialogue: 0,0:38:52.82,0:39:00.27,English,,0,0,0,,There's the doubling basically every 18 months or two years in clock frequency and a resulting
Dialogue: 0,0:38:52.82,0:39:00.27,Chinese,,0,0,0,,基本上每18个月或两年的时钟频率加倍，结果是
Dialogue: 0,0:39:00.80,0:39:06.88,English,,0,0,0,,Halving of the cycle time over this 18-month two to two year period
Dialogue: 0,0:39:00.80,0:39:06.88,Chinese,,0,0,0,,在这18个月的两到两年期间，将周期时间减半
Dialogue: 0,0:39:08.16,0:39:14.12,English,,0,0,0,,So this so what what manufacturers did until 2003
Dialogue: 0,0:39:08.16,0:39:14.12,Chinese,,0,0,0,,所以这就是制造商在2003年之前所做的事情
Dialogue: 0,0:39:15.02,0:39:18.92,English,,0,0,0,,To make their processors faster was a but they would just double the clock frequency
Dialogue: 0,0:39:15.02,0:39:18.92,Chinese,,0,0,0,,为了使他们的处理器更快，他们只会使时钟频率加倍
Dialogue: 0,0:39:19.60,0:39:23.28,English,,0,0,0,,They decrease the feature size of the chips that they were making
Dialogue: 0,0:39:19.60,0:39:23.28,Chinese,,0,0,0,,它们减小了它们制造的芯片的特征尺寸
Dialogue: 0,0:39:24.00,0:39:26.94,English,,0,0,0,,And that would allow them to put things closer together
Dialogue: 0,0:39:24.00,0:39:26.94,Chinese,,0,0,0,,这将使他们能够把事情放在一起
Dialogue: 0,0:39:26.94,0:39:35.82,English,,0,0,0,,And then have that and then increase the clock frequency by a proportional amount
Dialogue: 0,0:39:26.94,0:39:35.82,Chinese,,0,0,0,,然后有那个，然后按比例增加时钟频率
Dialogue: 0,0:39:36.92,0:39:42.48,English,,0,0,0,,Now this all ended 2003 was an interesting year in computer history
Dialogue: 0,0:39:36.92,0:39:42.48,Chinese,,0,0,0,,现在这一切都在2003年结束，这是计算机历史上有趣的一年
Dialogue: 0,0:39:43.16,0:39:48.92,English,,0,0,0,,Because of this there's a sort of unfortunate property that the power that you consume
Dialogue: 0,0:39:43.16,0:39:48.92,Chinese,,0,0,0,,因此，你所消耗的能量有一种不幸的特性
Dialogue: 0,0:39:49.22,0:39:50.98,English,,0,0,0,,Is proportional to your frequency
Dialogue: 0,0:39:49.22,0:39:50.98,Chinese,,0,0,0,,与你的频率成正比
Dialogue: 0,0:39:50.98,0:39:55.62,English,,0,0,0,,Okay so the more power I mean the higher the frequency the more power you consume
Dialogue: 0,0:39:50.98,0:39:55.62,Chinese,,0,0,0,,好的，所以我的意思越强，频率越高，消耗的功率越大
Dialogue: 0,0:39:56.52,0:40:04.30,English,,0,0,0,,By 2003 the processor that Intel was getting ready to ship was going to burn about 800 watts of power
Dialogue: 0,0:39:56.52,0:40:04.30,Chinese,,0,0,0,,到2003年，英特尔准备出货的处理器将耗费大约800瓦的功率
Dialogue: 0,0:40:05.08,0:40:10.42,English,,0,0,0,,Think about 800 watt light bulbs inside your laptop and
Dialogue: 0,0:40:05.08,0:40:10.42,Chinese,,0,0,0,,想想你的笔记本电脑里面有800瓦的灯泡
Dialogue: 0,0:40:11.92,0:40:16.38,English,,0,0,0,,I actually saw an early prototype of one of these devices
Dialogue: 0,0:40:11.92,0:40:16.38,Chinese,,0,0,0,,我实际上看到了其中一个设备的早期原型
Dialogue: 0,0:40:16.68,0:40:25.40,English,,0,0,0,,And the the heatsink to absorb the power from the chip was about this big it was about four square inches
Dialogue: 0,0:40:16.68,0:40:25.40,Chinese,,0,0,0,,从芯片吸收功率的散热器大约是四平方英寸
Dialogue: 0,0:40:25.40,0:40:28.26,English,,0,0,0,,It's a giant thing just sitting on the motherboard
Dialogue: 0,0:40:25.40,0:40:28.26,Chinese,,0,0,0,,这只是坐在主板上的一件大事
Dialogue: 0,0:40:29.78,0:40:36.70,English,,0,0,0,,So that's what we what we say is that processor design hit the power wall in 2003
Dialogue: 0,0:40:29.78,0:40:36.70,Chinese,,0,0,0,,所以我们所说的就是处理器设计在2003年触及了电源墙
Dialogue: 0,0:40:36.70,0:40:40.62,English,,0,0,0,,They could no longer just continue to increase clock frequencies
Dialogue: 0,0:40:36.70,0:40:40.62,Chinese,,0,0,0,,他们再也不能继续增加时钟频率
Dialogue: 0,0:40:41.40,0:40:45.90,English,,0,0,0,,To to get faster to make faster computers
Dialogue: 0,0:40:41.40,0:40:45.90,Chinese,,0,0,0,,为了更快地制作更快的计算机
Dialogue: 0,0:40:46.50,0:40:49.26,English,,0,0,0,,And what so what they had to do after 2003
Dialogue: 0,0:40:46.50,0:40:49.26,Chinese,,0,0,0,,那么他们在2003年之后必须做些什么
Dialogue: 0,0:40:49.68,0:40:55.42,English,,0,0,0,,Instead of increasing the clock frequency and try and set up doubling the clock frequency
Dialogue: 0,0:40:49.68,0:40:55.42,Chinese,,0,0,0,,而不是增加时钟频率，并尝试设置加倍时钟频率
Dialogue: 0,0:40:56.22,0:40:59.58,English,,0,0,0,,They put more processor cores onto the chips
Dialogue: 0,0:40:56.22,0:40:59.58,Chinese,,0,0,0,,他们在芯片上放置了更多处理器内核
Dialogue: 0,0:41:00.22,0:41:05.08,English,,0,0,0,,So now they subdivided a CPU chip into individual processor cores
Dialogue: 0,0:41:00.22,0:41:05.08,Chinese,,0,0,0,,所以现在他们将CPU芯片细分为单独的处理器内核
Dialogue: 0,0:41:05.08,0:41:07.52,English,,0,0,0,,Each one could execute its own instructions
Dialogue: 0,0:41:05.08,0:41:07.52,Chinese,,0,0,0,,每个人都可以执行自己的指令
Dialogue: 0,0:41:09.64,0:41:13.24,English,,0,0,0,,And then so and by running in parallel
Dialogue: 0,0:41:09.64,0:41:13.24,Chinese,,0,0,0,,然后通过并行运行
Dialogue: 0,0:41:13.54,0:41:18.70,English,,0,0,0,,You could do more effective work so the effective cycle time could continue to go down
Dialogue: 0,0:41:13.54,0:41:18.70,Chinese,,0,0,0,,你可以做更有效的工作，因此有效的周期时间可能会继续下降
Dialogue: 0,0:41:18.70,0:41:22.54,English,,0,0,0,,So what I've what I plotted here on the bottom is the effective cycle time
Dialogue: 0,0:41:18.70,0:41:22.54,Chinese,,0,0,0,,所以我在底部绘制的是有效循环时间
Dialogue: 0,0:41:22.54,0:41:26.40,English,,0,0,0,,So basically the the cycle time divided by the number of cores
Dialogue: 0,0:41:22.54,0:41:26.40,Chinese,,0,0,0,,所以基本上循环时间除以核心数
Dialogue: 0,0:41:27.46,0:41:30.80,English,,0,0,0,,So here in 2005 that the first systems use two cores
Dialogue: 0,0:41:27.46,0:41:30.80,Chinese,,0,0,0,,所以在2005年，第一个系统使用两个核心
Dialogue: 0,0:41:31.36,0:41:34.60,English,,0,0,0,,So now you can run two independent threads or two independent programs
Dialogue: 0,0:41:31.36,0:41:34.60,Chinese,,0,0,0,,所以现在你可以运行两个独立的线程或两个独立的程序
Dialogue: 0,0:41:35.30,0:41:40.10,English,,0,0,0,,And currently it's about four cores server class systems you can get eight cores
Dialogue: 0,0:41:35.30,0:41:40.10,Chinese,,0,0,0,,目前，它是关于四核服务器级系统，你可以获得八个核心
Dialogue: 0,0:41:40.58,0:41:43.94,English,,0,0,0,,And there's even some 12 core chips
Dialogue: 0,0:41:40.58,0:41:43.94,Chinese,,0,0,0,,甚至还有12个核心芯片
Dialogue: 0,0:41:44.74,0:41:50.60,English,,0,0,0,,So in the future what's going to happen is that the the clock frequencies are going to stay fairly constant
Dialogue: 0,0:41:44.74,0:41:50.60,Chinese,,0,0,0,,因此，未来将要发生的是时钟频率将保持相当稳定
Dialogue: 0,0:41:50.60,0:41:54.56,English,,0,0,0,,So you can see the site you can see the the cycle times are
Dialogue: 0,0:41:50.60,0:41:54.56,Chinese,,0,0,0,,所以你可以看到你可以看到周期时间的站点
Dialogue: 0,0:41:55.24,0:42:00.48,English,,0,0,0,,They actually increased a little bit here and then they're slowly going down but it's generally flat
Dialogue: 0,0:41:55.24,0:42:00.48,Chinese,,0,0,0,,它们实际上在这里增加了一点，然后它们慢慢地下降但是它通常是平的
Dialogue: 0,0:42:02.20,0:42:04.78,English,,0,0,0,,And so the only way to really get more performance
Dialogue: 0,0:42:02.20,0:42:04.78,Chinese,,0,0,0,,这是真正获得更多性能的唯一途径
Dialogue: 0,0:42:04.94,0:42:07.48,English,,0,0,0,,Go forward is to increase the number of independent course
Dialogue: 0,0:42:04.94,0:42:07.48,Chinese,,0,0,0,,前进是增加独立课程的数量
Dialogue: 0,0:42:08.28,0:42:13.54,English,,0,0,0,,And that's just that's just the way it's got to be
Dialogue: 0,0:42:08.28,0:42:13.54,Chinese,,0,0,0,,而这就是它的方式
Dialogue: 0,0:42:14.88,0:42:20.32,English,,0,0,0,,Now here in the the black circle the second line I've plotted the access time for SRAM over time
Dialogue: 0,0:42:14.88,0:42:20.32,Chinese,,0,0,0,,现在，在第二行的黑色圆圈中，我绘制了SRAM随时间的访问时间
Dialogue: 0,0:42:22.24,0:42:25.54,English,,0,0,0,,And you can see that SRAM is tracking CPU pretty good
Dialogue: 0,0:42:22.24,0:42:25.54,Chinese,,0,0,0,,你可以看到SRAM跟踪CPU非常好
Dialogue: 0,0:42:25.94,0:42:29.68,English,,0,0,0,,And it and there's it's it's an order of magnitude slower but
Dialogue: 0,0:42:25.94,0:42:29.68,Chinese,,0,0,0,,而它和它的速度要慢一些
Dialogue: 0,0:42:30.12,0:42:34.22,English,,0,0,0,,It's tracking the CPU performance pretty well
Dialogue: 0,0:42:30.12,0:42:34.22,Chinese,,0,0,0,,它很好地跟踪CPU性能
Dialogue: 0,0:42:34.72,0:42:40.92,English,,0,0,0,,Dram you can see there's a huge gap between the CPU and the DRAM several orders of magnitude
Dialogue: 0,0:42:34.72,0:42:40.92,Chinese,,0,0,0,,Dram你可以看到CPU和DRAM之间存在几个数量级的巨大差距
Dialogue: 0,0:42:41.50,0:42:44.08,English,,0,0,0,,And in the last few years DRAMs have gotten a little better
Dialogue: 0,0:42:41.50,0:42:44.08,Chinese,,0,0,0,,在过去的几年里，DRAM已经变得更好了
Dialogue: 0,0:42:44.08,0:42:49.64,English,,0,0,0,,But they've proven surprisingly difficult to to make faster
Dialogue: 0,0:42:44.08,0:42:49.64,Chinese,,0,0,0,,但他们已经证明难以加快速度
Dialogue: 0,0:42:53.24,0:42:56.48,English,,0,0,0,,SSDs are kind of in between disks and DRAM
Dialogue: 0,0:42:53.24,0:42:56.48,Chinese,,0,0,0,,SSD介于磁盘和DRAM之间
Dialogue: 0,0:42:56.48,0:43:02.44,English,,0,0,0,,And then disks up here you can see at a million nanoseconds that's the that's a millisecond
Dialogue: 0,0:42:56.48,0:43:02.44,Chinese,,0,0,0,,然后在这里的磁盘你可以看到一百万纳秒就是那个毫秒
Dialogue: 0,0:43:02.44,0:43:11.93,English,,0,0,0,,So you can see disks are sort of in this in this sort of millisecond range with access times
Dialogue: 0,0:43:02.44,0:43:11.93,Chinese,,0,0,0,,因此，你可以看到磁盘在这种毫秒范围内具有访问时间
Dialogue: 0,0:43:12.30,0:43:16.46,English,,0,0,0,,And those those that they've gone down a little bit but not really too much
Dialogue: 0,0:43:12.30,0:43:16.46,Chinese,,0,0,0,,而那些那些他们已经下降了一点但不是真的太多了
Dialogue: 0,0:43:17.30,0:43:24.90,English,,0,0,0,,So the point I want to make is that there's this huge gap between DRAM  SSD disk in and CPUs
Dialogue: 0,0:43:17.30,0:43:24.90,Chinese,,0,0,0,,所以我想说的是DRAM SSD磁盘和CPU之间存在巨大差距
Dialogue: 0,0:43:25.38,0:43:31.34,English,,0,0,0,,And in some cases it's even getting worse as time goes by so that's a problem right how
Dialogue: 0,0:43:25.38,0:43:31.34,Chinese,,0,0,0,,而且在某些情况下，随着时间的推移，它甚至会变得越来越糟，因此这是一个问题
Dialogue: 0,0:43:33.08,0:43:37.24,English,,0,0,0,,Our programs all need data our data is stored in memory and disk
Dialogue: 0,0:43:33.08,0:43:37.24,Chinese,,0,0,0,,我们的程序都需要数据，我们的数据存储在内存和磁盘中
Dialogue: 0,0:43:38.50,0:43:41.20,English,,0,0,0,,So if if our if our computers are getting faster
Dialogue: 0,0:43:38.50,0:43:41.20,Chinese,,0,0,0,,所以如果你的计算机变得越来越快
Dialogue: 0,0:43:41.94,0:43:47.95,English,,0,0,0,,And our storage devices are are staying relatively the same or relatively slower
Dialogue: 0,0:43:41.94,0:43:47.95,Chinese,,0,0,0,,我们的存储设备保持相对相同或相对较慢
Dialogue: 0,0:43:48.42,0:43:53.16,English,,0,0,0,,Then we've got a problem right increases in in our in computer performance won't
Dialogue: 0,0:43:48.42,0:43:53.16,Chinese,,0,0,0,,然后我们遇到了一个问题，在我们的计算机性能上不会增加
Dialogue: 0,0:43:53.32,0:43:56.06,English,,0,0,0,,It'll be hard to make our programs run faster
Dialogue: 0,0:43:53.32,0:43:56.06,Chinese,,0,0,0,,让我们的程序运行得更快很难
Dialogue: 0,0:43:56.20,0:43:59.76,English,,0,0,0,,Because we'll be limited by the time it takes to to access the data
Dialogue: 0,0:43:56.20,0:43:59.76,Chinese,,0,0,0,,因为我们会受到访问数据所需时间的限制
Dialogue: 0,0:44:01.18,0:44:04.62,English,,0,0,0,,Ok so that's that that's sort of the fundamental problem that we have to deal with
Dialogue: 0,0:44:01.18,0:44:04.62,Chinese,,0,0,0,,好的，这就是我们必须处理的基本问题
Dialogue: 0,0:44:05.80,0:44:12.86,English,,0,0,0,,And it turns out that the key to bridging this this gap between the CPU and and memory
Dialogue: 0,0:44:05.80,0:44:12.86,Chinese,,0,0,0,,事实证明，这是弥合CPU和内存之间差距的关键
Dialogue: 0,0:44:13.52,0:44:18.86,English,,0,0,0,,Is this is this very basic fundamental property of programs called locality
Dialogue: 0,0:44:13.52,0:44:18.86,Chinese,,0,0,0,,这是地方性程序的这个非常基本的基本属性
Dialogue: 0,0:44:19.62,0:44:25.02,English,,0,0,0,,Okay and so this is an essential sort of fundamental enduring property of programs
Dialogue: 0,0:44:19.62,0:44:25.02,Chinese,,0,0,0,,好的，所以这是程序的一个基本的持久性财产
Dialogue: 0,0:44:31.60,0:44:36.28,English,,0,0,0,,So we say that so programs have this property called locality
Dialogue: 0,0:44:31.60,0:44:36.28,Chinese,,0,0,0,,所以我们说所以程序有这个属性叫做locality
Dialogue: 0,0:44:37.22,0:44:38.96,English,,0,0,0,,And what this means is that
Dialogue: 0,0:44:37.22,0:44:38.96,Chinese,,0,0,0,,这意味着什么
Dialogue: 0,0:44:41.00,0:44:44.66,English,,0,0,0,,I'm sorry I'll just I have to read it because it's it's really accurate definition
Dialogue: 0,0:44:41.00,0:44:44.66,Chinese,,0,0,0,,对不起，我只需要阅读它，因为这是非常准确的定义
Dialogue: 0,0:44:44.66,0:44:53.38,English,,0,0,0,,So programs tend to use data and instructions whose addresses are near or equal to those that they have used recently
Dialogue: 0,0:44:44.66,0:44:53.38,Chinese,,0,0,0,,因此，程序倾向于使用其地址接近或等于最近使用的数据和指令
Dialogue: 0,0:44:54.86,0:45:00.14,English,,0,0,0,,Okay so if a program access is a data item the chances are very high
Dialogue: 0,0:44:54.86,0:45:00.14,Chinese,,0,0,0,,好的，如果程序访问是一个数据项，那么机会非常高
Dialogue: 0,0:45:01.06,0:45:06.78,English,,0,0,0,,That it's going to access that data item or a nearby data item sometime in the near future
Dialogue: 0,0:45:01.06,0:45:06.78,Chinese,,0,0,0,,它将在不久的将来某个时间访问该数据项或附近的数据项
Dialogue: 0,0:45:09.24,0:45:14.72,English,,0,0,0,,Okay that likelihood that the program is going to access that data item or a nearby a data item
Dialogue: 0,0:45:09.24,0:45:14.72,Chinese,,0,0,0,,好的，该程序可能会访问该数据项或附近的数据项
Dialogue: 0,0:45:14.78,0:45:18.68,English,,0,0,0,,In the near future is that is this property called locality
Dialogue: 0,0:45:14.78,0:45:18.68,Chinese,,0,0,0,,在不久的将来，这个属性称为地方
Dialogue: 0,0:45:19.74,0:45:24.90,English,,0,0,0,,So well does we just typically distinguish two two different kinds of locality
Dialogue: 0,0:45:19.74,0:45:24.90,Chinese,,0,0,0,,我们通常只能区分两种不同的地方
Dialogue: 0,0:45:25.42,0:45:33.00,English,,0,0,0,,Temporal locality is the property that recently referenced items are likely to be referenced again in the near future
Dialogue: 0,0:45:25.42,0:45:33.00,Chinese,,0,0,0,,时间局部性是最近引用的项目可能在不久的将来再次被引用的属性
Dialogue: 0,0:45:33.50,0:45:35.53,English,,0,0,0,,Kaycee 50 so if you read a variable
Dialogue: 0,0:45:33.50,0:45:35.53,Chinese,,0,0,0,,如果你读了变量，凯赛50就这样了
Dialogue: 0,0:45:36.16,0:45:38.50,English,,0,0,0,,Chances are you're going to read that variable again
Dialogue: 0,0:45:36.16,0:45:38.50,Chinese,,0,0,0,,你有可能再次阅读该变量
Dialogue: 0,0:45:39.24,0:45:42.74,English,,0,0,0,,For example suppose you're summing into a variable inside of a loop
Dialogue: 0,0:45:39.24,0:45:42.74,Chinese,,0,0,0,,例如，假设你在循环内汇总为变量
Dialogue: 0,0:45:42.96,0:45:46.46,English,,0,0,0,,Each loop iteration you're going to access that that variable okay
Dialogue: 0,0:45:42.96,0:45:46.46,Chinese,,0,0,0,,你将要访问该变量的每个循环迭代都可以
Dialogue: 0,0:45:47.28,0:45:55.06,English,,0,0,0,,Spatial locality is that the tendency for items with nearby addresses up that
Dialogue: 0,0:45:47.28,0:45:55.06,Chinese,,0,0,0,,空间局部性是指具有附近地址的物品的趋势
Dialogue: 0,0:45:55.34,0:46:01.70,English,,0,0,0,,That items if we access if we access one item chances are high we're going to access a nearby item
Dialogue: 0,0:45:55.34,0:46:01.70,Chinese,,0,0,0,,如果我们访问，如果我们访问一个项目的机会很高，我们将访问附近的项目
Dialogue: 0,0:46:05.86,0:46:13.46,English,,0,0,0,,Okay so let's look at this little snippet of code and see if we can identify all the different kinds of locality in this code
Dialogue: 0,0:46:05.86,0:46:13.46,Chinese,,0,0,0,,好的，让我们看看这段代码片段，看看我们是否可以在此代码中识别出所有不同类型的局部性
Dialogue: 0,0:46:14.72,0:46:18.04,English,,0,0,0,,So we have two different kinds of of references there's data references
Dialogue: 0,0:46:14.72,0:46:18.04,Chinese,,0,0,0,,所以我们有两种不同类型的参考资料
Dialogue: 0,0:46:18.64,0:46:22.08,English,,0,0,0,,And then there's instructions right so we're reading instructions out of memory
Dialogue: 0,0:46:18.64,0:46:22.08,Chinese,,0,0,0,,然后是正确的指示，所以我们正在读取内存中的指令
Dialogue: 0,0:46:22.36,0:46:24.22,English,,0,0,0,,And those instructions are referencing data okay
Dialogue: 0,0:46:22.36,0:46:24.22,Chinese,,0,0,0,,这些说明正好引用数据
Dialogue: 0,0:46:26.96,0:46:32.70,English,,0,0,0,,So first of all notice that we're we're referencing the elements of an array in succession
Dialogue: 0,0:46:26.96,0:46:32.70,Chinese,,0,0,0,,首先要注意的是，我们正在连续引用数组的元素
Dialogue: 0,0:46:33.70,0:46:36.42,English,,0,0,0,,So we're increasing I by one each time and then we're
Dialogue: 0,0:46:33.70,0:46:36.42,Chinese,,0,0,0,,所以我们每次增加一个然后我们就是
Dialogue: 0,0:46:36.76,0:46:41.20,English,,0,0,0,,So we're incrementing I through the loop and we're reading a[i]
Dialogue: 0,0:46:36.76,0:46:41.20,Chinese,,0,0,0,,所以我们通过循环增加我，我们正在阅读[i]
Dialogue: 0,0:46:42.32,0:46:45.98,English,,0,0,0,,Okay so this is called a stride one reference pattern the
Dialogue: 0,0:46:42.32,0:46:45.98,Chinese,,0,0,0,,好的，所以这被称为一个步幅参考模式
Dialogue: 0,0:46:46.66,0:46:50.82,English,,0,0,0,,The stride is how much we're incrementing this this index
Dialogue: 0,0:46:46.66,0:46:50.82,Chinese,,0,0,0,,大步是我们将这个指数递增多少
Dialogue: 0,0:46:50.82,0:46:54.64,English,,0,0,0,,So we're since we're incrementing it by one we call that a stride one pattern
Dialogue: 0,0:46:50.82,0:46:54.64,Chinese,,0,0,0,,因此，我们将它增加一个，我们称之为一个跨步的模式
Dialogue: 0,0:46:55.46,0:47:05.38,English,,0,0,0,,So what kind of what kind of locality is the these repeated references to a[i] spatial or temporal
Dialogue: 0,0:46:55.46,0:47:05.38,Chinese,,0,0,0,,那么，对于[i]空间或时间的这些重复引用，究竟是什么类型的局部性
Dialogue: 0,0:47:07.54,0:47:10.08,English,,0,0,0,,That spatial right because we're accessing nearby items
Dialogue: 0,0:47:07.54,0:47:10.08,Chinese,,0,0,0,,那个空间权利因为我们正在访问附近的物品
Dialogue: 0,0:47:12.10,0:47:16.02,English,,0,0,0,,Okay what about the referencing this this variable some inside the loop
Dialogue: 0,0:47:12.10,0:47:16.02,Chinese,,0,0,0,,好的，在循环内部引用这个变量
Dialogue: 0,0:47:17.00,0:47:17.96,English,,0,0,0,,That's temporal
Dialogue: 0,0:47:17.00,0:47:17.96,Chinese,,0,0,0,,这是暂时的
Dialogue: 0,0:47:19.48,0:47:20.84,English,,0,0,0,,Now what about instructions
Dialogue: 0,0:47:19.48,0:47:20.84,Chinese,,0,0,0,,现在说明怎么样
Dialogue: 0,0:47:21.48,0:47:28.02,English,,0,0,0,,So we're referencing where each loop iteration where reference we're executing a sequence of instructions
Dialogue: 0,0:47:21.48,0:47:28.02,Chinese,,0,0,0,,所以我们引用每个循环迭代的位置，其中引用我们正在执行一系列指令
Dialogue: 0,0:47:28.86,0:47:30.52,English,,0,0,0,,So what kind of locality is that
Dialogue: 0,0:47:28.86,0:47:30.52,Chinese,,0,0,0,,那是什么样的地方
Dialogue: 0,0:47:34.06,0:47:37.86,English,,0,0,0,,Within each loop iteration? no that's spatial right
Dialogue: 0,0:47:34.06,0:47:37.86,Chinese,,0,0,0,,在每个循环迭代中？没有空间权利
Dialogue: 0,0:47:37.86,0:47:42.93,English,,0,0,0,,Because we're just executing a sequence of instructions within each loop iteration
Dialogue: 0,0:47:37.86,0:47:42.93,Chinese,,0,0,0,,因为我们只是在每次循环迭代中执行一系列指令
Dialogue: 0,0:47:43.52,0:47:45.74,English,,0,0,0,,But then we cycle through the loop repeatedly
Dialogue: 0,0:47:43.52,0:47:45.74,Chinese,,0,0,0,,但是我们反复循环循环
Dialogue: 0,0:47:46.48,0:47:52.58,English,,0,0,0,,So we'll chances so each loop iteration we're going to access each of those instructions
Dialogue: 0,0:47:46.48,0:47:52.58,Chinese,,0,0,0,,因此，我们很有可能每次循环迭代，我们将访问每个指令
Dialogue: 0,0:47:53.32,0:47:55.78,English,,0,0,0,,That we access the previous loop iteration right
Dialogue: 0,0:47:53.32,0:47:55.78,Chinese,,0,0,0,,我们正确访问前一个循环迭代
Dialogue: 0,0:47:55.94,0:47:59.58,English,,0,0,0,,So we go up we just keep at we're just going to keep executing the sum
Dialogue: 0,0:47:55.94,0:47:59.58,Chinese,,0,0,0,,所以我们上去，我们只是继续我们只是继续执行总和
Dialogue: 0,0:48:00.02,0:48:03.48,English,,0,0,0,,Assembly language instructions that implement this loop body
Dialogue: 0,0:48:00.02,0:48:03.48,Chinese,,0,0,0,,实现此循环体的汇编语言指令
Dialogue: 0,0:48:04.16,0:48:06.48,English,,0,0,0,,Now in this simple example it's probably this one instruction
Dialogue: 0,0:48:04.16,0:48:06.48,Chinese,,0,0,0,,现在在这个简单的例子中，它可能就是这一条指令
Dialogue: 0,0:48:06.48,0:48:10.32,English,,0,0,0,,But in general your loop can have multiple instructions
Dialogue: 0,0:48:06.48,0:48:10.32,Chinese,,0,0,0,,但一般来说，你的循环可以有多个指令
Dialogue: 0,0:48:13.72,0:48:20.40,English,,0,0,0,,Now when I claim to you I'm one of the one of the main sort of points of this just this whole course
Dialogue: 0,0:48:13.72,0:48:20.40,Chinese,,0,0,0,,现在，当我向你宣称时，我就是这整个课程的主要观点之一
Dialogue: 0,0:48:21.54,0:48:24.26,English,,0,0,0,,Is that as a professional programmer
Dialogue: 0,0:48:21.54,0:48:24.26,Chinese,,0,0,0,,这是一个专业的程序员
Dialogue: 0,0:48:25.24,0:48:31.84,English,,0,0,0,,It's an essential skill that that you be able to look at code and so get a qualitative sense of its locality
Dialogue: 0,0:48:25.24,0:48:31.84,Chinese,,0,0,0,,这是一项必不可少的技能，你可以查看代码，从而获得对其本地性的定性认识
Dialogue: 0,0:48:32.74,0:48:36.64,English,,0,0,0,,Because as we'll see good locality turns into good performance
Dialogue: 0,0:48:32.74,0:48:36.64,Chinese,,0,0,0,,因为我们会看到好的地方变成了良好的表现
Dialogue: 0,0:48:37.50,0:48:39.40,English,,0,0,0,,The way that systems are built these days
Dialogue: 0,0:48:37.50,0:48:39.40,Chinese,,0,0,0,,这些天系统的构建方式
Dialogue: 0,0:48:40.10,0:48:46.82,English,,0,0,0,,So as a programmer it's very important for you to be able to kind of look at code and get some qualitative sense
Dialogue: 0,0:48:40.10,0:48:46.82,Chinese,,0,0,0,,因此，作为一名程序员，能够看到代码并获得一些定性意义对你来说非常重要
Dialogue: 0,0:48:47.30,0:48:51.56,English,,0,0,0,,Like yeah that's pretty good locality that's terrible locality right that that's
Dialogue: 0,0:48:47.30,0:48:51.56,Chinese,,0,0,0,,就像是的，这是非常好的地方，这是可怕的地方，那就是
Dialogue: 0,0:48:52.34,0:48:55.48,English,,0,0,0,,And what you want to do is avoid the terrible locality in your code
Dialogue: 0,0:48:52.34,0:48:55.48,Chinese,,0,0,0,,你想要做的是避免代码中的可怕局部性
Dialogue: 0,0:48:56.28,0:48:58.34,English,,0,0,0,,So let's look at a simple example here
Dialogue: 0,0:48:56.28,0:48:58.34,Chinese,,0,0,0,,那么让我们看一个简单的例子吧
Dialogue: 0,0:48:59.10,0:49:00.52,English,,0,0,0,,To see what I mean by this
Dialogue: 0,0:48:59.10,0:49:00.52,Chinese,,0,0,0,,看看我的意思
Dialogue: 0,0:49:01.62,0:49:06.66,English,,0,0,0,,So what I'm doing is I'm taking an array a two-dimensional array a
Dialogue: 0,0:49:01.62,0:49:06.66,Chinese,,0,0,0,,所以我正在做的是我将一个数组作为一个二维数组a
Dialogue: 0,0:49:07.16,0:49:09.30,English,,0,0,0,,With m m rows and n columns
Dialogue: 0,0:49:07.16,0:49:09.30,Chinese,,0,0,0,,m m行和n列
Dialogue: 0,0:49:10.98,0:49:17.04,English,,0,0,0,,And within it a doubly nested loop iterating on I and j
Dialogue: 0,0:49:10.98,0:49:17.04,Chinese,,0,0,0,,并且在其中迭代I和j的双重嵌套循环
Dialogue: 0,0:49:17.30,0:49:19.07,English,,0,0,0,,I'm summing the elements of that array
Dialogue: 0,0:49:17.30,0:49:19.07,Chinese,,0,0,0,,我正在总结该数组的元素
Dialogue: 0,0:49:19.90,0:49:24.38,English,,0,0,0,,Okay seems this a very simple operation what could go wrong right
Dialogue: 0,0:49:19.90,0:49:24.38,Chinese,,0,0,0,,好吧，这似乎是一个非常简单的操作，可能会出错
Dialogue: 0,0:49:26.66,0:49:36.20,English,,0,0,0,,So it turns out if you write this code to have bad locality  it will run order magnitude slower
Dialogue: 0,0:49:26.66,0:49:36.20,Chinese,,0,0,0,,因此，如果你编写此代码以使其具有较差的局部性，则它将以较慢的顺序运行
Dialogue: 0,0:49:38.12,0:49:43.56,English,,0,0,0,,Okay so if just look at this if you look at this do you think this has good locality or bad locality
Dialogue: 0,0:49:38.12,0:49:43.56,Chinese,,0,0,0,,好吧，如果只看这个，如果你看这个，你认为这有好的地方或糟糕的地方
Dialogue: 0,0:49:44.14,0:49:49.36,English,,0,0,0,,Let's look at the with respect to the accesses of a
Dialogue: 0,0:49:44.14,0:49:49.36,Chinese,,0,0,0,,让我们看一下关于a的访问
Dialogue: 0,0:49:53.42,0:49:54.20,English,,0,0,0,,Good or bad ?
Dialogue: 0,0:49:53.42,0:49:54.20,Chinese,,0,0,0,,是好是坏 ？
Dialogue: 0,0:50:00.76,0:50:04.78,English,,0,0,0,,Well so how is how is a laid out in memory right
Dialogue: 0,0:50:00.76,0:50:04.78,Chinese,,0,0,0,,那么如何在记忆中如何正确布局呢
Dialogue: 0,0:50:05.96,0:50:11.38,English,,0,0,0,,It's row wise all right so see uses used lays out a raised row wise
Dialogue: 0,0:50:05.96,0:50:11.38,Chinese,,0,0,0,,这是行的明智，所以看到使用的用法列出了一个明智的行
Dialogue: 0,0:50:11.38,0:50:16.06,English,,0,0,0,,So the first all the elements of the first row followed by all the elements
Dialogue: 0,0:50:11.38,0:50:16.06,Chinese,,0,0,0,,所以第一行的第一个元素后跟所有元素
Dialogue: 0,0:50:16.06,0:50:19.14,English,,0,0,0,,Of the second row followed by all the elements of the third row
Dialogue: 0,0:50:16.06,0:50:19.14,Chinese,,0,0,0,,在第二行之后是第三行的所有元素
Dialogue: 0,0:50:21.08,0:50:23.28,English,,0,0,0,,Okay so how are we accessing this array
Dialogue: 0,0:50:21.08,0:50:23.28,Chinese,,0,0,0,,好的，我们如何访问这个数组
Dialogue: 0,0:50:23.28,0:50:30.42,English,,0,0,0,,Look at we're accessing a[i][j] and we're varying j the fastest
Dialogue: 0,0:50:23.28,0:50:30.42,Chinese,,0,0,0,,看看我们正在访问[i] [j]，我们正在以最快的速度改变j
Dialogue: 0,0:50:30.44,0:50:33.42,English,,0,0,0,,So we hold I constant and then we vary j
Dialogue: 0,0:50:30.44,0:50:33.42,Chinese,,0,0,0,,所以我们保持不变，然后我们改变j
Dialogue: 0,0:50:33.94,0:50:38.32,English,,0,0,0,,And then we access all so we hold the I constant to access row i
Dialogue: 0,0:50:33.94,0:50:38.32,Chinese,,0,0,0,,然后我们访问所有，所以我们保持I常量访问第i行
Dialogue: 0,0:50:39.10,0:50:43.44,English,,0,0,0,,And then we vary j to access all the columns in that row
Dialogue: 0,0:50:39.10,0:50:43.44,Chinese,,0,0,0,,然后我们改变j来访问该行中的所有列
Dialogue: 0,0:50:44.76,0:50:51.06,English,,0,0,0,,Okay so each each hitter and then we increase and then we go back and increase i
Dialogue: 0,0:50:44.76,0:50:51.06,Chinese,,0,0,0,,好的，所以每个击球手然后我们增加然后我们回去增加我
Dialogue: 0,0:50:52.60,0:50:54.46,English,,0,0,0,,So now we're accessing the next row
Dialogue: 0,0:50:52.60,0:50:54.46,Chinese,,0,0,0,,所以现在我们正在访问下一行
Dialogue: 0,0:50:56.92,0:51:04.34,English,,0,0,0,,Okay so if we were to look at the addresses of a[i][j] the sequence of addresses  that are being read
Dialogue: 0,0:50:56.92,0:51:04.34,Chinese,,0,0,0,,好的，如果我们要查看[i] [j]的地址，正在读取的地址序列
Dialogue: 0,0:51:05.34,0:51:12.78,English,,0,0,0,,Those would correspond to a stride one access and so we'd be accessing all the elements of a sequentially in order
Dialogue: 0,0:51:05.34,0:51:12.78,Chinese,,0,0,0,,那些将对应于步幅一次访问，因此我们将依次按顺序访问所有元素
Dialogue: 0,0:51:13.86,0:51:18.48,English,,0,0,0,,Okay so that's really good spatial locality right that's the best you can do
Dialogue: 0,0:51:13.86,0:51:18.48,Chinese,,0,0,0,,好吧，这是非常好的空间位置，这是你能做的最好的
Dialogue: 0,0:51:19.68,0:51:25.77,English,,0,0,0,,Now what about what about and then we have temporal locality on some so that's good
Dialogue: 0,0:51:19.68,0:51:25.77,Chinese,,0,0,0,,现在怎么样，然后我们有一些时间局部性，所以这是好的
Dialogue: 0,0:51:26.66,0:51:30.54,English,,0,0,0,,Right so everything about this is pretty good so this is the good case
Dialogue: 0,0:51:26.66,0:51:30.54,Chinese,,0,0,0,,对，所以关于这一切的一切都很好，所以这是好的情况
Dialogue: 0,0:51:32.36,0:51:36.06,English,,0,0,0,,Now what about this what I've done I've taken the same program
Dialogue: 0,0:51:32.36,0:51:36.06,Chinese,,0,0,0,,那么我做了什么我采取了同样的计划
Dialogue: 0,0:51:37.16,0:51:45.22,English,,0,0,0,,And I've just inverted the loops so it's a loop on j first and then on i
Dialogue: 0,0:51:37.16,0:51:45.22,Chinese,,0,0,0,,我只是颠倒了循环，所以它首先在j上循环，然后在i上循环
Dialogue: 0,0:51:45.82,0:51:47.90,English,,0,0,0,,And then I just have the same inner loop body
Dialogue: 0,0:51:45.82,0:51:47.90,Chinese,,0,0,0,,然后我只有相同的内部循环体
Dialogue: 0,0:51:52.26,0:51:57.54,English,,0,0,0,,Now what does that do to this what does that do to the spatial locality of our accesses okay
Dialogue: 0,0:51:52.26,0:51:57.54,Chinese,,0,0,0,,现在，这对我们访问的空间局部性做了什么呢？
Dialogue: 0,0:51:57.96,0:52:00.00,English,,0,0,0,,Yes
Dialogue: 0,0:51:57.96,0:52:00.00,Chinese,,0,0,0,,是
Dialogue: 0,0:52:00.00,0:52:06.04,English,,0,0,0,,Terrible because it's going you should be offended what do you see this isn't lawful
Dialogue: 0,0:52:00.00,0:52:06.04,Chinese,,0,0,0,,可怕的是因为它会让你感到冒犯你认为这不合法
Dialogue: 0,0:52:07.60,0:52:10.24,English,,0,0,0,,But it's terrible right because look it
Dialogue: 0,0:52:07.60,0:52:10.24,Chinese,,0,0,0,,但这很糟糕，因为看起来
Dialogue: 0,0:52:11.06,0:52:14.03,English,,0,0,0,,So we're now we're holding j
Dialogue: 0,0:52:11.06,0:52:14.03,Chinese,,0,0,0,,所以我们现在正拿着j
Dialogue: 0,0:52:14.84,0:52:21.44,English,,0,0,0,,We're holding j constant and then we're iterating through the jt element of each row so that's skipping
Dialogue: 0,0:52:14.84,0:52:21.44,Chinese,,0,0,0,,我们保持j不变，然后我们遍历每一行的jt元素，以便跳过
Dialogue: 0,0:52:23.16,0:52:29.90,English,,0,0,0,,We have n we have n elements in each row so we're doing a stride n access through memory
Dialogue: 0,0:52:23.16,0:52:29.90,Chinese,,0,0,0,,我们在每行中都有n个元素，因此我们通过内存进行了大步访问
Dialogue: 0,0:52:30.68,0:52:31.96,English,,0,0,0,,So we're going like this
Dialogue: 0,0:52:30.68,0:52:31.96,Chinese,,0,0,0,,所以我们就是这样
Dialogue: 0,0:52:33.38,0:52:38.48,English,,0,0,0,,And then we're incrementing then we're looking then we're incrementing the column by one and then we're doing this again
Dialogue: 0,0:52:33.38,0:52:38.48,Chinese,,0,0,0,,然后我们正在递增然后我们正在寻找然后我们将列递增1然后我们再次这样做
Dialogue: 0,0:52:39.46,0:52:43.60,English,,0,0,0,,So it's terrible spatial locality this is the worst spatial locality we could get
Dialogue: 0,0:52:39.46,0:52:43.60,Chinese,,0,0,0,,所以这是一个糟糕的空间局部性，这是我们可以获得的最差的空间局部性
Dialogue: 0,0:52:48.30,0:52:50.22,English,,0,0,0,,Now let's look at a three dimensional array
Dialogue: 0,0:52:48.30,0:52:50.22,Chinese,,0,0,0,,现在让我们来看一个三维数组
Dialogue: 0,0:52:52.24,0:52:54.76,English,,0,0,0,,And let me ask you that let me post the following question
Dialogue: 0,0:52:52.24,0:52:54.76,Chinese,,0,0,0,,让我问你，让我发布以下问题
Dialogue: 0,0:52:55.54,0:52:59.46,English,,0,0,0,,Can you based on this sort of qualitative idea that
Dialogue: 0,0:52:55.54,0:52:59.46,Chinese,,0,0,0,,你能否基于这种定性观念
Dialogue: 0,0:53:00.14,0:53:04.24,English,,0,0,0,,This idea that you want you want to try to get a stride one reference pattern
Dialogue: 0,0:53:00.14,0:53:04.24,Chinese,,0,0,0,,这个想法，你希望你想尝试获得一个步骤参考模式
Dialogue: 0,0:53:05.34,0:53:11.40,English,,0,0,0,,Okay so how would you permute these given this given this inner body
Dialogue: 0,0:53:05.34,0:53:11.40,Chinese,,0,0,0,,好吧那么鉴于这个内在的身体，你会如何置换这些呢？
Dialogue: 0,0:53:12.48,0:53:19.38,English,,0,0,0,,A[k][i][j] how would you promote that permute these these loop indices to give stride one reference pattern
Dialogue: 0,0:53:12.48,0:53:19.38,Chinese,,0,0,0,,A [k] [i] [j]你如何促进这些循环索引的置换，以给出一个参考模式
Dialogue: 0,0:53:23.46,0:53:26.08,English,,0,0,0,,Okay that's right kij is right
Dialogue: 0,0:53:23.46,0:53:26.08,Chinese,,0,0,0,,好吧，这是正确的kij是对的
Dialogue: 0,0:53:26.60,0:53:30.28,English,,0,0,0,,So what in general we want to do is we want to go going from right to left
Dialogue: 0,0:53:26.60,0:53:30.28,Chinese,,0,0,0,,所以我们通常想做的是我们想要从右到左
Dialogue: 0,0:53:31.22,0:53:34.94,English,,0,0,0,,We want we want those indices to be changing the fastest
Dialogue: 0,0:53:31.22,0:53:34.94,Chinese,,0,0,0,,我们希望我们希望这些指数变化最快
Dialogue: 0,0:53:35.12,0:53:40.38,English,,0,0,0,,So we want j we want k and I to be held constant and then we want to change j
Dialogue: 0,0:53:35.12,0:53:40.38,Chinese,,0,0,0,,所以我们想要j我们希望k和I保持不变然后我们想要改变j
Dialogue: 0,0:53:41.10,0:53:46.24,English,,0,0,0,,Then we want to increment I and then for that value that those values of k and i
Dialogue: 0,0:53:41.10,0:53:46.24,Chinese,,0,0,0,,然后我们想要增加I然后为该值增加k和i的那些值
Dialogue: 0,0:53:46.24,0:53:51.07,English,,0,0,0,,We want to want to sequence through all the the values of j again
Dialogue: 0,0:53:46.24,0:53:51.07,Chinese,,0,0,0,,我们想要再次排序j的所有值
Dialogue: 0,0:53:51.86,0:53:52.52,English,,0,0,0,,Okay
Dialogue: 0,0:53:51.86,0:53:52.52,Chinese,,0,0,0,,好的
Dialogue: 0,0:53:56.41,0:54:01.92,English,,0,0,0,,Okay so we've looked at properties of technology of storage technologies
Dialogue: 0,0:53:56.41,0:54:01.92,Chinese,,0,0,0,,好的，我们已经研究了存储技术的技术属性
Dialogue: 0,0:54:03.18,0:54:08.84,English,,0,0,0,,And well we and there's this sort of basic sort of fundamental principle that cheaper storage
Dialogue: 0,0:54:03.18,0:54:08.84,Chinese,,0,0,0,,而且我们还有这种基本原则，即更便宜的存储
Dialogue: 0,0:54:09.36,0:54:13.88,English,,0,0,0,,You bigger storage higher capacity storage is cheaper
Dialogue: 0,0:54:09.36,0:54:13.88,Chinese,,0,0,0,,你存储容量越大，存储容量越大越便宜
Dialogue: 0,0:54:15.82,0:54:19.22,English,,0,0,0,,More expensive storage is smaller
Dialogue: 0,0:54:15.82,0:54:19.22,Chinese,,0,0,0,,更昂贵的存储空间更小
Dialogue: 0,0:54:19.72,0:54:22.16,English,,0,0,0,,Because we just don't have that we don't we can't spend enough money
Dialogue: 0,0:54:19.72,0:54:22.16,Chinese,,0,0,0,,因为我们没有那个我们没有，我们不能花足够的钱
Dialogue: 0,0:54:25.46,0:54:31.66,English,,0,0,0,,There's this gap there's this gap between our storage devices and the CPU
Dialogue: 0,0:54:25.46,0:54:31.66,Chinese,,0,0,0,,我们的存储设备和CPU之间存在这种差距
Dialogue: 0,0:54:32.86,0:54:36.08,English,,0,0,0,,That is in at least in the case of disks are getting bigger
Dialogue: 0,0:54:32.86,0:54:36.08,Chinese,,0,0,0,,至少在磁盘越来越大的情况下
Dialogue: 0,0:54:38.02,0:54:40.62,English,,0,0,0,,And we have programs that exhibit locality
Dialogue: 0,0:54:38.02,0:54:40.62,Chinese,,0,0,0,,我们有展示地方的计划
Dialogue: 0,0:54:41.98,0:54:48.34,English,,0,0,0,,Okay so these three things these properties of storage technologies
Dialogue: 0,0:54:41.98,0:54:48.34,Chinese,,0,0,0,,好的，这三件事就是存储技术的这些特性
Dialogue: 0,0:54:48.64,0:54:50.50,English,,0,0,0,,And properties of our programs
Dialogue: 0,0:54:48.64,0:54:50.50,Chinese,,0,0,0,,和我们的程序的属性
Dialogue: 0,0:54:50.94,0:54:58.18,English,,0,0,0,,Complement each other in this beautiful way to suggest and inform the design of our storage systems
Dialogue: 0,0:54:50.94,0:54:58.18,Chinese,,0,0,0,,以这种美丽的方式相互补充，为我们的存储系统的设计提供建议和信息
Dialogue: 0,0:54:58.82,0:55:01.84,English,,0,0,0,,And this design is something called a memory hierarchy
Dialogue: 0,0:54:58.82,0:55:01.84,Chinese,,0,0,0,,这种设计称为内存层次结构
Dialogue: 0,0:55:03.96,0:55:05.98,English,,0,0,0,,Okay here's the idea of a memory hierarchy
Dialogue: 0,0:55:03.96,0:55:05.98,Chinese,,0,0,0,,好的，这是内存层次结构的想法
Dialogue: 0,0:55:07.92,0:55:12.74,English,,0,0,0,,You layer instead of a flat memory system you now
Dialogue: 0,0:55:07.92,0:55:12.74,Chinese,,0,0,0,,你现在分层而不是平面内存系统
Dialogue: 0,0:55:13.04,0:55:16.16,English,,0,0,0,,You create your memory system as a hierarchy of devices
Dialogue: 0,0:55:13.04,0:55:16.16,Chinese,,0,0,0,,你将内存系统创建为设备层次结构
Dialogue: 0,0:55:17.84,0:55:20.82,English,,0,0,0,,And at the top of the at the top of this hierarchy
Dialogue: 0,0:55:17.84,0:55:20.82,Chinese,,0,0,0,,并位于此层次结构顶部的顶部
Dialogue: 0,0:55:21.54,0:55:25.94,English,,0,0,0,,You have your smaller faster and more expensive storage devices
Dialogue: 0,0:55:21.54,0:55:25.94,Chinese,,0,0,0,,你拥有更小，更快，更昂贵的存储设备
Dialogue: 0,0:55:25.94,0:55:28.62,English,,0,0,0,,So at the very top you have registers
Dialogue: 0,0:55:25.94,0:55:28.62,Chinese,,0,0,0,,所以在最顶层你有寄存器
Dialogue: 0,0:55:29.56,0:55:35.50,English,,0,0,0,,Which are which can be accessed and within one cycle right one instruction
Dialogue: 0,0:55:29.56,0:55:35.50,Chinese,,0,0,0,,哪一个可以访问，并在一个周期内正确的一条指令
Dialogue: 0,0:55:36.76,0:55:40.46,English,,0,0,0,,While that instructions executing can access read and write into a register
Dialogue: 0,0:55:36.76,0:55:40.46,Chinese,,0,0,0,,执行指令时可以访问读写寄存器
Dialogue: 0,0:55:41.16,0:55:43.74,English,,0,0,0,,Okay so registers are at the top of the hierarchy
Dialogue: 0,0:55:41.16,0:55:43.74,Chinese,,0,0,0,,好的，所以寄存器位于层次结构的顶部
Dialogue: 0,0:55:44.46,0:55:47.36,English,,0,0,0,,But because those are in custom silicon they're very expensive right
Dialogue: 0,0:55:44.46,0:55:47.36,Chinese,,0,0,0,,但由于这些都是定制芯片，因此它们非常昂贵
Dialogue: 0,0:55:47.36,0:55:51.50,English,,0,0,0,,The fabrication plants to make processors cost billions of dollars
Dialogue: 0,0:55:47.36,0:55:51.50,Chinese,,0,0,0,,制造处理器的制造工厂耗资数十亿美元
Dialogue: 0,0:55:52.16,0:55:53.98,English,,0,0,0,,Okay so this is the most expensive and
Dialogue: 0,0:55:52.16,0:55:53.98,Chinese,,0,0,0,,好的，所以这是最贵的
Dialogue: 0,0:55:54.60,0:55:59.56,English,,0,0,0,,Because of that it's also the smallest we've only got 16 registers at the top of the hierarchy
Dialogue: 0,0:55:54.60,0:55:59.56,Chinese,,0,0,0,,因为它也是最小的，我们在层次结构的顶部只有16个寄存器
Dialogue: 0,0:56:00.60,0:56:07.00,English,,0,0,0,,Now below that we put one or more SRAM memories remember SRAM is faster
Dialogue: 0,0:56:00.60,0:56:07.00,Chinese,,0,0,0,,现在，我们把一个或多个SRAM存储器记得SRAM更快
Dialogue: 0,0:56:08.46,0:56:10.02,English,,0,0,0,,It's the fastest kind of memory
Dialogue: 0,0:56:08.46,0:56:10.02,Chinese,,0,0,0,,这是最快的记忆
Dialogue: 0,0:56:10.02,0:56:16.16,English,,0,0,0,,So we put one or more so-called caches cache memories built out of SRAM
Dialogue: 0,0:56:10.02,0:56:16.16,Chinese,,0,0,0,,因此我们将一个或多个所谓的高速缓存存储器建立在SRAM之外
Dialogue: 0,0:56:16.78,0:56:18.80,English,,0,0,0,,In the processor chip itself
Dialogue: 0,0:56:16.78,0:56:18.80,Chinese,,0,0,0,,在处理器芯片本身
Dialogue: 0,0:56:23.44,0:56:30.82,English,,0,0,0,,And then and these caches because they're made out of SRAM they're on the order of megabytes in size
Dialogue: 0,0:56:23.44,0:56:30.82,Chinese,,0,0,0,,然后和这些缓存，因为它们是由SRAM制成的，它们的大小是兆字节
Dialogue: 0,0:56:31.18,0:56:34.38,English,,0,0,0,,Okay they're much bigger than registers but they're they're megabytes
Dialogue: 0,0:56:31.18,0:56:34.38,Chinese,,0,0,0,,好吧，它们比寄存器大得多，但它们只是兆字节
Dialogue: 0,0:56:35.94,0:56:39.86,English,,0,0,0,,Okay which if we look and then beneath that is our
Dialogue: 0,0:56:35.94,0:56:39.86,Chinese,,0,0,0,,好吧，如果我们看起来然后在那之下就是我们的
Dialogue: 0,0:56:40.10,0:56:47.08,English,,0,0,0,,Main memory which is built out of DRAMs and those can be gigabytes  tens of gigabytes on modern systems
Dialogue: 0,0:56:40.10,0:56:47.08,Chinese,,0,0,0,,在DRAM中构建的主存储器在现代系统上可以是几十亿字节
Dialogue: 0,0:56:47.92,0:56:49.84,English,,0,0,0,,And then below that is our local disks
Dialogue: 0,0:56:47.92,0:56:49.84,Chinese,,0,0,0,,然后在我们的本地磁盘下面
Dialogue: 0,0:56:50.68,0:56:57.08,English,,0,0,0,,And we can even have lower layers like web servers that are storing you know for storing stuff on google
Dialogue: 0,0:56:50.68,0:56:57.08,Chinese,,0,0,0,,而且我们甚至可以拥有像网络服务器这样的较低层，存储你知道在谷歌上存储的东西
Dialogue: 0,0:56:57.76,0:57:01.38,English,,0,0,0,,That you can think of that as just part of our our hierarchy
Dialogue: 0,0:56:57.76,0:57:01.38,Chinese,,0,0,0,,你可以将其视为我们层次结构的一部分
Dialogue: 0,0:57:02.60,0:57:06.90,English,,0,0,0,,Now here's the here's the key idea and a higher in a in a memory hierarchy
Dialogue: 0,0:57:02.60,0:57:06.90,Chinese,,0,0,0,,现在这里是关键想法，在内存层次结构中更高
Dialogue: 0,0:57:07.92,0:57:14.89,English,,0,0,0,,Each level in this hierarchy holds data that's retrieved from the next lower level
Dialogue: 0,0:57:07.92,0:57:14.89,Chinese,,0,0,0,,此层次结构中的每个级别都包含从下一个较低级别检索的数据
Dialogue: 0,0:57:15.56,0:57:21.24,English,,0,0,0,,Okay so caches hold registers hold data that's that's stored in the l1 cache
Dialogue: 0,0:57:15.56,0:57:21.24,Chinese,,0,0,0,,好的，所以高速缓存保持寄存器保存数据，这些数据存储在l1高速缓存中
Dialogue: 0,0:57:22.12,0:57:30.00,English,,0,0,0,,The l1 cache holds data that's retrieved from the l2 cache the l3 cache holds data  that's restored
Dialogue: 0,0:57:22.12,0:57:30.00,Chinese,,0,0,0,,l1缓存保存从l2缓存中检索的数据，l3缓存保存已恢复的数据
Dialogue: 0,0:57:30.70,0:57:37.48,English,,0,0,0,,That's that's retrieved from main memory main memory holds data that's retrieved from secondary disk and so on
Dialogue: 0,0:57:30.70,0:57:37.48,Chinese,,0,0,0,,从主内存主内存中检索到的内容包含从辅助磁盘检索的数据，依此类推
Dialogue: 0,0:57:39.46,0:57:44.10,English,,0,0,0,,Now as we'll see the that the reason memory systems are designed like this
Dialogue: 0,0:57:39.46,0:57:44.10,Chinese,,0,0,0,,现在，我们将看到内存系统设计如此的原因
Dialogue: 0,0:57:45.22,0:57:48.22,English,,0,0,0,,Is that they when you have this kind of system
Dialogue: 0,0:57:45.22,0:57:48.22,Chinese,,0,0,0,,当你拥有这种系统时就是他们
Dialogue: 0,0:57:50.68,0:57:59.28,English,,0,0,0,,This you can access in general you can access your data at the speed of the fastest item in the day
Dialogue: 0,0:57:50.68,0:57:59.28,Chinese,,0,0,0,,你可以访问这一点，你可以以当天最快项目的速度访问你的数据
Dialogue: 0,0:57:59.74,0:58:01.20,English,,0,0,0,,And at the top of the hierarchy
Dialogue: 0,0:57:59.74,0:58:01.20,Chinese,,0,0,0,,在层次结构的顶部
Dialogue: 0,0:58:01.66,0:58:02.76,English,,0,0,0,,So that's the fastest
Dialogue: 0,0:58:01.66,0:58:02.76,Chinese,,0,0,0,,所以这是最快的
Dialogue: 0,0:58:03.66,0:58:08.80,English,,0,0,0,,But with the cost of the storage at the lower part of the hierarchy
Dialogue: 0,0:58:03.66,0:58:08.80,Chinese,,0,0,0,,但是在层次结构的较低部分存储的成本
Dialogue: 0,0:58:10.94,0:58:14.92,English,,0,0,0,,Okay so this this works all because of an idea called caching
Dialogue: 0,0:58:10.94,0:58:14.92,Chinese,,0,0,0,,好的，所以这一切都有效，因为一个叫做缓存的想法
Dialogue: 0,0:58:16.92,0:58:23.28,English,,0,0,0,,So a cache and compete to took to a computer scientist is a
Dialogue: 0,0:58:16.92,0:58:23.28,Chinese,,0,0,0,,所以缓存和竞争对计算机科学家是一个
Dialogue: 0,0:58:23.70,0:58:32.00,English,,0,0,0,,It's a smaller faster storage device that acts as a staging area for the data and a larger slower device
Dialogue: 0,0:58:23.70,0:58:32.00,Chinese,,0,0,0,,它是一个更小的更快的存储设备，充当数据的暂存区域和更慢的设备
Dialogue: 0,0:58:32.04,0:58:38.00,English,,0,0,0,,So just like like here you can think of your main memory is a cache for data
Dialogue: 0,0:58:32.04,0:58:38.00,Chinese,,0,0,0,,所以就像在这里一样，你可以想到你的主内存是数据缓存
Dialogue: 0,0:58:38.00,0:58:41.58,English,,0,0,0,,That's stored on disk right you read memory from disk and then you store it in main memory
Dialogue: 0,0:58:38.00,0:58:41.58,Chinese,,0,0,0,,这是存储在磁盘上的，你从磁盘读取内存然后将其存储在主内存中
Dialogue: 0,0:58:42.38,0:58:44.84,English,,0,0,0,,Okay you can think of the main memory as a staging area
Dialogue: 0,0:58:42.38,0:58:44.84,Chinese,,0,0,0,,好吧，你可以把主存储器想象成一个临时区域
Dialogue: 0,0:58:46.50,0:58:52.20,English,,0,0,0,,So once you get the data from the disk you don't access it again on the disk you access it in memory which is much faster
Dialogue: 0,0:58:46.50,0:58:52.20,Chinese,,0,0,0,,因此，一旦从磁盘获取数据，就不会再在磁盘上访问它，而是在内存中访问它，速度要快得多
Dialogue: 0,0:58:52.68,0:58:55.42,English,,0,0,0,,Ok so this idea propagates all the way up the hierarchy
Dialogue: 0,0:58:52.68,0:58:55.42,Chinese,,0,0,0,,好的，这个想法一直在层次结构中传播
Dialogue: 0,0:58:59.32,0:59:02.62,English,,0,0,0,,Okay so we you can think of a cache on
Dialogue: 0,0:58:59.32,0:59:02.62,Chinese,,0,0,0,,好的，我们你可以想到一个缓存
Dialogue: 0,0:59:03.92,0:59:11.28,English,,0,0,0,,One way to think of a cache is imagine your backpack when you're getting ready to come to school in the morning
Dialogue: 0,0:59:03.92,0:59:11.28,Chinese,,0,0,0,,考虑缓存的一种方法是想象你的背包，当你准备早上来学校
Dialogue: 0,0:59:11.94,0:59:15.02,English,,0,0,0,,So you're in your apartment which is kind of far away from school
Dialogue: 0,0:59:11.94,0:59:15.02,Chinese,,0,0,0,,所以你在你的公寓里有点远离学校
Dialogue: 0,0:59:16.40,0:59:20.24,English,,0,0,0,,So before you come into school you take items from from your house
Dialogue: 0,0:59:16.40,0:59:20.24,Chinese,,0,0,0,,所以在你上学之前，你要从你的房子里拿走物品
Dialogue: 0,0:59:20.72,0:59:23.02,English,,0,0,0,,And you put them in your backpack right
Dialogue: 0,0:59:20.72,0:59:23.02,Chinese,,0,0,0,,你把它们放在你的背包里吧
Dialogue: 0,0:59:24.08,0:59:28.92,English,,0,0,0,,Then you come to school if you need those items you get there in your backpack
Dialogue: 0,0:59:24.08,0:59:28.92,Chinese,,0,0,0,,如果你需要那些放在背包里的东西，你就来学校
Dialogue: 0,0:59:29.56,0:59:30.92,English,,0,0,0,,You know if you didn't do that
Dialogue: 0,0:59:29.56,0:59:30.92,Chinese,,0,0,0,,你知道，如果你不这样做
Dialogue: 0,0:59:31.20,0:59:35.88,English,,0,0,0,,Every time you needed something you'd have to walk back home and get it  and then walk back to school
Dialogue: 0,0:59:31.20,0:59:35.88,Chinese,,0,0,0,,每次你需要的东西，你必须走回家并获得它，然后走回学校
Dialogue: 0,0:59:36.44,0:59:41.24,English,,0,0,0,,All right so it's so the idea of caching is very you know it's a very familiar kind of simple notion
Dialogue: 0,0:59:36.44,0:59:41.24,Chinese,,0,0,0,,好吧所以这就是缓存的想法，你知道它是一种非常熟悉的简单概念
Dialogue: 0,0:59:41.58,0:59:47.28,English,,0,0,0,,But it turns out to be quite powerful and it shows up in all parts of computer systems
Dialogue: 0,0:59:41.58,0:59:47.28,Chinese,,0,0,0,,但事实证明它非常强大，并且它出现在计算机系统的所有部分中
Dialogue: 0,0:59:50.56,0:59:54.44,English,,0,0,0,,Okay so so what we say is that for each level k in the hierarchy
Dialogue: 0,0:59:50.56,0:59:54.44,Chinese,,0,0,0,,好的，我们所说的是对于层次结构中的每个级别k
Dialogue: 0,0:59:55.08,0:59:58.94,English,,0,0,0,,The the faster smaller device at level k serves as a cache
Dialogue: 0,0:59:55.08,0:59:58.94,Chinese,,0,0,0,,级别k中较小的较小设备用作缓存
Dialogue: 0,0:59:59.50,1:00:02.67,English,,0,0,0,,For the larger slower device at level k+1
Dialogue: 0,0:59:59.50,1:00:02.67,Chinese,,0,0,0,,对于k + 1级较大的较慢设备
Dialogue: 0,1:00:03.26,1:00:07.46,English,,0,0,0,,And remember our our levels go from so l0 is the highest
Dialogue: 0,1:00:03.26,1:00:07.46,Chinese,,0,0,0,,并且记住我们的水平从那以后l0是最高的
Dialogue: 0,1:00:07.46,1:00:10.60,English,,0,0,0,,So this the smallest lowest level is actually the highest
Dialogue: 0,1:00:07.46,1:00:10.60,Chinese,,0,0,0,,所以这个最小的最低级别实际上是最高的
Dialogue: 0,1:00:11.56,1:00:15.36,English,,0,0,0,,The further step in the cat in the hierarchy and as we increase the levels
Dialogue: 0,1:00:11.56,1:00:15.36,Chinese,,0,0,0,,层次结构中cat的进一步步骤以及我们提高级别的步骤
Dialogue: 0,1:00:15.84,1:00:17.60,English,,0,0,0,,We're going down the hierarchy
Dialogue: 0,1:00:15.84,1:00:17.60,Chinese,,0,0,0,,我们正在走下层次结构
Dialogue: 0,1:00:20.44,1:00:25.22,English,,0,0,0,,Now why do they work so this is this is a really fundamental idea
Dialogue: 0,1:00:20.44,1:00:25.22,Chinese,,0,0,0,,现在他们为什么这么做，所以这是一个非常基本的想法
Dialogue: 0,1:00:25.88,1:00:27.42,English,,0,0,0,,They work because of locality
Dialogue: 0,1:00:25.88,1:00:27.42,Chinese,,0,0,0,,他们因地方而工作
Dialogue: 0,1:00:28.84,1:00:34.72,English,,0,0,0,,So because of locality programs tend to access data that's stored at level k
Dialogue: 0,1:00:28.84,1:00:34.72,Chinese,,0,0,0,,因此，由于地点性，程序倾向于访问存储在级别k的数据
Dialogue: 0,1:00:36.28,1:00:39.32,English,,0,0,0,,More often than they access data at level k+1 o
Dialogue: 0,1:00:36.28,1:00:39.32,Chinese,,0,0,0,,通常比访问k + 1 o级的数据更常见
Dialogue: 0,1:00:41.06,1:00:43.86,English,,0,0,0,,Okay so if we access an item at level +1
Dialogue: 0,1:00:41.06,1:00:43.86,Chinese,,0,0,0,,好的，如果我们访问级别为+1的项目
Dialogue: 0,1:00:44.82,1:00:50.35,English,,0,0,0,,We can move it up to level k chances are because of locality we're going to access it again
Dialogue: 0,1:00:44.82,1:00:50.35,Chinese,,0,0,0,,我们可以将它提升到k级机会，因为我们将再次访问它
Dialogue: 0,1:00:51.26,1:01:01.30,English,,0,0,0,,Okay so now we're accessing the data at level k multiple times at the rate at the speed of love
Dialogue: 0,1:00:51.26,1:01:01.30,Chinese,,0,0,0,,好的，现在我们以爱的速度多次访问k级数据
Dialogue: 0,1:01:01.44,1:01:03.74,English,,0,0,0,,Okay not at the speed of level k plus one okay so that's
Dialogue: 0,1:01:01.44,1:01:03.74,Chinese,,0,0,0,,好吧，不是以k级加一个好的速度，所以那就是
Dialogue: 0,1:01:04.60,1:01:08.48,English,,0,0,0,,That's the fun the fundal fundamental idea
Dialogue: 0,1:01:04.60,1:01:08.48,Chinese,,0,0,0,,这是基金基本理念的乐趣
Dialogue: 0,1:01:08.60,1:01:12.46,English,,0,0,0,,And because we're not accessing data at level +1 as often
Dialogue: 0,1:01:08.60,1:01:12.46,Chinese,,0,0,0,,而且因为我们不经常访问+1级数据
Dialogue: 0,1:01:12.76,1:01:18.14,English,,0,0,0,,We can afford to use slower storage devices which are cheaper
Dialogue: 0,1:01:12.76,1:01:18.14,Chinese,,0,0,0,,我们可以负担得起使用更便宜的速度较慢的存储设备
Dialogue: 0,1:01:20.80,1:01:24.22,English,,0,0,0,,In this and thus we can make them bigger and cheaper per gig
Dialogue: 0,1:01:20.80,1:01:24.22,Chinese,,0,0,0,,在这方面，因此我们可以使它们更大，更便宜
Dialogue: 0,1:01:26.30,1:01:29.98,English,,0,0,0,,So what this does is the hierarchy creates a a large pool of storage
Dialogue: 0,1:01:26.30,1:01:29.98,Chinese,,0,0,0,,这样做的是层次结构创建了一个大型存储池
Dialogue: 0,1:01:30.06,1:01:33.06,English,,0,0,0,,That's roughly about the size of the lowest level
Dialogue: 0,1:01:30.06,1:01:33.06,Chinese,,0,0,0,,这大致是最低级别的大小
Dialogue: 0,1:01:34.42,1:01:37.10,English,,0,0,0,,That can be accessed at the speed at the highest level
Dialogue: 0,1:01:34.42,1:01:37.10,Chinese,,0,0,0,,可以以最高级别的速度访问
Dialogue: 0,1:01:41.88,1:01:45.60,English,,0,0,0,,All right let's let's look at how caching works in a general way
Dialogue: 0,1:01:41.88,1:01:45.60,Chinese,,0,0,0,,好吧让我们来看看缓存如何以一般方式工作
Dialogue: 0,1:01:46.34,1:01:51.20,English,,0,0,0,,And then we'll see on thursday how these hardware cache memories work
Dialogue: 0,1:01:46.34,1:01:51.20,Chinese,,0,0,0,,然后我们将在星期四看到这些硬件缓存如何工作
Dialogue: 0,1:01:51.56,1:01:57.80,English,,0,0,0,,Okay but like I said caching is a very general idea that can be applied at all levels in the hierarchy
Dialogue: 0,1:01:51.56,1:01:57.80,Chinese,,0,0,0,,好吧，但就像我说的，缓存是一个非常通用的想法，可以应用于层次结构中的所有级别
Dialogue: 0,1:01:59.04,1:02:05.68,English,,0,0,0,,So here we have a cache - so the in all kinds of most caches there's some kind of transfer unit
Dialogue: 0,1:01:59.04,1:02:05.68,Chinese,,0,0,0,,所以这里我们有一个缓存 - 所以在各种大多数缓存中都有某种传输单元
Dialogue: 0,1:02:06.86,1:02:08.72,English,,0,0,0,,To go from one level to the next
Dialogue: 0,1:02:06.86,1:02:08.72,Chinese,,0,0,0,,从一个级别到下一个级别
Dialogue: 0,1:02:08.72,1:02:13.94,English,,0,0,0,,So here we have at this at this upper level
Dialogue: 0,1:02:08.72,1:02:13.94,Chinese,,0,0,0,,所以我们在这个上层有这个
Dialogue: 0,1:02:14.76,1:02:18.86,English,,0,0,0,,We have a what we'll call the cache that can hold four blocks
Dialogue: 0,1:02:14.76,1:02:18.86,Chinese,,0,0,0,,我们有一个我们称之为可以容纳四个块的缓存
Dialogue: 0,1:02:19.56,1:02:23.76,English,,0,0,0,,So our our memory and then at the lower level we have memory
Dialogue: 0,1:02:19.56,1:02:23.76,Chinese,,0,0,0,,所以我们的记忆然后在较低的水平我们有记忆
Dialogue: 0,1:02:24.76,1:02:28.90,English,,0,0,0,,And this memory is partitioned into blocks of some fixed size that's this
Dialogue: 0,1:02:24.76,1:02:28.90,Chinese,,0,0,0,,并且这个内存被划分为一些固定大小的块
Dialogue: 0,1:02:29.84,1:02:36.36,English,,0,0,0,,That's the way cache is at nearly near the upper part of the hierarchy work
Dialogue: 0,1:02:29.84,1:02:36.36,Chinese,,0,0,0,,这就是缓存几乎接近层次结构工作上半部分的方式
Dialogue: 0,1:02:37.02,1:02:43.58,English,,0,0,0,,Now at the lower levels like if you're accessing data say from a web server
Dialogue: 0,1:02:37.02,1:02:43.58,Chinese,,0,0,0,,现在处于较低级别，就像你从Web服务器访问数据一样
Dialogue: 0,1:02:43.92,1:02:47.40,English,,0,0,0,,Then the the data is partitioned into files typically
Dialogue: 0,1:02:43.92,1:02:47.40,Chinese,,0,0,0,,然后通常将数据分区为文件
Dialogue: 0,1:02:47.40,1:02:53.14,English,,0,0,0,,Okay but it upper levels the data is partitioned into blocks so just suppose this is main memory
Dialogue: 0,1:02:47.40,1:02:53.14,Chinese,,0,0,0,,好吧，但它的上层数据被分区为块，所以假设这是主内存
Dialogue: 0,1:02:54.08,1:02:58.68,English,,0,0,0,,And then above that we have a that consists of a bunch of these blocks
Dialogue: 0,1:02:54.08,1:02:58.68,Chinese,,0,0,0,,然后，我们有一个由一堆这些块组成的
Dialogue: 0,1:02:58.68,1:03:05.84,English,,0,0,0,,So we just take the memory and partition into blocks where each block is the same number of bytes
Dialogue: 0,1:02:58.68,1:03:05.84,Chinese,,0,0,0,,所以我们只需将内存和分区放入块中，每个块的字节数相同
Dialogue: 0,1:03:07.84,1:03:12.74,English,,0,0,0,,And then data will be transferred between memory and the cache in block size transfer units
Dialogue: 0,1:03:07.84,1:03:12.74,Chinese,,0,0,0,,然后，数据将以块大小传输单位在内存和高速缓存之间传输
Dialogue: 0,1:03:13.34,1:03:18.68,English,,0,0,0,,Okay so if you need data from the memory if the cache needs data from the memory it'll grab a whole block
Dialogue: 0,1:03:13.34,1:03:18.68,Chinese,,0,0,0,,好的，如果你需要来自内存的数据，如果缓存需要来自内存的数据，那么它将占用整个块
Dialogue: 0,1:03:19.96,1:03:26.12,English,,0,0,0,,And then at any point in time the cache holds a subset of the the blocks in main memory
Dialogue: 0,1:03:19.96,1:03:26.12,Chinese,,0,0,0,,然后在任何时间点，高速缓存都保存主存储器中块的子集
Dialogue: 0,1:03:27.56,1:03:33.16,English,,0,0,0,,Okay so this this cache is much faster but it's also much slower
Dialogue: 0,1:03:27.56,1:03:33.16,Chinese,,0,0,0,,好的，所以这个缓存要快得多，但速度也慢得多
Dialogue: 0,1:03:35.78,1:03:38.58,English,,0,0,0,,And because of that and it's much smaller
Dialogue: 0,1:03:35.78,1:03:38.58,Chinese,,0,0,0,,因此，它要小得多
Dialogue: 0,1:03:39.50,1:03:44.78,English,,0,0,0,,I'm sorry it's much faster but it's it's much more expensive because it's faster it's more expensive
Dialogue: 0,1:03:39.50,1:03:44.78,Chinese,,0,0,0,,我很抱歉它的速度要快得多，但它的价格却要贵得多，因为它的价格会更快，而且更贵
Dialogue: 0,1:03:45.20,1:03:47.32,English,,0,0,0,,And because it's more expensive it's smaller
Dialogue: 0,1:03:45.20,1:03:47.32,Chinese,,0,0,0,,而且因为它更贵，所以它更小
Dialogue: 0,1:03:51.98,1:04:01.30,English,,0,0,0,,Now suppose the cash once de-reference say that the CPU asks for data that's contained in block four
Dialogue: 0,1:03:51.98,1:04:01.30,Chinese,,0,0,0,,现在假设一旦取消引用现金，说CPU要求第4块中包含的数据
Dialogue: 0,1:04:04.80,1:04:08.90,English,,0,0,0,,So it looks it looks to see if the data is in the cache it's not
Dialogue: 0,1:04:04.80,1:04:08.90,Chinese,,0,0,0,,因此看起来它看起来是否在数据库中是否存在数据
Dialogue: 0,1:04:08.90,1:04:12.06,English,,0,0,0,,So the cache asks the memory to give it block four
Dialogue: 0,1:04:08.90,1:04:12.06,Chinese,,0,0,0,,所以缓存要求内存给它块四
Dialogue: 0,1:04:13.20,1:04:17.16,English,,0,0,0,,So that block is copied from memory into the cache
Dialogue: 0,1:04:13.20,1:04:17.16,Chinese,,0,0,0,,这样块就会从内存复制到缓存中
Dialogue: 0,1:04:17.80,1:04:22.58,English,,0,0,0,,Overwriting the one of the existing in this case block eight it will overwrite blockade
Dialogue: 0,1:04:17.80,1:04:22.58,Chinese,,0,0,0,,覆盖其中一个现有的块8，它将覆盖封锁
Dialogue: 0,1:04:22.58,1:04:26.36,English,,0,0,0,,So now now block four is is in our cache
Dialogue: 0,1:04:22.58,1:04:26.36,Chinese,,0,0,0,,所以现在现在块四是在我们的缓存中
Dialogue: 0,1:04:28.56,1:04:35.36,English,,0,0,0,,Now suppose now now suppose the CPU s for a some data that's in block ten
Dialogue: 0,1:04:28.56,1:04:35.36,Chinese,,0,0,0,,现在假设现在假设CPU为第10块中的一些数据
Dialogue: 0,1:04:35.94,1:04:39.90,English,,0,0,0,,That gets copied up and and we overwrite that that block
Dialogue: 0,1:04:35.94,1:04:39.90,Chinese,,0,0,0,,这会被复制，我们会覆盖那个块
Dialogue: 0,1:04:41.00,1:04:46.70,English,,0,0,0,,Now the whole idea of storing it in the cache is that we're hoping that the seek the program that's executing on the CPU
Dialogue: 0,1:04:41.00,1:04:46.70,Chinese,,0,0,0,,现在将它存储在缓存中的整个想法是我们希望寻找在CPU上执行的程序
Dialogue: 0,1:04:47.14,1:04:49.80,English,,0,0,0,,Will reuse one of those blocks we just spent all the time
Dialogue: 0,1:04:47.14,1:04:49.80,Chinese,,0,0,0,,将重用我们刚刚花费的其中一个块
Dialogue: 0,1:04:50.26,1:04:55.78,English,,0,0,0,,We went to all this trouble to copy it from memory to to this cache  and we know that's slow
Dialogue: 0,1:04:50.26,1:04:55.78,Chinese,,0,0,0,,我们把所有这些麻烦从内存复制到这个缓存，我们知道这很慢
Dialogue: 0,1:04:58.38,1:05:06.78,English,,0,0,0,,So now suppose that the CPU needs some data in block  b in this case fourteen
Dialogue: 0,1:04:58.38,1:05:06.78,Chinese,,0,0,0,,所以现在假设CPU在块b中需要一些数据，在这种情况下是十四
Dialogue: 0,1:05:08.92,1:05:16.60,English,,0,0,0,,Okay so it needs it needs a we're a memory word that's stored that was originally stored in memory it in block fourteen
Dialogue: 0,1:05:08.92,1:05:16.60,Chinese,,0,0,0,,好吧所以它需要它需要一个我们存储的存储器字，它最初存储在存储器中它在块14中
Dialogue: 0,1:05:18.38,1:05:23.44,English,,0,0,0,,Well now this cache can just return that's what we call a hit right so the
Dialogue: 0,1:05:18.38,1:05:23.44,Chinese,,0,0,0,,那么现在这个缓存可以返回那个我们称之为右击的东西
Dialogue: 0,1:05:23.56,1:05:28.04,English,,0,0,0,,Block that we access is in the cache so that's good hits are good
Dialogue: 0,1:05:23.56,1:05:28.04,Chinese,,0,0,0,,我们访问的块位于缓存中，因此良好的命中率很高
Dialogue: 0,1:05:28.50,1:05:33.08,English,,0,0,0,,Because now we can return that block directly to CPU
Dialogue: 0,1:05:28.50,1:05:33.08,Chinese,,0,0,0,,因为现在我们可以将该块直接返回给CPU
Dialogue: 0,1:05:33.76,1:05:39.92,English,,0,0,0,,And this this memory is much faster than if we had to go all the way to main memory to the DRAM
Dialogue: 0,1:05:33.76,1:05:39.92,Chinese,,0,0,0,,而且这个内存比我们必须一直到DRAM的主存储器要快得多
Dialogue: 0,1:05:40.16,1:05:43.16,English,,0,0,0,,Okay so the SRAM much faster than the DRAM
Dialogue: 0,1:05:40.16,1:05:43.16,Chinese,,0,0,0,,好的，所以SRAM比DRAM快得多
Dialogue: 0,1:05:43.74,1:05:47.90,English,,0,0,0,,So the CPU gets that block fourteen much faster than it would have
Dialogue: 0,1:05:43.74,1:05:47.90,Chinese,,0,0,0,,所以CPU比那个块快了十四倍
Dialogue: 0,1:05:48.26,1:05:49.86,English,,0,0,0,,If it had just gone all the way to memory
Dialogue: 0,1:05:48.26,1:05:49.86,Chinese,,0,0,0,,如果它刚刚一直走向记忆
Dialogue: 0,1:05:51.56,1:05:56.58,English,,0,0,0,,Okay the sort of other the the opposite of a hit is a miss
Dialogue: 0,1:05:51.56,1:05:56.58,Chinese,,0,0,0,,好吧，与命中相反的其他类型是一个错过
Dialogue: 0,1:05:57.84,1:06:00.40,English,,0,0,0,,So suppose the CPU s for block twelve
Dialogue: 0,1:05:57.84,1:06:00.40,Chinese,,0,0,0,,假设CPU为12块
Dialogue: 0,1:06:01.62,1:06:04.32,English,,0,0,0,,The cache looks for that block can't find it
Dialogue: 0,1:06:01.62,1:06:04.32,Chinese,,0,0,0,,缓存查找该块无法找到它
Dialogue: 0,1:06:04.98,1:06:10.84,English,,0,0,0,,That's a miss so the the cash has to ask that the main memory the DRAM for block 12
Dialogue: 0,1:06:04.98,1:06:10.84,Chinese,,0,0,0,,这是一个小姐所以现金必须要求主要内存为块12的DRAM
Dialogue: 0,1:06:11.52,1:06:14.56,English,,0,0,0,,Where it gets copied into the cache and then it can return that
Dialogue: 0,1:06:11.52,1:06:14.56,Chinese,,0,0,0,,它被复制到缓存中然后它可以返回它
Dialogue: 0,1:06:16.58,1:06:22.56,English,,0,0,0,,So that takes longer right so the CPU has to wait for that block to be ex to be fetched from memory
Dialogue: 0,1:06:16.58,1:06:22.56,Chinese,,0,0,0,,所以这需要更长的时间，因此CPU必须等待从内存中取出该块
Dialogue: 0,1:06:23.08,1:06:26.18,English,,0,0,0,,And so misses are slow so hits are good because they're fast
Dialogue: 0,1:06:23.08,1:06:26.18,Chinese,,0,0,0,,所以失误很慢所以命中很好，因为它们很快
Dialogue: 0,1:06:26.84,1:06:28.90,English,,0,0,0,,Misses are bad because they're they're slow
Dialogue: 0,1:06:26.84,1:06:28.90,Chinese,,0,0,0,,错过很糟糕，因为他们很慢
Dialogue: 0,1:06:31.44,1:06:36.40,English,,0,0,0,,Now we typically distinguish between several different kinds of caches
Dialogue: 0,1:06:31.44,1:06:36.40,Chinese,,0,0,0,,现在我们通常区分几种不同的缓存
Dialogue: 0,1:06:37.32,1:06:40.94,English,,0,0,0,,So the first kind of miss is a cold miss or a compulsory miss
Dialogue: 0,1:06:37.32,1:06:40.94,Chinese,,0,0,0,,因此，第一种错过是冷漠或强制错过
Dialogue: 0,1:06:41.78,1:06:44.76,English,,0,0,0,,Which is caused because there's just nothing in the cache
Dialogue: 0,1:06:41.78,1:06:44.76,Chinese,,0,0,0,,这是因为缓存中没有任何内容
Dialogue: 0,1:06:44.98,1:06:48.48,English,,0,0,0,,Initially caches they're empty they have no blocks and as we fetch
Dialogue: 0,1:06:44.98,1:06:48.48,Chinese,,0,0,0,,最初缓存它们是空的，它们没有块，因为我们取了它们
Dialogue: 0,1:06:49.44,1:06:53.84,English,,0,0,0,,As we fetch blocks from the lower level from the next the next level and put them in the cache
Dialogue: 0,1:06:49.44,1:06:53.84,Chinese,,0,0,0,,当我们从下一级别的下一级别获取块并将它们放入缓存中
Dialogue: 0,1:06:54.68,1:06:57.00,English,,0,0,0,,The cache will slowly fill up with blocks
Dialogue: 0,1:06:54.68,1:06:57.00,Chinese,,0,0,0,,缓存将慢慢填满块
Dialogue: 0,1:06:57.64,1:07:00.06,English,,0,0,0,,And we'll get and that will increase the likelihood of hits
Dialogue: 0,1:06:57.64,1:07:00.06,Chinese,,0,0,0,,而且我们会得到，这会增加点击的可能性
Dialogue: 0,1:07:00.62,1:07:03.58,English,,0,0,0,,But when the cache is empty we're going to miss every time right
Dialogue: 0,1:07:00.62,1:07:03.58,Chinese,,0,0,0,,但是当缓存为空时，我们每次都会错过
Dialogue: 0,1:07:03.58,1:07:07.04,English,,0,0,0,,So there's just no way to avoid cold misses right you got
Dialogue: 0,1:07:03.58,1:07:07.04,Chinese,,0,0,0,,所以没有办法避免你得到的冷缺失
Dialogue: 0,1:07:07.46,1:07:11.28,English,,0,0,0,,Oh so this is called warming up your cache so as you load data items into the cache
Dialogue: 0,1:07:07.46,1:07:11.28,Chinese,,0,0,0,,哦，所以这称为预热缓存，以便将数据项加载到缓存中
Dialogue: 0,1:07:11.88,1:07:17.66,English,,0,0,0,,Initially it's cold and as you add more items you're warming it up meaning that you're increasing the likelihood of a hit
Dialogue: 0,1:07:11.88,1:07:17.66,Chinese,,0,0,0,,最初它很冷，当你添加更多物品时，你正在升温它意味着你增加了击中的可能性
Dialogue: 0,1:07:19.18,1:07:29.56,English,,0,0,0,,Now there's a there's another sort of symmetric kind of miss which is called a capacity miss
Dialogue: 0,1:07:19.18,1:07:29.56,Chinese,,0,0,0,,现在还有另一种对称的错过，称为容量未命中
Dialogue: 0,1:07:30.22,1:07:35.48,English,,0,0,0,,And these misses are due to the fact that the cache is just a certain size right you just can't
Dialogue: 0,1:07:30.22,1:07:35.48,Chinese,,0,0,0,,而这些失误是由于缓存只是一个特定的大小，你不能
Dialogue: 0,1:07:35.96,1:07:38.28,English,,0,0,0,,In the example we looked at we only had four blocks
Dialogue: 0,1:07:35.96,1:07:38.28,Chinese,,0,0,0,,在我们看到的例子中，我们只有四个块
Dialogue: 0,1:07:39.96,1:07:48.04,English,,0,0,0,,So if we're if we're trying if our if our if our temporal locality involves eight blocks
Dialogue: 0,1:07:39.96,1:07:48.04,Chinese,,0,0,0,,因此，如果我们正在尝试，如果你的时间位置涉及八个块，那么你是否正在尝试
Dialogue: 0,1:07:48.94,1:07:54.10,English,,0,0,0,,You know say if the loop that we're accessing is  is accessing elements in array
Dialogue: 0,1:07:48.94,1:07:54.10,Chinese,,0,0,0,,你知道我们正在访问的循环是否正在访问数组中的元素
Dialogue: 0,1:07:55.42,1:08:00.96,English,,0,0,0,,That that consists of eight blocks there's just not enough room to store eight blocks and that four block cache
Dialogue: 0,1:07:55.42,1:08:00.96,Chinese,,0,0,0,,那个由8个块组成的空间不足以存储8个块和4个块缓存
Dialogue: 0,1:08:01.44,1:08:07.52,English,,0,0,0,,So we're going to get misses right we would need a bigger cache to be able to satisfy and store those eight blocks
Dialogue: 0,1:08:01.44,1:08:07.52,Chinese,,0,0,0,,因此，我们将会遇到错误，我们需要更大的缓存才能满足并存储这8个块
Dialogue: 0,1:08:08.02,1:08:13.40,English,,0,0,0,,And if we had a big enough cache then we get good hit rate right if we could store all the blocks
Dialogue: 0,1:08:08.02,1:08:13.40,Chinese,,0,0,0,,如果我们有足够大的缓存，那么如果我们可以存储所有块，我们就会获得良好的命中率
Dialogue: 0,1:08:14.42,1:08:23.02,English,,0,0,0,,In our cache then we then then the cache could take advantage of the spatial and temporal locality within that program
Dialogue: 0,1:08:14.42,1:08:23.02,Chinese,,0,0,0,,然后我们在缓存中然后缓存可以利用该程序中的空间和时间局部性
Dialogue: 0,1:08:24.00,1:08:28.96,English,,0,0,0,,So in general what we call this set of blocks at any point in time when a program is running
Dialogue: 0,1:08:24.00,1:08:28.96,Chinese,,0,0,0,,所以一般来说，在程序运行的任何时候我们称之为这组块
Dialogue: 0,1:08:29.50,1:08:34.73,English,,0,0,0,,We call the set of blocks that are sort of being accessed over and over again the working set
Dialogue: 0,1:08:29.50,1:08:34.73,Chinese,,0,0,0,,我们调用一组块，这些块一次又一次地被访问工作集
Dialogue: 0,1:08:35.48,1:08:42.14,English,,0,0,0,,And so your working set and the working set will change you know as you go from loop to loop  from function to function
Dialogue: 0,1:08:35.48,1:08:42.14,Chinese,,0,0,0,,因此，当你从一个循环到另一个循环从一个函数到另一个函数时，你的工作集和工作集将会改变
Dialogue: 0,1:08:42.74,1:08:45.41,English,,0,0,0,,But at a point in time in your program when
Dialogue: 0,1:08:42.74,1:08:45.41,Chinese,,0,0,0,,但是在你的计划中的某个时间点
Dialogue: 0,1:08:46.28,1:08:51.30,English,,0,0,0,,It you have this idea of a working set which is sort of the blocks that you need to have stored in your cache
Dialogue: 0,1:08:46.28,1:08:51.30,Chinese,,0,0,0,,你有一个工作集的想法，它是你需要存储在缓存中的块
Dialogue: 0,1:08:54.00,1:08:59.28,English,,0,0,0,,Ok and well so when you're working set size exceeds your cache size then you get capacity misses
Dialogue: 0,1:08:54.00,1:08:59.28,Chinese,,0,0,0,,好的，所以当你的工作集大小超过你的缓存大小时，你就会遇到容量错过
Dialogue: 0,1:09:00.36,1:09:04.12,English,,0,0,0,,There's this other kind of weird miss called the conflict miss
Dialogue: 0,1:09:00.36,1:09:04.12,Chinese,,0,0,0,,这是另一种奇怪的错过，称为冲突未命中
Dialogue: 0,1:09:04.88,1:09:08.24,English,,0,0,0,,Which has to do with the way that caches are often implemented
Dialogue: 0,1:09:04.88,1:09:08.24,Chinese,,0,0,0,,这与经常实施缓存的方式有关
Dialogue: 0,1:09:09.52,1:09:15.88,English,,0,0,0,,So the idea is that most caches especially hardware caches because they're they have to be simple
Dialogue: 0,1:09:09.52,1:09:15.88,Chinese,,0,0,0,,所以这个想法是大多数缓存特别是硬件缓存，因为它们必须简单
Dialogue: 0,1:09:17.42,1:09:23.50,English,,0,0,0,,They have they limit where a block can be placed to some
Dialogue: 0,1:09:17.42,1:09:23.50,Chinese,,0,0,0,,他们限制了可以放置一些块的位置
Dialogue: 0,1:09:24.26,1:09:27.22,English,,0,0,0,,Small set of positions in the cache
Dialogue: 0,1:09:24.26,1:09:27.22,Chinese,,0,0,0,,缓存中的一小组位置
Dialogue: 0,1:09:28.50,1:09:32.04,English,,0,0,0,,So like one of the the simplest models is to just take
Dialogue: 0,1:09:28.50,1:09:32.04,Chinese,,0,0,0,,因此，像最简单的模型之一就是采取
Dialogue: 0,1:09:33.00,1:09:39.94,English,,0,0,0,,Block I can only be placed in block I mod the cache size
Dialogue: 0,1:09:33.00,1:09:39.94,Chinese,,0,0,0,,块I只能放在块I中修改缓存大小
Dialogue: 0,1:09:40.12,1:09:43.75,English,,0,0,0,,So in our that that little cache we saw that had four blocks
Dialogue: 0,1:09:40.12,1:09:43.75,Chinese,,0,0,0,,所以我们看到那个小缓存有四个块
Dialogue: 0,1:09:44.56,1:09:50.26,English,,0,0,0,,We would take we would take block I from memory and we would stick it at block I mod 4
Dialogue: 0,1:09:44.56,1:09:50.26,Chinese,,0,0,0,,我们会采取从记忆中获取块I的方法，我们会将其粘贴在块I mod 4上
Dialogue: 0,1:09:50.26,1:09:54.02,English,,0,0,0,,So block 0 would go at block 0 in our cache
Dialogue: 0,1:09:50.26,1:09:54.02,Chinese,,0,0,0,,所以块0将在我们的缓存中的块0处
Dialogue: 0,1:09:55.00,1:10:03.42,English,,0,0,0,,As would block 4 and as would block 8 block 9 would go into block 1 in the cache
Dialogue: 0,1:09:55.00,1:10:03.42,Chinese,,0,0,0,,如块4和块8一样，块9将进入高速缓存中的块1
Dialogue: 0,1:10:03.92,1:10:13.84,English,,0,0,0,,And that's when that happens suppose suppose we use that model so we're going to take
Dialogue: 0,1:10:03.92,1:10:13.84,Chinese,,0,0,0,,当发生这种情况时，假设我们使用该模型，那么我们就会采取这种模式
Dialogue: 0,1:10:14.82,1:10:18.50,English,,0,0,0,,Block I and we're going to put it we can only place it in the cache
Dialogue: 0,1:10:14.82,1:10:18.50,Chinese,,0,0,0,,阻止我，我们将把它放在我们只能将它放在缓存中
Dialogue: 0,1:10:19.28,1:10:21.60,English,,0,0,0,,At block I mod 4
Dialogue: 0,1:10:19.28,1:10:21.60,Chinese,,0,0,0,,在块I mod 4
Dialogue: 0,1:10:22.94,1:10:30.40,English,,0,0,0,,Now suppose our suppose our reference pattern involves from memory block zero block four and block eight
Dialogue: 0,1:10:22.94,1:10:30.40,Chinese,,0,0,0,,现在假设我们假设我们的参考模式涉及内存块零块四和块八
Dialogue: 0,1:10:31.68,1:10:36.22,English,,0,0,0,,It's only three blocks so we have we have enough room in the cache to store
Dialogue: 0,1:10:31.68,1:10:36.22,Chinese,,0,0,0,,它只有三个块，所以我们在缓存中有足够的空间来存储
Dialogue: 0,1:10:37.32,1:10:43.46,English,,0,0,0,,Those three blocks but because of the way we've decided to place blocks each block will be will evict
Dialogue: 0,1:10:37.32,1:10:43.46,Chinese,,0,0,0,,这三个区块，但由于我们决定每个区块放置区块的方式将被逐出
Dialogue: 0,1:10:44.36,1:10:48.82,English,,0,0,0,,When we access block four it'll go into block zero in the cache
Dialogue: 0,1:10:44.36,1:10:48.82,Chinese,,0,0,0,,当我们访问块4时，它将进入缓存中的块0
Dialogue: 0,1:10:50.16,1:10:52.16,English,,0,0,0,,When we access blocked four in the cache
Dialogue: 0,1:10:50.16,1:10:52.16,Chinese,,0,0,0,,当我们在缓存中访问被阻止的四个时
Dialogue: 0,1:10:52.84,1:10:56.92,English,,0,0,0,,It'll overwrite that block and it'll go into block zero in the cache
Dialogue: 0,1:10:52.84,1:10:56.92,Chinese,,0,0,0,,它会覆盖该块，它将进入缓存中的块0
Dialogue: 0,1:10:57.42,1:11:04.08,English,,0,0,0,,And so because of this it's really the access pattern conspiring with the  algorithm
Dialogue: 0,1:10:57.42,1:11:04.08,Chinese,,0,0,0,,因此，正是这种访问模式与算法密切相关
Dialogue: 0,1:11:04.08,1:11:05.58,English,,0,0,0,,That we're using for placing blocks
Dialogue: 0,1:11:04.08,1:11:05.58,Chinese,,0,0,0,,我们用于放置块
Dialogue: 0,1:11:06.92,1:11:09.42,English,,0,0,0,,Okay so because of this we have plenty of room in the cache
Dialogue: 0,1:11:06.92,1:11:09.42,Chinese,,0,0,0,,好的，因此我们在缓存中有足够的空间
Dialogue: 0,1:11:09.86,1:11:15.74,English,,0,0,0,,But because of this sort of the access pattern conspiring with the placement algorithm
Dialogue: 0,1:11:09.86,1:11:15.74,Chinese,,0,0,0,,但由于这种访问模式与放置算法密谋
Dialogue: 0,1:11:16.08,1:11:17.48,English,,0,0,0,,We get misses every time
Dialogue: 0,1:11:16.08,1:11:17.48,Chinese,,0,0,0,,我们每次都会失误
Dialogue: 0,1:11:19.54,1:11:25.14,English,,0,0,0,,We'll see how we'll see how conflict marisa's work in detail when we study your caches tomorrow
Dialogue: 0,1:11:19.54,1:11:25.14,Chinese,,0,0,0,,我们将在明天研究你的缓存时看到我们将如何看待冲突玛丽莎的详细工作
Dialogue: 0,1:11:28.24,1:11:31.59,English,,0,0,0,,So
Dialogue: 0,1:11:28.24,1:11:31.59,Chinese,,0,0,0,,所以
Dialogue: 0,1:11:32.10,1:11:36.62,English,,0,0,0,,So this is these these caches exist everywhere in the memory hierarchy and
Dialogue: 0,1:11:32.10,1:11:36.62,Chinese,,0,0,0,,所以这就是这些缓存存在于内存层次结构中的任何地方
Dialogue: 0,1:11:38.42,1:11:41.96,English,,0,0,0,,So all of them are caches of one form or another right
Dialogue: 0,1:11:38.42,1:11:41.96,Chinese,,0,0,0,,所以它们都是各种形式的缓存
Dialogue: 0,1:11:42.66,1:11:45.64,English,,0,0,0,,So you can think of the registers as a type of cache
Dialogue: 0,1:11:42.66,1:11:45.64,Chinese,,0,0,0,,因此，你可以将寄存器视为一种缓存
Dialogue: 0,1:11:46.28,1:11:48.52,English,,0,0,0,,What are they cache for eight byte words
Dialogue: 0,1:11:46.28,1:11:48.52,Chinese,,0,0,0,,它们缓存八个字节的字是什么
Dialogue: 0,1:11:49.64,1:11:53.14,English,,0,0,0,,Okay where's it cached it's cached right on the CPU itself
Dialogue: 0,1:11:49.64,1:11:53.14,Chinese,,0,0,0,,好吧，它缓存在哪里，它缓存在CPU本身上
Dialogue: 0,1:11:54.56,1:11:58.92,English,,0,0,0,,What's the latency it's instant and happens within an instruction
Dialogue: 0,1:11:54.56,1:11:58.92,Chinese,,0,0,0,,什么是在指令中瞬间发生的延迟
Dialogue: 0,1:12:00.20,1:12:03.46,English,,0,0,0,,And then who manages the cache somebody has to manage the cache when
Dialogue: 0,1:12:00.20,1:12:03.46,Chinese,,0,0,0,,然后谁管理缓存，有人必须在何时管理缓存
Dialogue: 0,1:12:03.86,1:12:07.50,English,,0,0,0,,When when there's a request to load an item from the lower level in the hierarchy
Dialogue: 0,1:12:03.86,1:12:07.50,Chinese,,0,0,0,,何时请求从层次结构中的较低级别加载项目
Dialogue: 0,1:12:08.08,1:12:12.60,English,,0,0,0,,Something has to decide what to do with that where to put it in the cache that's called managing the cache
Dialogue: 0,1:12:08.08,1:12:12.60,Chinese,,0,0,0,,有些东西必须决定如何处理将其放入称为管理缓存的缓存中的位置
Dialogue: 0,1:12:13.40,1:12:16.52,English,,0,0,0,,Well in this case the compiler manages the cache
Dialogue: 0,1:12:13.40,1:12:16.52,Chinese,,0,0,0,,在这种情况下，编译器管理缓存
Dialogue: 0,1:12:17.08,1:12:21.42,English,,0,0,0,,When you when you compile your C code the compiler figures out which register
Dialogue: 0,1:12:17.08,1:12:21.42,Chinese,,0,0,0,,当你编译C代码时，编译器会确定哪个寄存器
Dialogue: 0,1:12:21.96,1:12:24.44,English,,0,0,0,,Data items from memory are going to go into okay
Dialogue: 0,1:12:21.96,1:12:24.44,Chinese,,0,0,0,,来自内存的数据项将进入正常状态
Dialogue: 0,1:12:25.08,1:12:32.84,English,,0,0,0,,So tlb this is something this is a cache that's used in virtual memory
Dialogue: 0,1:12:25.08,1:12:32.84,Chinese,,0,0,0,,所以tlb这是一个在虚拟内存中使用的缓存
Dialogue: 0,1:12:33.78,1:12:37.40,English,,0,0,0,,Then there's these hardware caches called l1 and l2 caches
Dialogue: 0,1:12:33.78,1:12:37.40,Chinese,,0,0,0,,然后是这些称为l1和l2缓存的硬件缓存
Dialogue: 0,1:12:38.32,1:12:43.04,English,,0,0,0,,So they store 64 byte blocks on modern Intel systems
Dialogue: 0,1:12:38.32,1:12:43.04,Chinese,,0,0,0,,因此，它们在现代英特尔系统上存储64字节块
Dialogue: 0,1:12:43.86,1:12:50.18,English,,0,0,0,,And they're cached on the CPU chip itself in in s ramps that are built right into the CPU chip
Dialogue: 0,1:12:43.86,1:12:50.18,Chinese,,0,0,0,,它们被安装在CPU芯片本身的高速缓存中，内置于CPU芯片中
Dialogue: 0,1:12:51.44,1:12:58.23,English,,0,0,0,,And depending on whether l1 caches to on core i7s have a latency of 4 cycles
Dialogue: 0,1:12:51.44,1:12:58.23,Chinese,,0,0,0,,并且取决于l1缓存到核心i7上的延迟是4个周期
Dialogue: 0,1:12:58.68,1:13:01.14,English,,0,0,0,,And l2 has a latency of 10 cycles
Dialogue: 0,1:12:58.68,1:13:01.14,Chinese,,0,0,0,,并且l2具有10个周期的延迟
Dialogue: 0,1:13:02.28,1:13:04.64,English,,0,0,0,,And both of these are managed by hardware
Dialogue: 0,1:13:02.28,1:13:04.64,Chinese,,0,0,0,,这两者都是由硬件管理的
Dialogue: 0,1:13:05.44,1:13:11.60,English,,0,0,0,,So when you when the CPU fetches an item from the l1 cache hardware figure finds it
Dialogue: 0,1:13:05.44,1:13:11.60,Chinese,,0,0,0,,所以，当你从l1缓存硬件中获取一个项目时，你会发现它
Dialogue: 0,1:13:12.40,1:13:17.74,English,,0,0,0,,And if there's a miss and a block is loaded from l2 hardware in the l1 cache figures out where to put it
Dialogue: 0,1:13:12.40,1:13:17.74,Chinese,,0,0,0,,如果有一个未命中，并且l1高速缓存中的l2硬件加载了一个块，那么可以确定放置它的位置
Dialogue: 0,1:13:17.88,1:13:22.48,English,,0,0,0,,Ok so all this is done without any intervention by hardware
Dialogue: 0,1:13:17.88,1:13:22.48,Chinese,,0,0,0,,好的，所有这些都是在没有硬件干预的情况下完成的
Dialogue: 0,1:13:24.80,1:13:28.82,English,,0,0,0,,Disks contain buffer operating systems maintain buffer caches
Dialogue: 0,1:13:24.80,1:13:28.82,Chinese,,0,0,0,,磁盘包含缓冲区操作系统维护缓冲区缓存
Dialogue: 0,1:13:29.54,1:13:32.10,English,,0,0,0,,So in this case what's cached is portions of files
Dialogue: 0,1:13:29.54,1:13:32.10,Chinese,,0,0,0,,所以在这种情况下，缓存的是文件的一部分
Dialogue: 0,1:13:33.50,1:13:36.34,English,,0,0,0,,Ok and they're cached in main memory
Dialogue: 0,1:13:33.50,1:13:36.34,Chinese,,0,0,0,,好的，他们被缓存在主内存中
Dialogue: 0,1:13:37.16,1:13:42.42,English,,0,0,0,,And latency to 2 main memories about a hundred cycles or so
Dialogue: 0,1:13:37.16,1:13:42.42,Chinese,,0,0,0,,并且延迟到2个主要记忆大约一百个左右
Dialogue: 0,1:13:43.60,1:13:45.76,English,,0,0,0,,And these are managed by the operating system
Dialogue: 0,1:13:43.60,1:13:45.76,Chinese,,0,0,0,,这些都是由操作系统管理的
Dialogue: 0,1:13:46.32,1:13:51.34,English,,0,0,0,,So the operating system reserves a portion of memory to store files that you've loaded so
Dialogue: 0,1:13:46.32,1:13:51.34,Chinese,,0,0,0,,因此，操作系统会保留一部分内存来存储你已加载的文件
Dialogue: 0,1:13:52.30,1:13:56.46,English,,0,0,0,,So the operating system exploits locality if you if you read a file
Dialogue: 0,1:13:52.30,1:13:56.46,Chinese,,0,0,0,,因此，如果你阅读文件，操作系统将利用本地性
Dialogue: 0,1:13:57.64,1:14:03.54,English,,0,0,0,,And then start reading referencing bytes from that file it will actually be served from the
Dialogue: 0,1:13:57.64,1:14:03.54,Chinese,,0,0,0,,然后开始从该文件中读取引用字节，它实际上将从该文件中提供
Dialogue: 0,1:14:03.92,1:14:06.42,English,,0,0,0,,File cache and it won't go out to disk
Dialogue: 0,1:14:03.92,1:14:06.42,Chinese,,0,0,0,,文件缓存，它不会出现在磁盘上
Dialogue: 0,1:14:08.40,1:14:16.66,English,,0,0,0,,Network networks maintain caches like things like nfs and afs maintain local caches on disk
Dialogue: 0,1:14:08.40,1:14:16.66,Chinese,,0,0,0,,网络网络维护像nfs这样的缓存，afs在磁盘上维护本地缓存
Dialogue: 0,1:14:17.92,1:14:23.64,English,,0,0,0,,Your browser has a cache so when it fetches files from from servers
Dialogue: 0,1:14:17.92,1:14:23.64,Chinese,,0,0,0,,你的浏览器有缓存，因此从服务器获取文件时
Dialogue: 0,1:14:23.94,1:14:27.88,English,,0,0,0,,It stores those files locally on disk so if you reference those web pages again
Dialogue: 0,1:14:23.94,1:14:27.88,Chinese,,0,0,0,,它将这些文件本地存储在磁盘上，以便再次引用这些网页
Dialogue: 0,1:14:28.10,1:14:31.84,English,,0,0,0,,They're served from from your local disk rather than going all the way across the network
Dialogue: 0,1:14:28.10,1:14:31.84,Chinese,,0,0,0,,它们来自你的本地磁盘，而不是一直通过网络
Dialogue: 0,1:14:33.16,1:14:39.60,English,,0,0,0,,Ok so the point is that these caches exist everywhere in the memory hierarchy
Dialogue: 0,1:14:33.16,1:14:39.60,Chinese,,0,0,0,,好的，关键是这些缓存存在于内存层次结构中的任何位置
Dialogue: 0,1:14:39.86,1:14:43.84,English,,0,0,0,,And they're all based on the same principles they're just implemented in different ways
Dialogue: 0,1:14:39.86,1:14:43.84,Chinese,,0,0,0,,而且它们都基于相同的原则，它们只是以不同的方式实施
Dialogue: 0,1:14:46.78,1:14:50.42,English,,0,0,0,,Ok so just to summarize what we've what we've done today
Dialogue: 0,1:14:46.78,1:14:50.42,Chinese,,0,0,0,,好的，只是总结一下我们今天所做的事情
Dialogue: 0,1:14:51.82,1:14:57.12,English,,0,0,0,,We've seen that there's there's a gap between the CPU and our storage devices that continues to increase
Dialogue: 0,1:14:51.82,1:14:57.12,Chinese,,0,0,0,,我们已经看到CPU和我们的存储设备之间存在差距，这种差距在不断扩大
Dialogue: 0,1:14:58.38,1:15:02.90,English,,0,0,0,,We've seen that well-written programs have this property called locality
Dialogue: 0,1:14:58.38,1:15:02.90,Chinese,,0,0,0,,我们已经看到编写良好的程序具有称为locality的属性
Dialogue: 0,1:15:03.86,1:15:08.98,English,,0,0,0,,And we've seen that caching by taking by using caching
Dialogue: 0,1:15:03.86,1:15:08.98,Chinese,,0,0,0,,我们通过使用缓存看到了缓存
Dialogue: 0,1:15:08.98,1:15:12.80,English,,0,0,0,,We can build a memory hierarchy that takes advantage of locality and programs
Dialogue: 0,1:15:08.98,1:15:12.80,Chinese,,0,0,0,,我们可以构建一个利用局部性和程序的内存层次结构
Dialogue: 0,1:15:13.66,1:15:19.70,English,,0,0,0,,And allows us to build storage systems that where we can access data at the rate of the fastest device
Dialogue: 0,1:15:13.66,1:15:19.70,Chinese,,0,0,0,,并允许我们构建存储系统，以便以最快的设备速率访问数据
Dialogue: 0,1:15:20.36,1:15:25.14,English,,0,0,0,,But at the cost and capacity of the devices at the the lowest level
Dialogue: 0,1:15:20.36,1:15:25.14,Chinese,,0,0,0,,但是在最低级别的设备的成本和容量
Dialogue: 0,1:15:26.28,1:15:35.48,English,,0,0,0,,Ok so thursday we're going to look at a very specific part of the hierarchy called cache memories
Dialogue: 0,1:15:26.28,1:15:35.48,Chinese,,0,0,0,,好的星期四我们将看一个称为缓存的层次结构的一个非常具体的部分
